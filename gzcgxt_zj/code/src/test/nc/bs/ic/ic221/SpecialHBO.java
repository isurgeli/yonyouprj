package nc.bs.ic.ic221;

/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Vector;

import nc.bs.dao.BaseDAO;
import nc.bs.framework.common.NCLocator;
import nc.bs.ic.pub.bill.GeneralBillDMO;
import nc.bs.ic.pub.bill.MiscDMO;
import nc.bs.ic.pub.bill.SpecialBillBO;
import nc.bs.ic.pub.bill.SpecialBillBOHelper;
import nc.bs.ic.pub.check.CheckDMO;
import nc.bs.ic.pub.check.RebuildDMO;
import nc.bs.pub.SystemException;
import nc.bs.uap.lock.PKLock;
import nc.itf.uap.billtemplate.IBillTemplateQry;
import nc.jdbc.framework.processor.VectorProcessor;
import nc.vo.ic.pub.BillTypeConst;
import nc.vo.ic.pub.GenMethod;
import nc.vo.ic.pub.SmartVOUtilExt;
import nc.vo.ic.pub.bill.GeneralBillHeaderVO;
import nc.vo.ic.pub.bill.GeneralBillItemVO;
import nc.vo.ic.pub.bill.GeneralBillVO;
import nc.vo.ic.pub.bill.QryConditionVO;
import nc.vo.ic.pub.bill.SpecialBillHeaderVO;
import nc.vo.ic.pub.bill.SpecialBillItemVO;
import nc.vo.ic.pub.bill.SpecialBillVO;


import nc.vo.scm.ic.bill.WhVO;
import nc.vo.ic.pub.check.GeneralMethodGetErrorMsg;
import nc.vo.ic.pub.check.VOCheck;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.VOStatus;
import nc.vo.pub.ValidationException;
import nc.vo.pub.bill.BillTempletVO;
import nc.vo.pub.lang.UFDouble;
import nc.vo.scm.constant.ic.InOutFlag;
import nc.vo.scm.ic.bill.InvVO;
import nc.vo.scm.pub.smart.SmartFieldMeta;

//import
/**
 * SpecialH的BO类
 *
 * 创建日期：(2001-5-16)
 * @author：zhongrq
 * 
 * lxt 2013-07 gzcg：关联销售发货单时，更新销售发货单已出库数量。
 */
public class SpecialHBO extends SpecialBillBO {



/**
 * SpecialHBO 构造子注解。
 */
public SpecialHBO() {
	super();
}
/**
 * 创建者：仲瑞庆
 * 功能：由特殊单据VO改为普通单据VO
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2001-6-26 下午 4:43)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.vo.ic.pub.bill.GeneralBillVO
 * @param sbvo nc.vo.ic.pub.bill.SpecialBillVO
 */
protected GeneralBillVO changeFromSpecialVOtoGeneralVO(
	SpecialBillVO sbvo,
	int iInOutFlag) {
	if ((sbvo == null)
		|| (sbvo.getHeaderVO() == null)
		|| (sbvo.getChildrenVO() == null)) {
		return null;
	}
	int iItemNumb= sbvo.getChildrenVO().length;
	if (iItemNumb < 1) {
		return null;
	}
	GeneralBillVO gbvo= new GeneralBillVO(iItemNumb);

	//对表头
	gbvo.setParentVO(
		changeFromSpecialVOtoGeneralVOAboutHeader(gbvo, sbvo, iInOutFlag));

	//对表体
	for (int j= 0; j < iItemNumb; j++) {
		gbvo.setItem(
			j,
			changeFromSpecialVOtoGeneralVOAboutItem(gbvo, sbvo, iInOutFlag, j));
	}

	return gbvo;
}
/**
 * 创建者：仲瑞庆
 * 功能：
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2001-8-16 12:53:03)
 * 修改日期，修改人，修改原因，注释标志：
 * @param gbvo nc.vo.ic.pub.bill.GeneralBillVO
 * @param sbvo nc.vo.ic.pub.bill.SpecialBillVO
 * @param iInOutFlag int
 */
protected GeneralBillHeaderVO changeFromSpecialVOtoGeneralVOAboutHeader(
	GeneralBillVO gbvo,
	SpecialBillVO sbvo,
	int iInOutFlag) {
	//private String m_sCorpID= null; //公司ID
	//String sUserID= null; //当前使用者ID
	//String sLogDate= null; //当前登录日期
	//String sUserName= null; //当前使用者名称

	String[] sHeaderItemKeyName= gbvo.getHeaderVO().getAttributeNames();
	for (int i= 0; i < sHeaderItemKeyName.length; i++) {
		if (sbvo.getHeaderValue(sHeaderItemKeyName[i]) != null) {
			gbvo.setHeaderValue(
				sHeaderItemKeyName[i],
				sbvo.getHeaderValue(sHeaderItemKeyName[i]));
		}
		if (sHeaderItemKeyName[i].trim().equals("cwarehouseid")) {
			//if (packageID.equals("221")) {
			if (iInOutFlag == InOutFlag.OUT) {
				gbvo.setHeaderValue(
					sHeaderItemKeyName[i],
					sbvo.getHeaderValue("coutwarehouseid"));
			} else {
				gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("cinwarehouseid"));
			}
			//} else if (packageID.equals("261")) {
			//gbvo.setHeaderValue(
			//sHeaderItemKeyName[i],
			//sbvo.getHeaderValue("coutwarehouseid"));
			//} else {
			//gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getItemValue(0, "cwarehouseid"));
			//}
		} else if (sHeaderItemKeyName[i].trim().equals("isLocatorMgt")) {
			//if (packageID.equals("221")) {
			if (iInOutFlag == InOutFlag.OUT) {
				gbvo.setHeaderValue(
					sHeaderItemKeyName[i],
					sbvo.getHeaderValue("isLocatorMgtOut"));
				gbvo.setWh(sbvo.getWhOut());
			} else {
				gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("isLocatorMgtIn"));
				gbvo.setWh(sbvo.getWhIn());
			}
			//} else if (packageID.equals("261")) {
			//gbvo.setWh(sbvo.getWhOut());
			//} else {
			//gbvo.setWh(sbvo.getBodyWh(0));
			//}
		} else if (sHeaderItemKeyName[i].trim().equals("cwarehousename")) {
			//if (packageID.equals("221")) {
			if (iInOutFlag == InOutFlag.OUT) {
				gbvo.setHeaderValue(
					sHeaderItemKeyName[i],
					sbvo.getHeaderValue("coutwarehousename"));
			} else {
				gbvo.setHeaderValue(
					sHeaderItemKeyName[i],
					sbvo.getHeaderValue("cinwarehousename"));
			}
			//} else if (packageID.equals("261")) {
			//gbvo.setHeaderValue(
			//sHeaderItemKeyName[i],
			//sbvo.getHeaderValue("coutwarehousename"));
			//} else {
			//gbvo.setHeaderValue(
			//sHeaderItemKeyName[i],
			//sbvo.getItemValue(0, "cwarehousename"));
			//}
		} else if (sHeaderItemKeyName[i].trim().equals("cdptid")) {
			//if (packageID.equals("221")) {
			if (iInOutFlag == InOutFlag.OUT) {
				gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("coutdeptid"));
			} else {
				gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("cindeptid"));
			}
			//} else {
			//gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("coutdeptid"));
			//}
		} else if (sHeaderItemKeyName[i].trim().equals("cdptname")) {
			//if (packageID.equals("221")) {
			if (iInOutFlag == InOutFlag.OUT) {
				gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("coutdeptname"));
			} else {
				gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("cindeptname"));
			}
			//} else {
			//gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("coutdeptname"));
			//}
		} else if (sHeaderItemKeyName[i].trim().equals("cbizid")) {
			//if (packageID.equals("221")) {
			if (iInOutFlag == InOutFlag.OUT) {
				gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("coutbsor"));
			} else {
				gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("cinbsrid"));
			}
			//} else {
			//gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("coutbsor"));
			//}
		} else if (sHeaderItemKeyName[i].trim().equals("cbizname")) {
			//if (packageID.equals("221")) {
			if (iInOutFlag == InOutFlag.OUT) {
				gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("coutbsorname"));
			} else {
				gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("cinbsrname"));
			}
			//} else {
			//gbvo.setHeaderValue(sHeaderItemKeyName[i], sbvo.getHeaderValue("coutbsorname"));
			//}
		} else if (sHeaderItemKeyName[i].trim().equals("cbilltypecode")) {
			if (iInOutFlag == InOutFlag.OUT) {
				gbvo.setHeaderValue(sHeaderItemKeyName[i], BillTypeConst.m_otherOut);
			} else {
				gbvo.setHeaderValue(sHeaderItemKeyName[i], BillTypeConst.m_otherIn);
			}
		} else if (sHeaderItemKeyName[i].trim().equals("cgeneralhid")) { //清表头行中PK
			gbvo.setHeaderValue(sHeaderItemKeyName[i], "");
		} else if (sHeaderItemKeyName[i].trim().equals("vbillcode")) { //清表单单据号
			gbvo.setHeaderValue(sHeaderItemKeyName[i], "");
		//} else if (sHeaderItemKeyName[i].trim().equals("coperatorid")) { //操作员
			//gbvo.setHeaderValue(sHeaderItemKeyName[i], sUserID);
		//} else if (sHeaderItemKeyName[i].trim().equals("coperatorname")) { //操作员
			//gbvo.setHeaderValue(sHeaderItemKeyName[i], sUserName);
		//} else if (sHeaderItemKeyName[i].trim().equals("dbilldate")) { //操作员
			//gbvo.setHeaderValue(sHeaderItemKeyName[i], sLogDate);
		} else if (sHeaderItemKeyName[i].trim().equals("cauditorid")) { //调出人，普通单不能在此填入
			gbvo.setHeaderValue(sHeaderItemKeyName[i], null);
		} else if (sHeaderItemKeyName[i].trim().equals("cauditorname")) { //调出人，普通单不能在此填入
			gbvo.setHeaderValue(sHeaderItemKeyName[i], null);
		} else if (sHeaderItemKeyName[i].trim().equals("vadjuster")) { //调入人，普通单不能在此填入
			gbvo.setHeaderValue(sHeaderItemKeyName[i], null);
		} else if (sHeaderItemKeyName[i].trim().equals("vadjustername")) { //调入人，普通单不能在此填入
			gbvo.setHeaderValue(sHeaderItemKeyName[i], null);
		}
	}
	//cwhsmanagerid
	//cwhsmanagername
	//cdptid coutdeptid  cindeptid
	//cdptname coutdeptname  cindeptname
	//cbizid coutbsor  cinbsrid
	//cbizname coutbsorname  cinbsrname
	//cproviderid
	//cprovidername
	//ccustomerid
	//ccustomername
	gbvo.getParentVO().setStatus(nc.vo.pub.VOStatus.NEW);
	return (GeneralBillHeaderVO) gbvo.getParentVO();
}
/**
 * 创建者：仲瑞庆
 * 功能：
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2001-8-16 12:53:03)
 * 修改日期，修改人，修改原因，注释标志：
 * @param gbvo nc.vo.ic.pub.bill.GeneralBillVO
 * @param sbvo nc.vo.ic.pub.bill.SpecialBillVO
 * @param iInOutFlag int
 */
protected GeneralBillItemVO changeFromSpecialVOtoGeneralVOAboutItem(
	GeneralBillVO gbvo,
	SpecialBillVO sbvo,
	int iInOutFlag,
	int j) {
	String[] sBodyItemKeyName= gbvo.getChildrenVO()[0].getAttributeNames();
	for (int i= 0; i < sBodyItemKeyName.length; i++) {
		if (sbvo.getItemValue(j, sBodyItemKeyName[i]) != null) {
			gbvo.setItemValue(
				j,
				sBodyItemKeyName[i],
				sbvo.getItemValue(j, sBodyItemKeyName[i]));
		}
		if (sBodyItemKeyName[i].trim().equals("nshouldinnum")) {
			if (iInOutFlag == InOutFlag.OUT) {
			} else {
				gbvo.setItemValue(j, sBodyItemKeyName[i], sbvo.getItemValue(j, "dshldtransnum"));
			}
		} else if (sBodyItemKeyName[i].trim().equals("nneedinassistnum")) {
			if (iInOutFlag == InOutFlag.OUT) {
			} else {
				gbvo.setItemValue(
					j,
					sBodyItemKeyName[i],
					sbvo.getItemValue(j, "nshldtransastnum"));
			}
		} else if (sBodyItemKeyName[i].trim().equals("ninnum")) {
			if (iInOutFlag == InOutFlag.OUT) {
			} else {
				gbvo.setItemValue(j, sBodyItemKeyName[i], sbvo.getItemValue(j, "dshldtransnum"));
			}
		} else if (sBodyItemKeyName[i].trim().equals("ninassistnum")) {
			if (iInOutFlag == InOutFlag.OUT) {
			} else {
				gbvo.setItemValue(
					j,
					sBodyItemKeyName[i],
					sbvo.getItemValue(j, "nshldtransastnum"));
			}
		} else if (sBodyItemKeyName[i].trim().equals("nshouldoutnum")) {
			if (iInOutFlag == InOutFlag.OUT) {
				gbvo.setItemValue(j, sBodyItemKeyName[i], sbvo.getItemValue(j, "dshldtransnum"));
			} else {
			}
		} else if (sBodyItemKeyName[i].trim().equals("nshouldoutassistnum")) {
			if (iInOutFlag == InOutFlag.OUT) {
				gbvo.setItemValue(
					j,
					sBodyItemKeyName[i],
					sbvo.getItemValue(j, "nshldtransastnum"));
			} else {
			}
		} else if (sBodyItemKeyName[i].trim().equals("noutnum")) {
			if (iInOutFlag == InOutFlag.OUT) {
				gbvo.setItemValue(j, sBodyItemKeyName[i], sbvo.getItemValue(j, "dshldtransnum"));
			} else {
			}
		} else if (sBodyItemKeyName[i].trim().equals("noutassistnum")) {
			if (iInOutFlag == InOutFlag.OUT) {
				gbvo.setItemValue(
					j,
					sBodyItemKeyName[i],
					sbvo.getItemValue(j, "nshldtransastnum"));
			} else {
			}
		} else if (sBodyItemKeyName[i].trim().equals("nmny")) {
			gbvo.setItemValue(j, sBodyItemKeyName[i], sbvo.getItemValue(j, "je"));
		} else if (sBodyItemKeyName[i].trim().equals("nplannedprice")) {
			gbvo.setItemValue(j, sBodyItemKeyName[i], sbvo.getItemValue(j, "jhdj"));
		} else if (sBodyItemKeyName[i].trim().equals("nplannedmny")) {
			gbvo.setItemValue(j, sBodyItemKeyName[i], sbvo.getItemValue(j, "jhje"));
		} else if (sBodyItemKeyName[i].trim().equals("csourcetype")) {
			gbvo.setItemValue(j, sBodyItemKeyName[i], nc.vo.ic.pub.BillTypeConst.m_transfer);
		} else if (sBodyItemKeyName[i].trim().equals("vsourcebillcode")) {
			gbvo.setItemValue(j, sBodyItemKeyName[i], sbvo.getHeaderValue("vbillcode"));
		} else if (sBodyItemKeyName[i].trim().equals("csourcebillhid")) {
			gbvo.setItemValue(j, sBodyItemKeyName[i], sbvo.getHeaderValue("cspecialhid"));
		} else if (sBodyItemKeyName[i].trim().equals("csourcebillbid")) {
			gbvo.setItemValue(j, sBodyItemKeyName[i], sbvo.getItemValue(j, "cspecialbid"));
		} else if (sBodyItemKeyName[i].trim().equals("cgeneralbid")) { //清表体行中PK
			gbvo.setItemValue(j, sBodyItemKeyName[i], "");
		}
	}
	//nshouldinnum  ninnum
	//nneedinassistnum  ninassistnum
	//nshouldoutnum  noutnum
	//nshouldoutassistnum  noutassistnum
	//dshldtransnum  nshldtransastnum
	gbvo.getChildrenVO()[j].setStatus(nc.vo.pub.VOStatus.NEW);
	return (GeneralBillItemVO) gbvo.getItemVOs()[j];
}
/**
 * 创建者：仲瑞庆
 * 功能：其他入库单VO校验
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2001-10-22 19:44:36)
 * 修改日期，修改人，修改原因，注释标志：
 * @param sbvo nc.vo.ic.pub.bill.SpecialBillVO
 * @exception nc.vo.pub.ValidationException 异常说明。
 */
protected void checkOtherInBillVO(
	BillTempletVO btvo,
	GeneralBillVO sbvo,
	String m_sNumItemKey,
	String m_sAstItemKey)
	throws nc.vo.pub.ValidationException {
	//执行以下检查，将不具有的检查注释------------------------------------------------
	//------------------------------------------------------------------------------
	//VO存在检查
	VOCheck.checkNullVO(sbvo);
	//------------------------------------------------------------------------------
	//应发数量检查,要放在前面
	//本节点使用=====================

	//数值输入全部性检查
	VOCheck.checkNumInput(sbvo.getChildrenVO(), m_sNumItemKey);

	//本节点使用=====================
	//表头表体非空检查
	VOCheck.validate(
		sbvo,
		GeneralMethodGetErrorMsg.getHeaderCanotNullString(btvo),
		GeneralMethodGetErrorMsg.getBodyCanotNullString(btvo));
	//------------------------------------------------------------------------------
	//业务项检查

	//自由项
	VOCheck.checkFreeItemInput(sbvo, m_sNumItemKey);
	//批次号
	VOCheck.checkLotInput(sbvo, m_sNumItemKey);
	//辅计量
	VOCheck.checkAssistUnitInput(sbvo, m_sNumItemKey, m_sAstItemKey);
	//失效日期
	VOCheck.checkInvalidateDateInput(sbvo, m_sNumItemKey);
	//入库日期
	//	VOCheck.checkdbizdate(sbvo, m_sNumItemKey);
	//价格>0检查
	VOCheck.checkGreaterThanZeroInput(sbvo.getChildrenVO(), "nprice", nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("common","UC000-0000741")/*@res "单价"*/);
	//序列号检查
	VOCheck.checkSNInput(sbvo.getChildrenVO(), m_sNumItemKey);
	//货位检查
	VOCheck.checkLocatorInput(sbvo, new Integer(InOutFlag.IN));
	/** 如果单据为转库单,增加数量不可为负的检查 */
	if (getSourBillTypeCode(sbvo) != null
		&& getSourBillTypeCode(sbvo).equals(BillTypeConst.m_transfer)) {

		VOCheck.checkGreaterThanZeroInput(sbvo.getChildrenVO(), m_sNumItemKey, nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("common","UC000-0002282")/*@res "数量"*/);
		VOCheck.checkGreaterThanZeroInput(sbvo.getChildrenVO(), m_sAstItemKey, nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("common","UC000-0003971")/*@res "辅数量"*/);
	}
}
/**
 * 创建者：仲瑞庆
 * 功能：其他出库单VO校验
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2001-10-22 19:44:36)
 * 修改日期，修改人，修改原因，注释标志：
 * @param sbvo nc.vo.ic.pub.bill.SpecialBillVO
 * @exception nc.vo.pub.ValidationException 异常说明。
 */
protected void checkOtherOutBillVO(
	BillTempletVO btvo,
	GeneralBillVO sbvo,
	String m_sNumItemKey,
	String m_sAssNumItemKey)
	throws nc.vo.pub.ValidationException {
		//执行以下检查，将不具有的检查注释------------------------------------------------
		//------------------------------------------------------------------------------
		//VO存在检查
		VOCheck.checkNullVO(sbvo);
		//------------------------------------------------------------------------------
		//应发数量检查,要放在前面
		//本节点使用=====================

		//数值输入全部性检查
		VOCheck.checkNumInput(sbvo.getChildrenVO(), m_sNumItemKey);

		//本节点使用=====================
		//表头表体非空检查
		VOCheck.validate(
			sbvo,
			GeneralMethodGetErrorMsg.getHeaderCanotNullString(btvo),
			GeneralMethodGetErrorMsg.getBodyCanotNullString(btvo));
		//------------------------------------------------------------------------------
		//业务项检查

		//自由项
		VOCheck.checkFreeItemInput(sbvo, m_sNumItemKey);
		//批次号
		VOCheck.checkLotInput(sbvo, m_sNumItemKey);
		//辅计量
		VOCheck.checkAssistUnitInput(sbvo, m_sNumItemKey, m_sAssNumItemKey);
		//VOCheck.checkAssistUnitInput(sbvo, m_sNumItemKey,"hsl");
		//失效日期
		VOCheck.checkInvalidateDateInput(sbvo, m_sNumItemKey);
		//入库日期
		//	VOCheck.checkdbizdate(sbvo, m_sNumItemKey);
		//价格>0检查
		VOCheck.checkGreaterThanZeroInput(sbvo.getChildrenVO(), "nprice", nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("common","UC000-0000741")/*@res "单价"*/);
		//数量非零检查
		//VOCheck.checkNotZeroInput(sbvo.getChildrenVO(), m_sNumItemKey, "数量");
		//VOCheck.checkNotZeroInput(sbvo.getChildrenVO(), m_sAssNumItemKey, "辅数量");
		//序列号检查
		VOCheck.checkSNInput(sbvo.getChildrenVO(), m_sNumItemKey);
		//货位检查
		VOCheck.checkLocatorInput(sbvo, new Integer(InOutFlag.OUT));
		/** 如果单据为转库单,增加数量不可为负的检查 */
		if (getSourBillTypeCode(sbvo) != null
			&& getSourBillTypeCode(sbvo).equals(BillTypeConst.m_transfer)) {

			VOCheck.checkGreaterThanZeroInput(
				sbvo.getChildrenVO(),
				m_sNumItemKey,
				nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("common","UC000-0002282")/*@res "数量"*/);
			VOCheck.checkGreaterThanZeroInput(
				sbvo.getChildrenVO(),
				m_sAssNumItemKey,
				nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("common","UC000-0003971")/*@res "辅数量"*/);
		}
}
/**
 * 生产制造推式生成材料出库单保存的检查方法
 * 功能：如果需要审核地仓库不能是货位管理
 			存货不能是批次,自由项,序列号管理的仓库.
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2001-10-19 09:27:24)
 * 修改日期，修改人，修改原因，注释标志：
 */
private String checkOutBill(GeneralBillVO gvo) throws BusinessException {
	if (gvo == null || gvo.getItemVOs() == null)
		return "Bill VO is null!";
	try {
		StringBuffer sbErrorMsg = null;
		String WHID = (String) gvo.getHeaderValue("cwarehouseid");
		String CorpID = (String) gvo.getHeaderValue("pk_corp");
		String InvID1 = null;
		String InvID2 = null;
		MiscDMO dmoMisc = new MiscDMO();
		int RowNum = gvo.getItemCount();
		InvVO invvo = null;
		WhVO whvo = null;

		sbErrorMsg = new StringBuffer();
		whvo = dmoMisc.getWhInfo(WHID);
		if (whvo != null) {
			if (whvo.getIsLocatorMgt().intValue() == 1) {
				sbErrorMsg.append("The Warehouse can not be Locator Management!!");
			}
		} else {
			sbErrorMsg.append(" Can not get the Warehouse info! ");
		}
		for (int i = 0; i < RowNum; i++) {
			InvID2 = (String) gvo.getItemValue(i, "cinventoryid");
			if (InvID2 != null && !InvID2.equals(InvID1)) {
				InvID1 = InvID2;
				invvo = dmoMisc.getInvQty(WHID, InvID2, null, CorpID);
				if (invvo != null) {
					if (invvo.getIsFreeItemMgt().intValue() == 1) {
						sbErrorMsg.append(
							" The '" + i + "' line Inventory can not be the Free Item Management!");
					}
					if (invvo.getIsLotMgt().intValue() == 1) {
						sbErrorMsg.append(
							" The '" + i + "' line Inventory can not be the Lot Management!");
					}
					if (invvo.getIsSerialMgt().intValue() == 1) {
						sbErrorMsg.append(
							" The '" + i + "' line Inventory can not be the Serail No.  Management!");
					}

				} else {
					sbErrorMsg.append("Can not get '" + i + "' line of Inventory info! ");
				}

			}
		}
		if (sbErrorMsg != null && sbErrorMsg.length() > 0) {
			return sbErrorMsg.toString();
		} else {
			return null;
		}

	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}
}
/**
 * 创建者：仲瑞庆
 * 功能：转库单VO校验
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2001-10-22 19:44:36)
 * 修改日期，修改人，修改原因，注释标志：
 * @param sbvo nc.vo.ic.pub.bill.SpecialBillVO
 * @exception nc.vo.pub.ValidationException 异常说明。
 */
protected void checkTransferBillVO(
	BillTempletVO btvo,
	SpecialBillVO sbvo,
	String m_sNumItemKey,
	String m_sAstItemKey)
	throws nc.vo.pub.ValidationException {

	//执行以下检查，将不具有的检查注释------------------------------------------------
	//------------------------------------------------------------------------------
	//VO存在检查
	VOCheck.checkNullVO(sbvo);
	//------------------------------------------------------------------------------
	//数值输入全部性检查
	VOCheck.checkNumInput(sbvo.getChildrenVO(), m_sNumItemKey);
	//------------------------------------------------------------------------------
	//表头表体非空检查
	VOCheck.validate(
		sbvo,
		GeneralMethodGetErrorMsg.getHeaderCanotNullString(btvo),
		GeneralMethodGetErrorMsg.getBodyCanotNullString(btvo));
	//------------------------------------------------------------------------------
	//业务项检查
	//自由项
	VOCheck.checkFreeItemInput(sbvo, m_sNumItemKey);
	//批次号
	VOCheck.checkLotInput(sbvo, m_sNumItemKey);
	//辅计量
	VOCheck.checkAssistUnitInput(sbvo, m_sNumItemKey, m_sAstItemKey);
	//失效日期
	VOCheck.checkInvalidateDateInput(sbvo, m_sNumItemKey);
	//入库日期 不做此项检查，已放入非空项检查中，为系统必填项
	//VOCheck.checkdbizdate(sbvo, m_sNumItemKey);
	//单价>=0检查
	VOCheck.checkGreaterThanZeroInput(sbvo.getChildrenVO(), "nprice", nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("common","UC000-0000741")/*@res "单价"*/);
	//数量>0检查
	VOCheck.checkGreaterThanZeroInput(sbvo.getChildrenVO(), m_sNumItemKey, nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("common","UC000-0002282")/*@res "数量"*/);
	//辅数量>0检查
	VOCheck.checkGreaterThanZeroInput(sbvo.getChildrenVO(), m_sAstItemKey, nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("common","UC000-0003971")/*@res "辅数量"*/);
	//金额>0检查 VO中没有金额项
	//VOCheck.checkGreaterThanZeroInput(sbvo.getChildrenVO(), "je","金额");
	//序列号检查
	//VOCheck.checkSNInput(sbvo.getChildrenVO());
	//货位检查
	//VOCheck.checkLocatorInput(sbvo, new Integer(InOutFlag.IN));
	//业务项检查
	//来源单据类型csourcetype,
	//来源单据号vsourcebillcode,
	//来源单据表头ID csourcebillhid,
	//来源单据表体ID csourcebillbid,
	//源头单据类型cfirsttype ， 源头单据表头ID cfirstbillhid ， 源头单据表体ID cfirstbillbid ，
	VOCheck.checkBusiNeed(
		sbvo,
		m_sNumItemKey,
		new String[] {
			"csourcetype",
			"vsourcebillcode",
			"csourcebillhid",
			"csourcebillbid",
			"cfirsttype",
			"cfirstbillhid",
			"cfirstbillbid" });
	//------------------------------------------------------------------------------

	//自定校验
	//------------------------------------------------------------------------------
	//出入库仓库不能相同
	//应当已进行了非空校验
	if (sbvo
		.getParentVO()
		.getAttributeValue("coutwarehouseid")
		.toString()
		.trim()
		.equals(
			sbvo.getParentVO().getAttributeValue("cinwarehouseid").toString().trim())) {
		ValidationException e= new ValidationException();
		e.setHint(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000000")/*@res "出入库仓库不应相同..."*/);
		throw e;
	}
}
/**
 * 作者：余大英
 * 创建日期：(2001-8-30 13:32:39)
 *
 * @param vo nc.vo.ic.pub.bill.GeneralBillVO
 * @exception java.rmi.RemoteException 异常说明。
 */
public void deleteBill(SpecialBillVO vo) throws BusinessException {



	String [] saBillPK=new String[1];
	saBillPK[0]=(String)vo.getParentVO().getAttributeValue("cspecialhid");
	String sOperatorID=(String)vo.getParentVO().getAttributeValue("coperatorid");
	String sCorpID=(String)vo.getParentVO().getAttributeValue("pk_corp");

	deleteBills(saBillPK,sOperatorID,sCorpID);
	updateBillType4331Num(vo, true);
}
/**
 * 根据主键在数据库中删除一个VO对象。
 *
 * 创建日期：(2001-5-16)
 * @param key String
 * @exception java.rmi.RemoteException 异常说明。
 */
private void deleteBills(String[] saBillPK, String sOperatorID, String sCorpID)
	throws BusinessException {

	try {
		//参数数据合法性检查
		if (saBillPK == null || saBillPK.length == 0)
			throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000001")/*@res "非法数据！PK为空。"*/);
		for (int i= 0; i < saBillPK.length; i++)
			if (saBillPK[i] == null)
				throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000001")/*@res "非法数据！PK为空。"*/);

		//业务锁准备
		//PKLock boLock= PKLock.getInstance();
		if (sOperatorID == null || sOperatorID.trim().length() == 0)
			throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000002")/*@res "非法的数据!没有操作员。"*/);

		//boolean bIfCanDO= false; //是否可操作
		//String saPK[]= null;

		//执行删除。
		SpecialHDMO dmo= new SpecialHDMO();

		RebuildDMO redmo= new RebuildDMO();
		GeneralBillDMO gbdmo= new GeneralBillDMO();
		ArrayList alBill= redmo.getSBills(saBillPK);
		for (int i= 0; i < alBill.size(); i++) {
			SpecialBillVO voBill= (SpecialBillVO) alBill.get(i);
			voBill.getParentVO().setAttributeValue("coperatorid", sOperatorID);
			voBill.getParentVO().setAttributeValue("pk_corp", sCorpID);
			//检查是否已做转入/转出
			dmo.checkAlreadyTransfer(voBill);
		//	dmo.check(voBill);
			//加业务锁,传入所有的PK,当前操作员，不用表名。
			//saPK= getAllPKSpecial(voBill);
			//检查是否是独立的单据
			if (gbdmo.queryChildrenBillPK(voBill.getParentVO().getPrimaryKey().trim())
				!= null) {
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000003")/*@res "该单据存在对应的其他入/出库单，不可删除！"*/);
			}
/*			bIfCanDO= boLock.acquireBatchLock(saPK, sOperatorID, "");
			if (bIfCanDO) {*/
				try {
					dmo.deleteBill(voBill.getParentVO().getPrimaryKey());
				} catch (Exception e) {
					throw e;
				} finally { //无论执行情况如何，都解锁。
					//解锁
					//boLock.releaseBatchLock(saPK, sOperatorID, "");
				}
/*			} else
				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000004")@res "正在进行相关操作，请稍后再试");
*/
		}
	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}
}


/**
 * EJB规范中要求的方法。
 *
 * 创建日期：(2001-5-16)
 */
public void ejbCreate() {}
/**
 * 创建者：仲瑞庆
 * 功能：获得单据模板VO
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2001-10-22 19:34:19)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.vo.pub.bill.BillTempletVO
 * @param typecode java.lang.String
 * @param corp java.lang.String
 * @param busitype java.lang.String
 * @param operator java.lang.String
 * @exception java.rmi.RemoteException 异常说明。
 */
protected BillTempletVO findDefaultCardTempletData(AggregatedValueObject vo)
	throws BusinessException {

	BillTempletVO btvo= null;
	IBillTemplateQry templetBO=null;
	try {
		templetBO = (IBillTemplateQry)NCLocator.getInstance().lookup(IBillTemplateQry.class.getName());
		btvo=
			templetBO.findDefaultCardTempletData(
				(String) vo.getParentVO().getAttributeValue("cbilltypecode"),
				(String) vo.getParentVO().getAttributeValue("pk_corp"),
				(String) vo.getParentVO().getAttributeValue("cbiztypeid"),
				(String) vo.getParentVO().getAttributeValue("coperatorid"));
	} catch (Exception e) {
//  库存组异常抛出规范
    throw nc.bs.ic.pub.GenMethod.handleException("Cannot get User Defined Params from MiddleWare Server!", e); 
		/*throw new nc.bs.pub.SystemException(
			"Cannot get User Defined Params from MiddleWare Server!");*/
	}
	return btvo;
}





/**
 * 得到m_voBill中的单据类型编码
 * 功能：
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2001-10-12 13:18:06)
 * 修改日期，修改人，修改原因，注释标志：
 */
private String getSourBillTypeCode(GeneralBillVO sbvo) {

	return (String) sbvo.getItemValue(0, "csourcetype");
}
/**
 * 向数据库中插入一个VO对象。
 *
 * 创建日期：(2001-5-14)
 * @param generalH nc.vo.ic.ic201.SpecialHVO
 * @return java.lang.String  所插入VO对象的主键字符串。
 * @exception java.rmi.RemoteException 异常说明。
 */
private ArrayList insertBills(SpecialBillVO[] vos)
	throws BusinessException {
	try {
		//非法的数据
		if (vos == null || vos.length == 0)
			throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000005")/*@res "非法的数据!"*/);
		for (int i = 0; i < vos.length; i++)
			if (vos[i] == null)
				throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000005")/*@res "非法的数据!"*/);
		SpecialBillBOHelper.setNewBillInitDateTime(vos);
		
		//------ 执行新增 -------------
		ArrayList alTempRet = null;
		nc.bs.ic.ic221.SpecialHDMO dmo = new nc.bs.ic.ic221.SpecialHDMO();
		String sWhIn = null, sWhOut = null; //in warehouse ,out warehouse
		for (int i = 0; i < vos.length; i++) {
			//检查两个仓库是否属于同一个库存组织
			sWhIn = vos[i].getHeaderVO().getCinwarehouseid();
			sWhOut = vos[i].getHeaderVO().getCoutwarehouseid();
			dmo.checkSameCalbody(sWhIn, sWhOut);
			//执行新增
			alTempRet = dmo.insertBill(vos[i]);
		}
		return alTempRet; //alPK;
	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}
}
/**
 * 向数据库中插入一个VO对象。
 *
 * 创建日期：(2001-5-14)
 * @param generalH nc.vo.ic.ic201.SpecialHVO
 * @return java.lang.String  所插入VO对象的主键字符串。
 * @exception java.rmi.RemoteException 异常说明。
 */
private ArrayList insertBillsNoLock(SpecialBillVO[] vos)
	throws BusinessException {
	try {
		//非法的数据
		if (vos == null || vos.length == 0)
			throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000005")/*@res "非法的数据!"*/);
		for (int i = 0; i < vos.length; i++)
			if (vos[i] == null)
				throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000005")/*@res "非法的数据!"*/);
		String sOperatorID = null; //操作员ID,只需读第一个VO的操作员即可。
		if (vos[0].getHeaderValue("coperatorid") != null)
			sOperatorID = (String) vos[0].getHeaderValue("coperatorid");
		if (sOperatorID == null || sOperatorID.trim().length() == 0)
			throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000002")/*@res "非法的数据!没有操作员。"*/);

		//------ 执行新增 -------------
		SpecialHDMO dmo = new SpecialHDMO();
		ArrayList alTempRet = null;
		for (int i = 0; i < vos.length; i++) {
			//dmo.check(vos[i]);
				try {
					//执行新增
					alTempRet = dmo.insertBill(vos[i]);
				} catch (Exception e) {
					throw e;
				}
		}
		return alTempRet;//alPK;
	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}
}
/**
* 其他入/出库单中做写入
*
* 创建日期：(2001-5-16)
* @param specialH nc.vo.ic.ic221.SpecialHVO
* @return java.lang.String  所插入VO对象的主键字符串。
* @exception java.rmi.RemoteException 异常说明。
* 修改人：刘家清 修改时间：2008-5-29 下午02:06:36 修改原因：删除调整单无用函数．
*/
/*private ArrayList insertGeneralbills(
	GeneralBillVO[] IngeneralH,
	GeneralBillVO[] OutgeneralH,
	String sBillTypeCode,
	String sOldPK,
	String sCorpPK,
	String sUserID)
	throws BusinessException {

	nc.bs.ic.ic207.GeneralHBO bill207BO =null;
	nc.bs.ic.ic217.GeneralHBO bill217BO =null;
	try {
		ArrayList alReturnKeys= new ArrayList();
		ArrayList keys1= new ArrayList();
		ArrayList keys2= new ArrayList();

		//检查是否超出数量
		//如果没有错误，则得到一个当前的VO，含最新的数量、辅数量
		SpecialHDMO dmo= new SpecialHDMO();
		QryConditionVO qcvo= new nc.vo.ic.pub.bill.QryConditionVO();
		qcvo.setQryCond("cspecialhid='" + sOldPK + "'");
		ArrayList getVOs= dmo.queryBills(qcvo);
		if ((getVOs == null) || (getVOs.size() != 1)) {
			StringBuffer errormsg= new StringBuffer();
			errormsg.append(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000006")@res "未找到对应的原特殊单!");
			throw new nc.vo.pub.BusinessException(errormsg.toString());
			//return null;
		}
		SpecialBillVO[] OldSpecialH= new SpecialBillVO[1];
		OldSpecialH[0]= (SpecialBillVO) getVOs.get(0);

		UFDouble ufd0=new UFDouble(0);
		UFDouble ufdInNum= ufd0; //此次入主数量
		UFDouble ufdOutNum= ufd0; //此次出主数量
		UFDouble ufdAddedInNum= ufd0; //累计入
		UFDouble ufdAddedOutNum= ufd0; //累计出
		//表头表体VO
		SpecialBillHeaderVO sbhvoOld= (SpecialBillHeaderVO) OldSpecialH[0].getParentVO();
		SpecialBillItemVO[] sbivoOld=
			(SpecialBillItemVO[]) OldSpecialH[0].getChildrenVO();

		//对原单据中的每一行做检查
		if ((sBillTypeCode.equals(nc.vo.ic.pub.BillTypeConst.m_transfer))) {
			for (int oldi= 0; oldi < sbivoOld.length; oldi++) {
				ufdInNum= ufd0;
				ufdOutNum= ufd0;
				ufdAddedInNum= ufd0;
				ufdAddedOutNum= ufd0;
				if (null != IngeneralH) {
					GeneralBillItemVO[] gbivoIn= (GeneralBillItemVO[]) IngeneralH[0].getChildrenVO();
					for (int i= 0; i < gbivoIn.length; i++) {
						//判断是不是对应原单据中的一行
						if (isTheSame(gbivoIn[i], sbivoOld[oldi], sBillTypeCode)) {
							//得到入库的数量、辅数量
							ufdInNum=
								(gbivoIn[i].getAttributeValue("ninnum") != null
									? new UFDouble(gbivoIn[i].getAttributeValue("ninnum").toString())
									: ufd0);
							break;
						}
					}
				}
				if (null != OutgeneralH) {
					GeneralBillItemVO[] gbivoOut=
						(GeneralBillItemVO[]) OutgeneralH[0].getChildrenVO();
					for (int i= 0; i < gbivoOut.length; i++) {
						//判断是不是对应原单据中的一行
						if (isTheSame(gbivoOut[i], sbivoOld[oldi], sBillTypeCode)) {
							//得到出库的数量、辅数量
							ufdOutNum=
								(gbivoOut[i].getAttributeValue("noutnum") != null
									? new UFDouble(gbivoOut[i].getAttributeValue("noutnum").toString())
									: ufd0);
							break;
						}
					}
				}
				//得到原数量
				ufdAddedInNum=
					(sbivoOld[oldi].getAttributeValue("nadjustnum") != null
						? new UFDouble(sbivoOld[oldi].getAttributeValue("nadjustnum").toString())
						: ufd0);
				ufdAddedOutNum=
					(sbivoOld[oldi].getAttributeValue("nchecknum") != null
						? new UFDouble(sbivoOld[oldi].getAttributeValue("nchecknum").toString())
						: ufd0);
				//对本单据的数据进行修改
				sbivoOld[oldi].setAttributeValue("nadjustnum", ufdAddedInNum.add(ufdInNum));
				sbivoOld[oldi].setAttributeValue("nchecknum", ufdAddedOutNum.add(ufdOutNum));
				sbivoOld[oldi].setStatus(VOStatus.UPDATED);
				OldSpecialH[0].setChildrenVO(sbivoOld);
			}
			//对本单据进行签字
			if (null != IngeneralH) {
				sbhvoOld.setAttributeValue("vadjuster", sUserID);
			}
			if (null != OutgeneralH) {
				sbhvoOld.setAttributeValue("cauditorid", sUserID);
			}
		} else if (
			(sBillTypeCode.equals(nc.vo.ic.pub.BillTypeConst.m_assembly))
				|| (sBillTypeCode.equals(nc.vo.ic.pub.BillTypeConst.m_disassembly))
				|| (sBillTypeCode.equals(nc.vo.ic.pub.BillTypeConst.m_transform))) {
			//对本单据进行签字
			sbhvoOld.setAttributeValue("cauditorid", sUserID);
		} else if (sBillTypeCode.equals(nc.vo.ic.pub.BillTypeConst.m_check)) {
			//对本单据进行签字
			sbhvoOld.setAttributeValue("vadjuster", sUserID);
		}
		sbhvoOld.setStatus(VOStatus.UPDATED);
		OldSpecialH[0].setParentVO(sbhvoOld);
		//对其他入库,保存
		if (null != IngeneralH) {
			bill207BO = new nc.bs.ic.ic207.GeneralHBO();
			keys1= bill207BO.insertBillsNOLock(IngeneralH);
			alReturnKeys.add(keys1);
		}

		//对其他出库,保存
		if (null != OutgeneralH) {
			bill217BO = new nc.bs.ic.ic217.GeneralHBO();
			keys2= bill217BO.insertBillsNOLock(OutgeneralH);
			alReturnKeys.add(keys2);
		}

		//对本单据的数据进行保存
		//updateBillsNoLock(OldSpecialH);
//		修改人：刘家清 修改时间：2008-5-28 下午02:10:27 修改原因：使用新回写接口。
		String sWhIn = null, sWhOut = null; //in warehouse ,out warehouse
			//在途数量检查
			//dmo.checkOnWayNum(vos[i]);
			//超额调拨检查
			dmo.isAlreadyOutNum(OldSpecialH[0]);
			//检查两个仓库是否属于同一个库存组织
			sWhIn = OldSpecialH[0].getHeaderVO().getCinwarehouseid();
			sWhOut = OldSpecialH[0].getHeaderVO().getCoutwarehouseid();
			dmo.checkSameCalbody(sWhIn, sWhOut);
		if ((sBillTypeCode.equals(nc.vo.ic.pub.BillTypeConst.m_transfer))) 
			dmo.updateBill(OldSpecialH[0], new String[]{"vadjuster","cauditorid"}, new int[]{SmartFieldMeta.JAVATYPE_STRING,SmartFieldMeta.JAVATYPE_STRING}
			, new String[]{"nadjustnum","nchecknum"}, new int[]{SmartFieldMeta.JAVATYPE_UFDOUBLE,SmartFieldMeta.JAVATYPE_UFDOUBLE});
		else if (
				(sBillTypeCode.equals(nc.vo.ic.pub.BillTypeConst.m_assembly))
					|| (sBillTypeCode.equals(nc.vo.ic.pub.BillTypeConst.m_disassembly))
					|| (sBillTypeCode.equals(nc.vo.ic.pub.BillTypeConst.m_transform)))
			dmo.updateBill(OldSpecialH[0], new String[]{"cauditorid"}, new int[]{SmartFieldMeta.JAVATYPE_STRING}
			, null, null);
		else if (sBillTypeCode.equals(nc.vo.ic.pub.BillTypeConst.m_check)) 
			dmo.updateBill(OldSpecialH[0], new String[]{"vadjuster"}, new int[]{SmartFieldMeta.JAVATYPE_STRING}
			, null, null);
		
		return alReturnKeys;
	} catch (java.rmi.RemoteException ee) {
		if (ee.detail != null) {
			nc.vo.scm.pub.SCMEnv.out(ee.detail.getMessage());
			throw new BusinessException(ee.detail.getMessage());
		} else {
			throw new BusinessException(ee.getMessage());
		}
	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}
	
}*/
/**
 * 创建者：仲瑞庆
 * 功能：
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2001-8-30 18:43:22)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.util.ArrayList
 * @param gbvo nc.vo.ic.pub.bill.GeneralBillVO
 * @exception java.rmi.RemoteException 异常说明。
 *  修改人：刘家清 修改时间：2008-5-29 下午02:06:36 修改原因：删除调整单无用函数．
 */
/*public ArrayList insertGeneralbills(AggregatedValueObject vo)
	throws BusinessException {
	try {

		GeneralBillVO gbvo=(GeneralBillVO) vo;
		String sBillTypeCode = null, //单据类型编码
		sSourceBillTypeCode = null, //源单据类型编码
		sOldPK = null, //源单据PK
		sCorpPK = null, //公司编码
		sUserID = null; //用户ID

		sSourceBillTypeCode = (String) gbvo.getItemValue(0, "csourcetype");
		sBillTypeCode = (String) gbvo.getHeaderValue("cbilltypecode");
		sOldPK = (String) gbvo.getItemValue(0, "csourcebillhid");
		sCorpPK = (String) gbvo.getHeaderValue("pk_corp");
		sUserID = (String) gbvo.getHeaderValue("coperatorid");

		GeneralBillVO[] gbvos = new GeneralBillVO[1];
		gbvos[0] = gbvo;
		//业务锁准备
		PKLock boLock = PKLock.getInstance();
		String sOperatorID = sUserID; //操作员ID,只需读第一个VO的操作员即可。
		//if (vos[0].getHeaderValue("coperatorid") != null)
		//sOperatorID = (String) vos[0].getHeaderValue("coperatorid");
		if (sOperatorID == null || sOperatorID.trim().length() == 0)
			throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000002")@res "非法的数据!没有操作员。");

		boolean bIfCanDO = false; //是否可操作
		String saPK[] = null;

		ArrayList alReturn = new ArrayList();
		//加业务锁,传入所有的PK,当前操作员，不用表名。
		saPK = getAllPK(gbvo);
		//如果需加锁单据，才执行单据加锁。
		if (saPK != null && saPK.length > 0)
			bIfCanDO = boLock.acquireBatchLock(saPK, sOperatorID, "");
		else
			bIfCanDO = true;
		if (bIfCanDO) {
			try {
				//执行新增
				if (sBillTypeCode.trim().equals(nc.vo.ic.pub.BillTypeConst.m_otherIn)) {
					alReturn =
						insertGeneralbills(gbvos, null, sSourceBillTypeCode, sOldPK, sCorpPK, sUserID);
				} else
					if (sBillTypeCode.trim().equals(nc.vo.ic.pub.BillTypeConst.m_otherOut)) {
						alReturn =
							insertGeneralbills(null, gbvos, sSourceBillTypeCode, sOldPK, sCorpPK, sUserID);
					}
			} catch (Exception e) {
				throw e;
			} finally { //无论执行情况如何，都解锁。
				//如果需加锁单据，才执行源单据解锁
				if (saPK != null && saPK.length > 0)
					boLock.releaseBatchLock(saPK, sOperatorID, "");
			}
		} else
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000004")@res "正在进行相关操作，请稍后再试");

		return alReturn;
	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}

}*/
/**
 * 创建者：仲瑞庆
 * 功能：
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2001-7-18 下午 5:55)
 * 修改日期，修改人，修改原因，注释标志：
 * @return boolean
 * @param gbivo nc.vo.ic.pub.bill.GeneralBillVO
 * @param sbivo nc.vo.ic.pub.bill.SpecialBillVO
 */
protected boolean isTheSame(
	GeneralBillItemVO gbivo,
	SpecialBillItemVO sbivo,
	String sBillTypeCode) {
	if (gbivo.getCsourcebillbid() != null
		&& sbivo.getCspecialbid() != null
		&& gbivo.getCsourcebillbid().equals(sbivo.getCspecialbid())) {
		return true;
	}
	return false;
}
/**
 * 通过主键获得VO对象。test code
 *
 * 创建日期：(2001-5-14)
 * @return nc.vo.ic.ic201.SpecialHVO
 * @param key String
 * @exception java.rmi.RemoteException 异常说明。
 */
public ArrayList queryBills(QryConditionVO voQC) throws BusinessException {
	try {
		SpecialHDMO dmo = new SpecialHDMO();
		return dmo.queryBills(voQC);

	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}
}


/**
 * 向数据库中插入一组VO对象。返回为该组VO对象的所有PK二维表
 *
 * 创建日期：(2001-5-16)
 * @param specialH nc.vo.ic.ic221.SpecialHVO
 * @return java.lang.String  所插入VO对象的主键字符串。
 * @exception java.rmi.RemoteException 异常说明。
 */
public ArrayList queryGeneralbills(QryConditionVO voQC) throws BusinessException {

	try {
		GeneralBillDMO dmo= new GeneralBillDMO();
		return dmo.queryBills(voQC);
	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}
}
/**
 * 创建者：王乃军
 * 功能：查询iSel指定的数据
 * 参数：
 	iSel：0 存货
 				1 仓库
 * 返回：
 * 例外：
 * 日期：(2001-6-14 14:46:54)
 * 修改日期，修改人，修改原因，注释标志：
 * @return nc.vo.ic.pub.bill.InvVO
 * @param sWh java.lang.String
 * @param sInvID java.lang.String
 */
public Object queryInfo(Integer iSel, Object alQryCond)
	throws BusinessException {
	return super.queryInfo(iSel, alQryCond);
}
/**
 * 作者：余大英
 * 创建日期：(2001-8-30 13:32:39)
 * @return java.util.ArrayList
 * @param vo nc.vo.ic.pub.bill.GeneralBillVO
 * @exception java.rmi.RemoteException 异常说明。
 */
public ArrayList saveBill(SpecialBillVO vo)
	throws BusinessException {
	ArrayList alRes = null;

	String sHid = (String) vo.getParentVO().getAttributeValue("cspecialhid");
	//added by zhx for special billcode.
	String sBillCode = null;

	SpecialBillVO[] vos = new SpecialBillVO[1];
	vos[0] = vo;
	CheckDMO dmocheck=null;
	updateBillType4331Num(vo, false);
	try{
	if (null == sHid){
			if(vo.getParentVO().getAttributeValue("vbillcode")==null){

				dmocheck=new CheckDMO();
				sBillCode=dmocheck.setBillCode((nc.vo.scm.pub.IBillCode)vo);
			}
		try{
			alRes = insertBills(vos);
		}catch(Exception e){
			if(sBillCode!=null)
				dmocheck.returnBillCode((nc.vo.scm.pub.IBillCode)vo);
			throw e;
			}
	}
	else
		alRes = updateBills(vos);
	
	freshTs(vo);
	}catch (Exception e) {	
		GenMethod.throwBusiException(e);
	}
	
	return alRes;

}

//lxt 2013-07 gzcg
private void updateBillType4331Num(SpecialBillVO vo, boolean del) throws BusinessException{
	BaseDAO dao = new BaseDAO();
	String sHid = (String) vo.getParentVO().getAttributeValue("cspecialhid");
	Hashtable<String, UFDouble> updateDatas = new Hashtable<String, UFDouble>();
	if (null != sHid && !del){ // 更新
		for(int i=0;i<vo.getChildrenVO().length;i++){
			updateDatas.put(vo.getChildrenVO()[i].getAttributeValue("csourcebillbid").toString(), 
					new UFDouble(vo.getChildrenVO()[i].getAttributeValue("dshldtransnum").toString()));
		}
		try{
			StringBuffer sql = new StringBuffer();
			sql.append("select csourcebillbid, dshldtransnum from ic_special_b where cspecialhid='"+sHid+"'");
			Vector<Vector<Object>> billItems = (Vector<Vector<Object>>)dao.executeQuery(sql.toString(), new VectorProcessor());
			for(int i=0;i<billItems.size();i++){
				if (updateDatas.containsKey(billItems.get(i).get(0).toString())){
					UFDouble tmp = updateDatas.get(billItems.get(i).get(0).toString());
					tmp = tmp.sub(new UFDouble(billItems.get(i).get(1).toString()));
					updateDatas.put(billItems.get(i).get(0).toString(), tmp);
				}
			}
		} catch (Exception e) {	
			if(e instanceof BusinessException)
			    throw (BusinessException) e;
			else
			    throw new BusinessException("Caused by:",e);
		}
		
	} else if (null == sHid){ // 增加
		for(int i=0;i<vo.getChildrenVO().length;i++){
			updateDatas.put(vo.getChildrenVO()[i].getAttributeValue("csourcebillbid").toString(), 
					new UFDouble(vo.getChildrenVO()[i].getAttributeValue("dshldtransnum").toString()));
		}
	} else if (del){ // 删除
		for(int i=0;i<vo.getChildrenVO().length;i++){
			updateDatas.put(vo.getChildrenVO()[i].getAttributeValue("csourcebillbid").toString(), 
					new UFDouble(vo.getChildrenVO()[i].getAttributeValue("dshldtransnum").toString()).multiply(-1));
		}
	}
	
	
	PKLock boLock= PKLock.getInstance();
	boLock.addBatchDynamicLock(updateDatas.keySet().toArray(new String[]{}));
	{
		StringBuffer sql = new StringBuffer();
		sql.append("select csalereceiveid_bid, nnumber-nvl(to_number(vdef20),0) from so_salereceive_b ");
		sql.append(" where csalereceiveid_bid in (");
		for(String rowid : updateDatas.keySet()){
			sql.append("'"+rowid+"',");
		}
		sql.delete(sql.length()-1, sql.length());
		sql.append(")");
		
		Vector<Vector<Object>> sobillnums = (Vector<Vector<Object>>)dao.executeQuery(sql.toString(), new VectorProcessor());
		for(int i=0;i<sobillnums.size();i++){
			UFDouble remain = new UFDouble(sobillnums.get(i).get(1).toString());
			UFDouble newnum = updateDatas.get(sobillnums.get(i).get(0).toString());
			if (newnum.doubleValue()>remain.doubleValue())
				throw new BusinessException("总转库数量大于应发货数量。");
		}
	}
	
	
	for(String rowid : updateDatas.keySet()){
		StringBuffer sql = new StringBuffer();
		sql.append("update so_salereceive_b set vdef20=nvl(vdef20,0)+(");
		sql.append(updateDatas.get(rowid).toString());
		sql.append(") where csalereceiveid_bid='");
		sql.append(rowid);
		sql.append("'");
		
		dao.executeUpdate(sql.toString());
	}
}

/**
 * 作者：余大英
 * 创建日期：(2001-8-30 13:32:39)
 * @return java.util.ArrayList
 * @param vo nc.vo.ic.pub.bill.GeneralBillVO
 * @exception java.rmi.RemoteException 异常说明。
 */
public void saveOutBill(SpecialBillVO vo) throws BusinessException {

	try {
		SpecialBillVO[] vos= new SpecialBillVO[1];
		vos[0]= vo;
		//获得单据模板VO
		BillTempletVO btvo= findDefaultCardTempletData(vos[0]);
		//执行VO校验
		checkTransferBillVO(btvo, vos[0], "dshldtransnum", "nshldtransastnum");
		//保存特殊单VO
		insertBillsNoLock(vos);
	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}
	return;

}
/**
 * 用VO对象的属性值更新数据库。
 *
 * 创建日期：(2001-5-16)
 * @param specialH nc.vo.ic.ic221.SpecialHVO
 * @exception java.rmi.RemoteException 异常说明。
 */
private ArrayList updateBills(SpecialBillVO[] vos)
	throws BusinessException {
	try {
		//非法的数据
		if (vos == null || vos.length == 0)
			throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000005")/*@res "非法的数据!"*/);
		for (int i = 0; i < vos.length; i++)
			if (vos[i] == null)
				throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000005")/*@res "非法的数据!"*/);

		SpecialBillBOHelper.setUpdateBillInitDateTime(vos);
		ArrayList alTempRet = null;

		// ------ 执行修改 -------------
		SpecialHDMO dmo = new SpecialHDMO();
		GeneralBillDMO gbdmo=new GeneralBillDMO();
		RebuildDMO redmo = new RebuildDMO();

		String[] saBillPK = new String[1];
		ArrayList alBill = null;
		SpecialBillVO voBill = null;
		String sWhIn = null, sWhOut = null; //in warehouse ,out warehouse
		for (int j = 0; j < vos.length; j++) {
			saBillPK[0] = vos[j].getHeaderVO().getPrimaryKey();
			sWhIn = vos[j].getHeaderVO().getCinwarehouseid();
			sWhOut = vos[j].getHeaderVO().getCoutwarehouseid();
			alBill = redmo.getSBills(saBillPK);
			for (int i = 0; i < alBill.size(); i++) {
				voBill = (SpecialBillVO) alBill.get(i);
				//检查是否已做转入/转出
				dmo.checkAlreadyTransfer(voBill);
				//检查两个仓库是否属于同一个库存组织
				dmo.checkSameCalbody(sWhIn, sWhOut);
				//检查是否是独立的单据
				if (gbdmo.queryChildrenBillPK(voBill.getParentVO().getPrimaryKey().trim())
					!= null) {
					throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000007")/*@res "该单据存在对应的其他入/出库单，不可修改！"*/);
				}
			}
		}

		for (int i = 0; i < vos.length; i++) {
			//执行修改
			alTempRet = dmo.updateBill(vos[i]);
		}

		return alTempRet; //alPK;

	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}
}
/**
 * 用VO对象的属性值更新数据库。
 *
 * 创建日期：(2001-5-16)
 * @param specialH nc.vo.ic.ic221.SpecialHVO
 * @exception java.rmi.RemoteException 异常说明。
 */
/*public ArrayList updateBillsNoLock(SpecialBillVO[] vos)
	throws BusinessException {
	try {
		//非法的数据
		if (vos == null || vos.length == 0)
			throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000005")@res "非法的数据!");
		for (int i = 0; i < vos.length; i++)
			if (vos[i] == null)
				throw new Exception(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000005")@res "非法的数据!");

		ArrayList alTempRet = null;

		// ------ 执行修改 -------------
		SpecialHDMO dmo = new SpecialHDMO();
		String sWhIn = null, sWhOut = null; //in warehouse ,out warehouse
		for (int i = 0; i < vos.length; i++) {
			//在途数量检查
			//dmo.checkOnWayNum(vos[i]);
			//超额调拨检查
			dmo.isAlreadyOutNum(vos[i]);
			//检查两个仓库是否属于同一个库存组织
			sWhIn = vos[i].getHeaderVO().getCinwarehouseid();
			sWhOut = vos[i].getHeaderVO().getCoutwarehouseid();
			dmo.checkSameCalbody(sWhIn, sWhOut);
			//执行修改
			alTempRet = dmo.updateBillold(vos[i]);
		}

		return alTempRet; //alPK;

	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}
}*/

/**
 * 此处插入方法说明。
 * 功能：delete其他入/出库单
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2002-4-8 16:36:32)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.util.ArrayList
 * @param vos nc.vo.ic.pub.bill.GeneralBillVO[]
 * @exception nc.vo.pub.BusinessException 异常说明。
 * 余大英 2002-04-08 平台调用
 */
protected void deleteOtherInOut(GeneralBillVO vo)
	throws BusinessException {
	super.deleteOtherInOut(vo);
}

/**
* 校验其他入/出库单是否会造成转库单发生超额调拨及其额度控制
*
* 创建日期：(2001-5-16)
* @param specialH nc.vo.ic.ic221.SpecialHVO
* @return java.lang.String  所插入VO对象的主键字符串。
* @exception java.rmi.RemoteException 异常说明。
*/
public ArrayList isAllowOutNumtransfer(
	GeneralBillVO[] IngeneralH,
	GeneralBillVO[] OutgeneralH,
	String sBillTypeCode,
	String sOldPK,
	String sCorpPK,
	String sUserID)
	throws BusinessException {

	try {
		ArrayList alReturnKeys = new ArrayList();
		MiscDMO dmoMisc = new MiscDMO();

		//检查是否超出数量
		//如果没有错误，则得到一个当前的VO，含最新的数量、辅数量
		SpecialHDMO dmo = new SpecialHDMO();
		QryConditionVO qcvo = new nc.vo.ic.pub.bill.QryConditionVO();
		qcvo.setQryCond("cspecialhid='" + sOldPK + "'");
		ArrayList getVOs = dmo.queryBills(qcvo);
		if ((getVOs == null) || (getVOs.size() != 1)) {
			StringBuffer errormsg = new StringBuffer();
			errormsg.append(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000006")/*@res "未找到对应的原特殊单!"*/);
			throw new nc.vo.pub.BusinessException(errormsg.toString());
			//return null;
		}
		SpecialBillVO[] OldSpecialH = new SpecialBillVO[1];
		OldSpecialH[0] = (SpecialBillVO) getVOs.get(0);
		//取得是否允许超出
		String sIsBigSave = dmoMisc.getICParaString(sCorpPK, "IC008").trim();
		UFDouble ufdBigPermit = new UFDouble("1");
		if (sIsBigSave.equals("Y")) {
			//取得额度 0.xxx
			ufdBigPermit =
				dmoMisc.getICParaUFDouble(sCorpPK, "IC009").div(new UFDouble("100"));
		}
		UFDouble ufd0 = new UFDouble(0);
		UFDouble ufdInNum = ufd0; //此次入主数量
		UFDouble ufdOutNum = ufd0; //此次出主数量
		UFDouble ufdOldNum = ufd0; //原主数量
		UFDouble ufdExitOutNum = ufd0; //超出入主数量
		UFDouble ufdExitInNum = ufd0; //超出出主数量
		UFDouble ufdAddedInNum = ufd0; //累计入
		UFDouble ufdAddedOutNum = ufd0; //累计出
		//表头表体VO
		SpecialBillItemVO[] sbivoOld =
			(SpecialBillItemVO[]) OldSpecialH[0].getChildrenVO();

		//对原单据中的每一行做检查
		if ((sBillTypeCode.equals(nc.vo.ic.pub.BillTypeConst.m_transfer))) {

			for (int oldi = 0; oldi < sbivoOld.length; oldi++) {
				ufdInNum = ufd0;
				ufdOutNum = ufd0;
				ufdOldNum = ufd0;
				ufdExitInNum = ufd0;
				ufdExitOutNum = ufd0;
				ufdAddedInNum = ufd0;
				ufdAddedOutNum = ufd0;
				if (null != IngeneralH) {
					GeneralBillItemVO[] gbivoIn =
						(GeneralBillItemVO[]) IngeneralH[0].getChildrenVO();
					for (int i = 0; i < gbivoIn.length; i++) {
						//判断是不是对应原单据中的一行
						if (isTheSame(gbivoIn[i], sbivoOld[oldi], sBillTypeCode)) {
							//得到入库的数量、辅数量
							ufdInNum =
								(gbivoIn[i].getAttributeValue("ninnum") != null
									? new UFDouble(gbivoIn[i].getAttributeValue("ninnum").toString())
									: ufd0);
							break;
						}
					}
				}
				if (null != OutgeneralH) {
					GeneralBillItemVO[] gbivoOut =
						(GeneralBillItemVO[]) OutgeneralH[0].getChildrenVO();
					for (int i = 0; i < gbivoOut.length; i++) {
						//判断是不是对应原单据中的一行
						if (isTheSame(gbivoOut[i], sbivoOld[oldi], sBillTypeCode)) {
							//得到出库的数量、辅数量
							ufdOutNum =
								(gbivoOut[i].getAttributeValue("noutnum") != null
									? new UFDouble(gbivoOut[i].getAttributeValue("noutnum").toString())
									: ufd0);
							break;
						}
					}
				}
				//得到原数量
				if (sBillTypeCode.equals(nc.vo.ic.pub.BillTypeConst.m_check)) {
					//对盘点单
					ufdOldNum =
						(sbivoOld[oldi].getAttributeValue("nadjustnum") != null
							? new UFDouble(sbivoOld[oldi].getAttributeValue("nadjustnum").toString())
							: ufd0);
				} else {
					//对其他特殊单
					ufdOldNum =
						(sbivoOld[oldi].getAttributeValue("dshldtransnum") != null
							? new UFDouble(sbivoOld[oldi].getAttributeValue("dshldtransnum").toString())
							: ufd0);
				}
				ufdAddedInNum =
					(sbivoOld[oldi].getAttributeValue("nadjustnum") != null
						? new UFDouble(sbivoOld[oldi].getAttributeValue("nadjustnum").toString())
						: ufd0);
				ufdAddedOutNum =
					(sbivoOld[oldi].getAttributeValue("nchecknum") != null
						? new UFDouble(sbivoOld[oldi].getAttributeValue("nchecknum").toString())
						: ufd0);
				//得到超出入出数量
				ufdExitInNum = ufdOldNum.sub(ufdAddedInNum).sub(ufdInNum);
				ufdExitOutNum = ufdOldNum.sub(ufdAddedOutNum).sub(ufdOutNum);
				//超出吗？
				if ((ufdExitInNum.doubleValue() < 0) || (ufdExitOutNum.doubleValue() < 0)) {
					//超出，是否允许超出
					if (sIsBigSave.equals("Y")) {
						//允许
						//原数量不为零且超出额度？
						if ((ufdOldNum.doubleValue() != 0) //&& (ufdOldAstNum.doubleValue() != 0)
							&& (ufdBigPermit.doubleValue() >= -ufdExitInNum.div(ufdOldNum).doubleValue())
							&& (ufdBigPermit.doubleValue() >= -ufdExitOutNum.div(ufdOldNum).doubleValue())) {
							//没有
						} else {
							//超出，报异常
							ufdExitInNum = ufdExitInNum.multiply(-1);
							ufdExitOutNum = ufdExitOutNum.multiply(-1);
							//得到超出限额的值
							ufdExitInNum = ufdExitInNum.sub(ufdOldNum.multiply(ufdBigPermit));
							ufdExitOutNum = ufdExitOutNum.sub(ufdOldNum.multiply(ufdBigPermit));
							StringBuffer errormsg = new StringBuffer();
							errormsg
								.append(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000008")/*@res "数量超出!超额调拨!"*/)
								.append(
									nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000009")/*@res " 存货:"*/
										+ (sbivoOld[oldi].getAttributeValue("invname") == null
											? ""
											: sbivoOld[oldi].getAttributeValue("invname").toString()))
								.append(
									nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000010")/*@res " 辅计量:"*/
										+ (sbivoOld[oldi].getAttributeValue("castunitname") == null
											? ""
											: sbivoOld[oldi].getAttributeValue("castunitname").toString()))
								.append(
									nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000011")/*@res " 批次号:"*/
										+ (sbivoOld[oldi].getAttributeValue("vbatchcode") == null
											? ""
											: sbivoOld[oldi].getAttributeValue("vbatchcode").toString()))
								.append(
									nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000012")/*@res " 自由项:"*/
										+ (sbivoOld[oldi].getAttributeValue("vfree0") == null
											? ""
											: sbivoOld[oldi].getAttributeValue("vfree0").toString()))
								.append(
									(ufdExitInNum.doubleValue() > 0 ? nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000013")/*@res " 入库超出数量为:"*/ + ufdExitInNum.toString() : ""))
								.append(
									(ufdExitOutNum.doubleValue() > 0
										? nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000014")/*@res " 出库超出数量为:"*/ + ufdExitOutNum.toString()
										: ""));
							throw new nc.vo.pub.BusinessException(errormsg.toString());
						}
					} else {
						//超出，报异常
						ufdExitInNum = ufdExitInNum.multiply(-1);
						ufdExitOutNum = ufdExitOutNum.multiply(-1);
						StringBuffer errormsg = new StringBuffer();
						errormsg
							.append(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000008")/*@res "数量超出!超额调拨!"*/)
							.append(
								nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000009")/*@res " 存货:"*/
									+ (sbivoOld[oldi].getAttributeValue("invname") == null
										? ""
										: sbivoOld[oldi].getAttributeValue("invname").toString()))
							.append(
								nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000010")/*@res " 辅计量:"*/
									+ (sbivoOld[oldi].getAttributeValue("castunitname") == null
										? ""
										: sbivoOld[oldi].getAttributeValue("castunitname").toString()))
							.append(
								nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000011")/*@res " 批次号:"*/
									+ (sbivoOld[oldi].getAttributeValue("vbatchcode") == null
										? ""
										: sbivoOld[oldi].getAttributeValue("vbatchcode").toString()))
							.append(
								nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000012")/*@res " 自由项:"*/
									+ (sbivoOld[oldi].getAttributeValue("vfree0") == null
										? ""
										: sbivoOld[oldi].getAttributeValue("vfree0").toString()))
							.append(
								(ufdExitInNum.doubleValue() > 0 ? nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000013")/*@res " 入库超出数量为:"*/ + ufdExitInNum.toString() : ""))
							.append(
								(ufdExitOutNum.doubleValue() > 0
									? nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000014")/*@res " 出库超出数量为:"*/ + ufdExitOutNum.toString()
									: ""));
						throw new nc.vo.pub.BusinessException(errormsg.toString());
					}
				}
			}
		}

		return alReturnKeys;
	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}
}

/**
* 根据其他入/出库单中修改本单据签字保存
* 余大英 2002-04-08 平台调用
* 创建日期：(2001-5-16)
* @param specialH nc.vo.ic.ic221.SpecialHVO
* @return java.lang.String  所插入VO对象的主键字符串。
* @exception java.rmi.RemoteException 异常说明。
*/
public void reWriteSourceBill(Object ogvos,SpecialBillVO svo)
	throws BusinessException {
	if (ogvos == null
		|| svo == null
		|| svo.getChildrenVO() == null
		)
	return;
	GeneralBillVO[] gvos=(GeneralBillVO[])ogvos;
	if(gvos.length<1)
		return;

	String sGBillTypeCode = null;
	String sUserID = (String) gvos[0].getHeaderValue("coperatorid");
	Hashtable htSItem = new Hashtable();

	//表头表体VO
	SpecialBillHeaderVO sbhvoOld = (SpecialBillHeaderVO) svo.getParentVO();
	SpecialBillItemVO[] sbivoOld = (SpecialBillItemVO[]) svo.getChildrenVO();
	for (int i = 0; i < sbivoOld.length; i++) {
		String sbid = (String) sbivoOld[i].getCspecialbid();
		htSItem.put(sbid, sbivoOld[i]);

	}

	try {

		UFDouble ufd0 = new UFDouble(0);
		UFDouble ufdInNum = ufd0; //此次入主数量
		UFDouble ufdOutNum = ufd0; //此次出主数量
		UFDouble ufdAddedInNum = ufd0; //累计入
		UFDouble ufdAddedOutNum = ufd0; //累计出

		//循环其他入/出单据
		for (int gi = 0; gi < gvos.length; gi++) {
			sGBillTypeCode = (String) gvos[gi].getHeaderValue("cbilltypecode");

			ufdInNum = ufd0;
			ufdOutNum = ufd0;
			ufdAddedInNum = ufd0;
			ufdAddedOutNum = ufd0;

			GeneralBillItemVO[] gbivoIn = (GeneralBillItemVO[]) gvos[gi].getChildrenVO();
			//遍历普通单的每一行
			for (int i = 0; i < gbivoIn.length; i++) {
	            //获取来源单据行，转库单上的行
				String gbsourceid = gbivoIn[i].getCsourcebillbid();
				if (htSItem.containsKey(gbsourceid)) {
					SpecialBillItemVO sbvo = (SpecialBillItemVO) htSItem.get(gbsourceid);
					//如果转入，则修改转库单行上nadjustnum,累加本次入
					if (sGBillTypeCode != null
						&& sGBillTypeCode.trim().equals(nc.vo.ic.pub.BillTypeConst.m_otherIn)) {
						ufdAddedInNum =
							sbvo.getAttributeValue("nadjustnum") == null
								?ufd0:(UFDouble) sbvo.getAttributeValue("nadjustnum");
						ufdInNum =
							gbivoIn[i].getAttributeValue("ninnum")
								== null?ufd0:(UFDouble) gbivoIn[i].getAttributeValue("ninnum");
						sbvo.setAttributeValue("nadjustnum", ufdAddedInNum.add(ufdInNum));
					}
					//如果转出，则修改转库单行上nchecknum  ，累加本次出
					if (sGBillTypeCode != null
						&& sGBillTypeCode.trim().equals(nc.vo.ic.pub.BillTypeConst.m_otherOut)) {
						ufdAddedOutNum =
							sbvo.getAttributeValue("nchecknum") == null
								? ufd0:(UFDouble) sbvo.getAttributeValue("nchecknum");
						ufdOutNum =
							gbivoIn[i].getAttributeValue("noutnum")
								== null ?ufd0:(UFDouble) gbivoIn[i].getAttributeValue("noutnum");
						sbvo.setAttributeValue("nchecknum", ufdAddedOutNum.add(ufdOutNum));
					}
					sbvo.setStatus(VOStatus.UPDATED);
				}

			}
			
//			对本单据进行签字
			if (sGBillTypeCode != null
						&& sGBillTypeCode.trim().equals(nc.vo.ic.pub.BillTypeConst.m_otherIn))
				sbhvoOld.setAttributeValue("vadjuster", sUserID);

			if (sGBillTypeCode != null
						&& sGBillTypeCode.trim().equals(nc.vo.ic.pub.BillTypeConst.m_otherOut))
				sbhvoOld.setAttributeValue("cauditorid", sUserID);
		}
			


			sbhvoOld.setStatus(VOStatus.UPDATED);


			//CheckDMO aCheckControlParam = null;
			//boolean AlertFlag = false;
			//String AlertMsg = null;
			////对其他入库,保存
			//if (null != IngeneralH) {
				//nc.bs.ic.ic207.GeneralHHome home =
					//(nc.bs.ic.ic207.GeneralHHome) getBeanHome(nc.bs.ic.ic207.GeneralHHome.class,
						//"nc.bs.ic.ic207.GeneralHBO");
				//nc.bs.ic.ic207.GeneralH remote = home.create();
				//keys1 = remote.insertBillsNOLock(IngeneralH);
				//alReturnKeys.add(keys1);
				//remote.remove();
			//} else {
				////alReturnKeys.add(null);
			//}

			//AlertFlag = false;
			//AlertMsg = null;
			////对其他出库,保存
			//if (null != OutgeneralH) {
				//nc.bs.ic.ic217.GeneralHHome home =
					//(nc.bs.ic.ic217.GeneralHHome) getBeanHome(nc.bs.ic.ic217.GeneralHHome.class,
						//"nc.bs.ic.ic217.GeneralHBO");
				//nc.bs.ic.ic217.GeneralH remote = home.create();
				//keys2 = remote.insertBillsNOLock(OutgeneralH);
				//alReturnKeys.add(keys2);
				//remote.remove();
			//} else {
				////alReturnKeys.add(null);
			//}

			//对本单据的数据进行保存
			//updateBillsNoLock(new SpecialBillVO[]{svo});
//			修改人：刘家清 修改时间：2008-5-28 下午02:10:27 修改原因：使用新回写接口。
			
			SpecialHDMO dmo= new SpecialHDMO();
			String sWhIn = null, sWhOut = null; //in warehouse ,out warehouse
			//在途数量检查
			//dmo.checkOnWayNum(vos[i]);
			//超额调拨检查
			dmo.isAlreadyOutNum(svo);
			//检查两个仓库是否属于同一个库存组织
			sWhIn = svo.getHeaderVO().getCinwarehouseid();
			sWhOut = svo.getHeaderVO().getCoutwarehouseid();
			dmo.checkSameCalbody(sWhIn, sWhOut);
			dmo.updateBill(svo, new String[]{"vadjuster","cauditorid"}, new int[]{SmartFieldMeta.JAVATYPE_STRING,SmartFieldMeta.JAVATYPE_STRING}
			, new String[]{"nadjustnum","nchecknum"}, new int[]{SmartFieldMeta.JAVATYPE_UFDOUBLE,SmartFieldMeta.JAVATYPE_UFDOUBLE});
			/*if (sGBillTypeCode != null
					&& sGBillTypeCode.trim().equals(nc.vo.ic.pub.BillTypeConst.m_otherIn))
				dmo.updateBill(svo, new String[]{"vadjuster"}, new int[]{SmartFieldMeta.JAVATYPE_STRING}
				, new String[]{"nadjustnum"}, new int[]{SmartFieldMeta.JAVATYPE_UFDOUBLE});
			if (sGBillTypeCode != null
					&& sGBillTypeCode.trim().equals(nc.vo.ic.pub.BillTypeConst.m_otherOut))
				dmo.updateBill(svo, new String[]{"cauditorid"}, new int[]{SmartFieldMeta.JAVATYPE_STRING}
				, new String[]{"nchecknum"}, new int[]{SmartFieldMeta.JAVATYPE_UFDOUBLE});*/

			return ;//alReturnKeys;

	}catch (Exception e) {	
		if(e instanceof BusinessException)
		    throw (BusinessException) e;
		else
		    throw new BusinessException("Caused by:",e);
	}
}

/**
 * 创建者：仲瑞庆
 * 功能：保存单据
 * 参数：当前的单据VO，原来的单据Object (实际是个VO)
 * 返回：PK
 * 例外：
 * 日期：(2001-8-30 16:30:16)
 * 修改日期，修改人，修改原因，注释标志：
 * @param svoBill nc.vo.ic.pub.bill.SpecialBillVO
 * @exception java.rmi.RemoteException 异常说明。
 */
public ArrayList saveBill(SpecialBillVO voCur, Object voPre)
	throws BusinessException {
	//参数检查
	if (voCur == null || voCur.getHeaderVO() == null) {
		nc.vo.scm.pub.SCMEnv.out("param null ");
		return null;
	}
	//返回值
	ArrayList alRes = null;
	//单据PK
	String sBillID = (String) voCur.getHeaderVO().getPrimaryKey();
	//可以同时处理多个单据，这里只有一个
	SpecialBillVO[] voaBill = new SpecialBillVO[] { voCur };
	//没有单据PK表明是新增保存
	if (sBillID == null || sBillID.length() == 0)
		alRes = insertBills(voaBill);
	else //否则是修改保存
		alRes = updateBills(voaBill);

	try {
		freshTs(voCur);
	} catch (Exception e) {
		GenMethod.throwBusiException(e);
	}
	
	return alRes;
}

/**
 * 此处插入方法说明。
 * 功能：保存其他入/出库单
 * 参数：
 * 返回：
 * 例外：
 * 日期：(2002-4-8 16:36:32)
 * 修改日期，修改人，修改原因，注释标志：
 * @return java.util.ArrayList
 * @param vos nc.vo.ic.pub.bill.GeneralBillVO[]
 * @exception nc.vo.pub.BusinessException 异常说明。
 * 余大英 2002-04-08 平台调用
 */
public ArrayList saveOtherInOut(GeneralBillVO vo) throws BusinessException {
	if (vo == null)
		return null;

	ArrayList alKey = null;

	String sGBillTypeCode = (String) vo.getHeaderValue("cbilltypecode");
	nc.bs.pub.pf.PfUtilBO pfBO = null;
	try {
		String dbilldate = vo.getHeaderValue("dbilldate").toString();
		pfBO = new nc.bs.pub.pf.PfUtilBO();
		alKey = (ArrayList) pfBO.processAction("WRITE", sGBillTypeCode, dbilldate, null, vo, null);
	} catch (Exception e) {
		throw new BusinessException(e.getMessage());
	}
	return alKey;
}

/**
 * 作者：余大英
 * 创建日期：(2001-8-30 13:32:39)
 * @return java.util.ArrayList
 * @param vo nc.vo.ic.pub.bill.GeneralBillVO
 * @exception java.rmi.RemoteException 异常说明。
 */
public void saveOutBill(ArrayList alsvo, Integer status)
	throws BusinessException {
	try {
    if ((alsvo == null) || (alsvo.size() == 0)) {
    	throw new RemoteException("Remote Call", new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000015")/*@res "未能输入正确的VO。"*/));
    }
    SpecialBillVO[] svo = new SpecialBillVO[alsvo.size()];
    alsvo.toArray(svo);
    if (status.intValue() != 0)
    	throw new RemoteException(
    		"Remote Call",
    		new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000016")/*@res "目前库存系统不支持自动审核。"*/));
    nc.bs.ic.ic207.GeneralHBO bill207BO = null;
    nc.bs.ic.ic217.GeneralHBO bill217BO = null;
    try {
    	if (status.intValue() == 0) {
    		//不需要自动审核
    		//获得单据模板VO
    		BillTempletVO btvo = findDefaultCardTempletData(svo[0]);
    		//执行VO校验
    		for (int i = 0; i < svo.length; i++) {
    			checkTransferBillVO(btvo, svo[i], "dshldtransnum", "nshldtransastnum");
    		}
    		//保存特殊单VO
    		insertBillsNoLock(svo);
    	} else if (status.intValue() == 2) {
    		//需要自动审核，生成其他入/出单据，生成单据号，并签字保存

    		//nc.bs.ic.ic217.GeneralHHome home217 =
    			//(nc.bs.ic.ic217.GeneralHHome) getBeanHome(nc.bs.ic.ic217.GeneralHHome.class,
    				//"nc.bs.ic.ic217.GeneralHBO");
    		//remote217 = home217.create();
    		bill207BO = new nc.bs.ic.ic207.GeneralHBO();
    		bill217BO = new nc.bs.ic.ic217.GeneralHBO();
    		//nc.bs.ic.ic207.GeneralHHome home207 =
    			//(nc.bs.ic.ic207.GeneralHHome) getBeanHome(nc.bs.ic.ic207.GeneralHHome.class,
    				//"nc.bs.ic.ic207.GeneralHBO");
    		//remote207 = home207.create();

    		//nc.bs.ic.ic217.GeneralHBO g217bo= new nc.bs.ic.ic217.GeneralHBO();
    		//nc.bs.ic.ic207.GeneralHBO g207bo= new nc.bs.ic.ic207.GeneralHBO();
    		//获得新的单据号用
    		//nc.bs.pub.billcodemanage.BillcodeRuleHome homebrbo=
    		//(nc
    		//.bs
    		//.pub
    		//.billcodemanage
    		//.BillcodeRuleHome) getBeanHome(nc
    		//.bs
    		//.pub
    		//.billcodemanage
    		//.BillcodeRuleHome
    		//.class,
    		//"nc.bs.pub.billcodemanage.BillcodeRuleBO");
    		//nc.bs.pub.billcodemanage.BillcodeRule remotebrbo= homebrbo.create();
    		//nc.bs.pub.billcodemanage.BillcodeRuleBO brbo=
    		//new nc.bs.pub.billcodemanage.BillcodeRuleBO();
    		SpecialHDMO dmo = new SpecialHDMO();
    		//获得单据模板VO
    		BillTempletVO transferbtvo = findDefaultCardTempletData(svo[0]);
    		BillTempletVO otherinbtvo = new BillTempletVO();
    		BillTempletVO otheroutbtvo = new BillTempletVO();
    		for (int i = 0; i < svo.length; i++) {
    			//执行特殊单VO校验
    			checkTransferBillVO(transferbtvo, svo[i], "dshldtransnum", "nshldtransastnum");
    			//生成其他入/出库VO
    			GeneralBillVO[] gbvos = new GeneralBillVO[1];
    			gbvos[0] = changeFromSpecialVOtoGeneralVO(svo[i], InOutFlag.OUT);
    			//置入单据号
    			//nc.vo.pub.billcodemanage.BillCodeObjValueVO bcovo= getBillCodeObjVO(gbvos[0]);
    			//gbvos[0].setHeaderValue(
    			//"vbillcode",
    			//remotebrbo.getBillCode(
    			//((GeneralBillHeaderVO) gbvos[0].getHeaderVO()).getCbilltypecode(),
    			//((GeneralBillHeaderVO) gbvos[0].getHeaderVO()).getPk_corp(),
    			//null,
    			//bcovo));
    			//String temp= svo[i].getHeaderValue("vbillcode").toString().trim();
    			String temp = dmo.getOID(svo[i].getHeaderValue("pk_corp").toString());
    			temp =
    				temp.substring(0, svo[i].getHeaderValue("vbillcode").toString().length());
    			gbvos[0].setHeaderValue("vbillcode", temp);

    			//执行普通单VO校验
    			if (i == 0)
    				otheroutbtvo = findDefaultCardTempletData(gbvos[0]);
    			checkOtherOutBillVO(otheroutbtvo, gbvos[0], "noutnum", "noutassistnum");
    			//保存普通单VO
    			String sErrorMsg = checkOutBill(gbvos[0]);
    			if (sErrorMsg != null) {
    				sErrorMsg = "No." + i + "  bill vo find following error: " + sErrorMsg;
    				throw new RemoteException(sErrorMsg);
    			}
    			bill217BO.insertBillsNOLock(gbvos);
    			bill217BO.signBillWithNoLock(gbvos[0]);

    			gbvos[0] = changeFromSpecialVOtoGeneralVO(svo[i], InOutFlag.IN);
    			//置入单据号
    			//bcovo= getBillCodeObjVO(gbvos[0]);
    			//gbvos[0].setHeaderValue(
    			//"vbillcode",
    			//remotebrbo.getBillCode(
    			//((GeneralBillHeaderVO) gbvos[0].getHeaderVO()).getCbilltypecode(),
    			//((GeneralBillHeaderVO) gbvos[0].getHeaderVO()).getPk_corp(),
    			//null,
    			//bcovo));
    			//temp= svo[i].getHeaderValue("vbillcode").toString().trim();
    			//gbvos[0].setHeaderValue("vbillcode", "b" + temp.substring(1, temp.length()));
    			temp = dmo.getOID(svo[i].getHeaderValue("pk_corp").toString());
    			temp =
    				temp.substring(0, svo[i].getHeaderValue("vbillcode").toString().length());
    			gbvos[0].setHeaderValue("vbillcode", temp);
    			//执行普通单VO校验
    			if (i == 0)
    				otherinbtvo = findDefaultCardTempletData(gbvos[0]);
    			checkOtherInBillVO(otherinbtvo, gbvos[0], "ninnum", "ninassistnum");
    			//保存普通单VO
    			sErrorMsg = checkOutBill(gbvos[0]);
    			if (sErrorMsg != null) {
    				sErrorMsg = "No." + i + "  bill vo find following error: " + sErrorMsg;
    				throw new RemoteException(sErrorMsg);
    			}
    			bill207BO.insertBillsNOLock(gbvos);
    			bill207BO.signBillWithNoLock(gbvos[0]);
    		}
    		//保存特殊单VO
    		insertBillsNoLock(svo);
    	}
    } catch (ValidationException e) {
    	throw new RemoteException("Remote Call", new BusinessException(e.getHint()));
    } catch (Exception e) {
    	throw new nc.bs.pub.SystemException(
    		"Cannot get User Defined Params from MiddleWare Server!");
    }
    //finally{
    	//try{
    	//if(remote207!=null)
    		//remote207.remove();
    	//if(remote217!=null)
    		//remote217.remove();
    	//}catch(Exception e){
    		//nc.vo.scm.pub.SCMEnv.error(e);
    		//}

    	//}
    return;
  }
  catch (Exception e) {
    //日志异常
    nc.vo.scm.pub.SCMEnv.out(e);
    //库存组异常抛出规范
    throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
  }

}

/**
 * 作者：余大英
 * 创建日期：(2001-8-30 13:32:39)
 * @return java.util.ArrayList
 * @param vo nc.vo.ic.pub.bill.GeneralBillVO
 * @exception java.rmi.RemoteException 异常说明。
 */
public void saveOutBillold(SpecialBillVO[] svo, Integer status)
	throws BusinessException {
	try {
    if ((svo == null) || (svo.length == 0)) {
    	throw new RemoteException("Remote Call", new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000015")/*@res "未能输入正确的VO。"*/));
    }
    if (status.intValue() != 0)
    	throw new RemoteException("Remote Call", new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4008spec","UPP4008spec-000016")/*@res "目前库存系统不支持自动审核。"*/));
    nc.bs.ic.ic217.GeneralHBO bill217BO = null;
    nc.bs.ic.ic207.GeneralHBO bill207BO = null;
    try {
    	if (status.intValue() == 0) {
    		//不需要自动审核
    		//获得单据模板VO
    		BillTempletVO btvo= findDefaultCardTempletData(svo[0]);
    		//执行VO校验
    		for (int i= 0; i < svo.length; i++) {
    			checkTransferBillVO(btvo, svo[i], "dshldtransnum", "nshldtransastnum");
    		}
    		//保存特殊单VO
    		insertBillsNoLock(svo);
    	} else if (status.intValue() == 2) {
    		//需要自动审核，生成其他入/出单据，生成单据号，并签字保存

    		//nc.bs.ic.ic217.GeneralHHome home217=
    			//(nc.bs.ic.ic217.GeneralHHome) getBeanHome(nc.bs.ic.ic217.GeneralHHome.class,
    				//"nc.bs.ic.ic217.GeneralHBO");
    		//remote217= home217.create();

    		//nc.bs.ic.ic207.GeneralHHome home207=
    			//(nc.bs.ic.ic207.GeneralHHome) getBeanHome(nc.bs.ic.ic207.GeneralHHome.class,
    				//"nc.bs.ic.ic207.GeneralHBO");
    		//remote207= home207.create();
    		bill207BO = new nc.bs.ic.ic207.GeneralHBO();
    		bill217BO = new nc.bs.ic.ic217.GeneralHBO();
    		//nc.bs.ic.ic217.GeneralHBO g217bo= new nc.bs.ic.ic217.GeneralHBO();
    		//nc.bs.ic.ic207.GeneralHBO g207bo= new nc.bs.ic.ic207.GeneralHBO();
    		//获得新的单据号用
    		//nc.bs.pub.billcodemanage.BillcodeRuleHome homebrbo=
    		//(nc
    		//.bs
    		//.pub
    		//.billcodemanage
    		//.BillcodeRuleHome) getBeanHome(nc
    		//.bs
    		//.pub
    		//.billcodemanage
    		//.BillcodeRuleHome
    		//.class,
    		//"nc.bs.pub.billcodemanage.BillcodeRuleBO");
    		//nc.bs.pub.billcodemanage.BillcodeRule remotebrbo= homebrbo.create();
    		//nc.bs.pub.billcodemanage.BillcodeRuleBO brbo=
    		//new nc.bs.pub.billcodemanage.BillcodeRuleBO();
    		SpecialHDMO dmo= new SpecialHDMO();
    		//获得单据模板VO
    		BillTempletVO transferbtvo= findDefaultCardTempletData(svo[0]);
    		BillTempletVO otherinbtvo= new BillTempletVO();
    		BillTempletVO otheroutbtvo= new BillTempletVO();
    		for (int i= 0; i < svo.length; i++) {
    			//执行特殊单VO校验
    			checkTransferBillVO(transferbtvo, svo[i], "dshldtransnum", "nshldtransastnum");
    			//生成其他入/出库VO
    			GeneralBillVO[] gbvos= new GeneralBillVO[1];
    			gbvos[0]= changeFromSpecialVOtoGeneralVO(svo[i], InOutFlag.OUT);
    			//置入单据号
    			//nc.vo.pub.billcodemanage.BillCodeObjValueVO bcovo= getBillCodeObjVO(gbvos[0]);
    			//gbvos[0].setHeaderValue(
    			//"vbillcode",
    			//remotebrbo.getBillCode(
    			//((GeneralBillHeaderVO) gbvos[0].getHeaderVO()).getCbilltypecode(),
    			//((GeneralBillHeaderVO) gbvos[0].getHeaderVO()).getPk_corp(),
    			//null,
    			//bcovo));
    			//String temp= svo[i].getHeaderValue("vbillcode").toString().trim();
    			String temp= dmo.getOID(svo[i].getHeaderValue("pk_corp").toString());
    			temp= temp.substring(0, svo[i].getHeaderValue("vbillcode").toString().length());
    			gbvos[0].setHeaderValue("vbillcode", temp);

    			//执行普通单VO校验
    			if (i == 0)
    				otheroutbtvo= findDefaultCardTempletData(gbvos[0]);
    			checkOtherOutBillVO(otheroutbtvo, gbvos[0], "noutnum", "noutassistnum");
    			//保存普通单VO
    			String sErrorMsg= checkOutBill(gbvos[0]);
    			if (sErrorMsg != null) {
    				sErrorMsg= "No." + i + "  bill vo find following error: " + sErrorMsg;
    				throw new RemoteException(sErrorMsg);
    			}
    			bill217BO.insertBillsNOLock(gbvos);
    			bill217BO.signBillWithNoLock(gbvos[0]);

    			gbvos[0]= changeFromSpecialVOtoGeneralVO(svo[i], InOutFlag.IN);
    			//置入单据号
    			//bcovo= getBillCodeObjVO(gbvos[0]);
    			//gbvos[0].setHeaderValue(
    			//"vbillcode",
    			//remotebrbo.getBillCode(
    			//((GeneralBillHeaderVO) gbvos[0].getHeaderVO()).getCbilltypecode(),
    			//((GeneralBillHeaderVO) gbvos[0].getHeaderVO()).getPk_corp(),
    			//null,
    			//bcovo));
    			//temp= svo[i].getHeaderValue("vbillcode").toString().trim();
    			//gbvos[0].setHeaderValue("vbillcode", "b" + temp.substring(1, temp.length()));
    			temp= dmo.getOID(svo[i].getHeaderValue("pk_corp").toString());
    			temp= temp.substring(0, svo[i].getHeaderValue("vbillcode").toString().length());
    			gbvos[0].setHeaderValue("vbillcode", temp);
    			//执行普通单VO校验
    			if (i == 0)
    				otherinbtvo= findDefaultCardTempletData(gbvos[0]);
    			checkOtherInBillVO(otherinbtvo, gbvos[0], "ninnum", "ninassistnum");
    			//保存普通单VO
    			sErrorMsg= checkOutBill(gbvos[0]);
    			if (sErrorMsg != null) {
    				sErrorMsg= "No." + i + "  bill vo find following error: " + sErrorMsg;
    				throw new RemoteException(sErrorMsg);
    			}
    			bill207BO.insertBillsNOLock(gbvos);
    			bill207BO.signBillWithNoLock(gbvos[0]);
    		}
    		//保存特殊单VO
    		insertBillsNoLock(svo);
    	}
    } catch (ValidationException e) {
    	throw new RemoteException("Remote Call", new BusinessException(e.getHint()));
    } catch (Exception e) {
    	throw new nc.bs.pub.SystemException(
    		"Cannot get User Defined Params from MiddleWare Server!");
    }
    //finally{
    	//try{
    		//if(remote207!=null)
    			//remote207.remove();
    		//if(remote217!=null)
    			//remote217.remove();
    		//}catch(Exception e){nc.vo.scm.pub.SCMEnv.error(e);}

    	//}
    return;
  }
  catch (Exception e) {
    //日志异常
    nc.vo.scm.pub.SCMEnv.out(e);
    //库存组异常抛出规范
    throw nc.bs.ic.pub.GenMethod.handleException(e.getMessage(), e);
  }

}

/**
 * 创建人：刘家清 创建时间：2008-10-28 下午04:22:54 创建原因：根据出库数量来设置报价含税金额
 * @param billVO
 */
	public void fillNquotemnyByNoutnum(nc.vo.ic.pub.bill.GeneralBillVO billVO){
		
		if (null == billVO || null == billVO.getItemVOs() || 0 == billVO.getItemVOs().length)
			return;
		for(GeneralBillItemVO itemVO : billVO.getItemVOs()){
			if (null != itemVO.getNoutnum() && UFDouble.ZERO_DBL.compareTo(itemVO.getNoutnum()) != 0){
				itemVO
				.setAttributeValue(
						"nquoteunitnum",
						SmartVOUtilExt
								.mult(
										itemVO.getNoutnum(),
										itemVO
												.getAttributeValue("nquoteunitrate") == null ? new UFDouble(
												1.0)
												: (UFDouble) itemVO
														.getAttributeValue("nquoteunitrate")));
				itemVO
				.setAttributeValue(
						"nquotemny",
						SmartVOUtilExt
								.mult(
										(UFDouble) itemVO
												.getAttributeValue("nquoteunitnum"),
										(UFDouble) itemVO
												.getAttributeValue("nquoteprice")));
			}
		}
		
	}
}