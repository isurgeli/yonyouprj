/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
\***************************************************************/

package nc.vo.sc.order;

import nc.vo.pu.ic.IBillAction;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.VOStatus;
import nc.vo.pub.ValidationException;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.pub.IscmDefCheckVO;
import nc.vo.scm.pub.session.ClientLink;

/**
 * Order的聚合VO类。
 *
 * 创建日期：(2001-6-23)
 * @author：
 */
public class OrderForRef4FVO extends AggregatedValueObject implements IBillAction,IscmDefCheckVO{
  public boolean m_buhuo;
  private OrderHeaderVO header = null;
//  private OrderItemVO[] items = null;
  private OrderDdlbVO[] ddlbvos = null;
  // 时间戳标示，现在暂未使用：
  long currentTimestamp; // 当前时间戳
  long initialTimestamp; // 从数据库读入时获得的时间戳

    //单据动作(V5:ATP调整,要求传入)
    private String m_strBillAction = IBillAction.ACTION_NULL;
    
    private UFBoolean m_UserConfirmFlag = null;

    //v5.01,修改单据时判断单据号是否改变，以检查单据号是否重复, by lxd , created on 2006-12-27
    private OrderForRef4FVO m_voOld = null;

    //操作类型：1增加  2修改 参考类VOStatus
  private int     m_iStatus = VOStatus.UNCHANGED;
  
  private ClientLink m_clientLink = null;
  
 
    /**
     * 返回当前单据动作
     **/
    public String getBillAction(){
      return m_strBillAction;
    }
    /**
     * 设置当前单据动作
     **/
    public void setBillAction(String newVal){
      m_strBillAction = newVal;
    }
    
    public UFBoolean getUserConfirmFlag(){
      return m_UserConfirmFlag;
    }
    
    public void setUserConfirmFlag(UFBoolean b){
      m_UserConfirmFlag = b;
    }
/**
 * OrderVO 构造子注解。
 */
public OrderForRef4FVO() {
  super();
}
/**
 * <p>获得子表的VO数组。
 * <p>
 * 创建日期：(2001-6-23)
 * @return nc.vo.pub.CircularlyAccessibleValueObject[]
 */
public CircularlyAccessibleValueObject[] getChildrenVO() {

  return ddlbvos;
}
/**
 * <p>获得母表的VO。
 * <p>
 * 创建日期：(2001-6-23)
 * @return nc.vo.pub.CircularlyAccessibleValueObject
 */
public CircularlyAccessibleValueObject getParentVO() {

  return header;
}

/**
 * <p>设置母表的VO。
 * <p>
 * 创建日期：(2001-6-23)
 * @param parent nc.vo.pub.CircularlyAccessibleValueObject
 */
public void setParentVO(CircularlyAccessibleValueObject parent) {

  header = (OrderHeaderVO) parent;
}
/**
 * <p>设置子表的VO数组。
 * <p>
 * 创建日期：(2001-6-23)
 * @param children nc.vo.pub.CircularlyAccessibleValueObject[]
 */
public void setChildrenVO(CircularlyAccessibleValueObject[] children) {

	ddlbvos = (OrderDdlbVO[]) children;
}

/**
 * 此处插入方法说明。
 * 创建日期：(2002-1-18 8:36:14)
 * @param pk_corp java.lang.String
 */
public void setPk_corp(String pk_corp) {

  if (header == null || ddlbvos == null)
    return;
  header.setPk_corp(pk_corp);
  for (int i = 0; i < ddlbvos.length; i++)
	  ddlbvos[i].setPk_corp(pk_corp);
}

/**
 * 验证对象各属性之间的数据逻辑正确性。
 *
 * 创建日期：(2001-2-15 11:47:35)
 * @exception nc.vo.pub.ValidationException 如果验证失败，抛出
 *     ValidationException，对错误进行解释。
 */
public void validate() throws ValidationException {

  getParentVO().validate();

  int rowindex = 0;
  try {
    for (int i = 0; i < getChildrenVO().length; i++) {
      rowindex = i+1;
      if (getChildrenVO()[i].getStatus() != nc.vo.pub.VOStatus.DELETED)
        getChildrenVO()[i].validate();
    }
  }
  catch (ValidationException e) {
    throw new nc.vo.pub.ValidationException(nc.vo.ml.NCLangRes4VoTransl.getNCLangRes().getStrByID("40120003","UPP40120003-000005",null,new String[]{""+ rowindex,e.getMessage()})/*@res "第{0}行{1}"*/);
  }
}

/**
 * 获取修改前旧VO
 */
public OrderForRef4FVO getM_voOld() {
  return m_voOld;
}
/**
 * 设置修改前旧VO
 */
public void setM_voOld(OrderForRef4FVO old) {
  m_voOld = old;
}
/**
 * 功能描述：得到该单据的操作状态
 * 输入参数：无
 * 返回值：　int   单据状态
 * 异常处理：无
 * 作者：lxd
 * 日期：2007-01-10
 */
public int getStatus() {
  return m_iStatus;
}

/*
 * 作者：lxd
 * 功能：设置该单据的操作状态，此状态非常重要，不可随意更改
 * 参数：int status      新状态
 * 返回：无
 * 例外：无
 * 日期：2007-01-10
 */
public void setStatus(int status) {

  m_iStatus = status;
}

/**
 * 父类方法重写
 * 
 * @see nc.vo.scm.pub.IscmDefCheckVO#getBodyDefValues(int)
 */
  public Object[] getBodyDefValues(int iserial) {
    if (getChildrenVO() == null) {
      return null;
    }
    Object[] oaRet = new Object[getChildrenVO().length];
    for (int i = 0; i < oaRet.length; i++) {
      oaRet[i] = getChildrenVO()[i].getAttributeValue("vdef" + iserial);
    }
    return oaRet;
  }

  /**
   * 父类方法重写
   * 
   * @see nc.vo.scm.pub.IscmDefCheckVO#getCbilltypedef()
   */
  public String getCbilltypedef() {
    return ScmConst.SC_Order;
  }

  /**
   * 父类方法重写
   * 
   * @see nc.vo.scm.pub.IscmDefCheckVO#getHeadDefValue(int)
   */
  public Object getHeadDefValue(int iserial) {
    if (getParentVO() == null) {
      return null;
    }
    return getParentVO().getAttributeValue("vdef" + iserial);
  }

  public String getPk_corp() {
    if (header != null)
      return header.getPk_corp();
    else
      return null;
  }
  public ClientLink getClientLink() {
    return m_clientLink;
  }
  public void setClientLink(ClientLink link) {
    m_clientLink = link;
  }
  public boolean isBuhuo() {
    return m_buhuo;
  }
  public void setBuhuo(boolean m_isbuhuo) {
    this.m_buhuo = m_isbuhuo;
  }
public OrderDdlbVO[] getDdlbvos() {
	return ddlbvos;
}
public void setDdlbvos(OrderDdlbVO[] ddlbvos) {
	this.ddlbvos = ddlbvos;
}

}