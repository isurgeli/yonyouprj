/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

package nc.bs.sc.order;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;

import nc.bs.framework.common.NCLocator;
import nc.bs.pub.para.SysInitDMO;
import nc.bs.sc.pub.BsScTool;
import nc.bs.sc.pub.PublicDMO;
import nc.bs.scm.datapower.ScmDps;
import nc.bs.scm.ic.freeitem.FreeItemDMO;
import nc.bs.scminter.service.InterServBO;
import nc.bs.sm.createcorp.CreatecorpDMO;
import nc.bs.uap.lock.PKLock;
import nc.itf.ct.service.ICtToPo_BackToCt;
import nc.itf.pp.ask.IAsk;
import nc.itf.pu.inter.IPuToSc_PraybillBO;
import nc.itf.pu.inter.IPuToSc_PraybillDMO;
import nc.itf.pu.pub.IGetSysBillCode;
import nc.itf.sc.IOrder;
import nc.itf.scm.inter.IArapCodeValid;
import nc.itf.scm.pub.bill.IScm;
import nc.itf.scm.to.service.IOuter;
import nc.itf.so.service.ISOToPUTO_BillConvertDMO;
import nc.vo.ic.pub.BillTypeConst;
import nc.vo.mm.pub.pub1030.PickmHeaderVO;
import nc.vo.mm.pub.pub1030.PickmVO;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.ProductCode;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDouble;
import nc.vo.sc.order.NewPraybillItemVO;
import nc.vo.sc.order.OrderDdlbVO;
import nc.vo.sc.order.OrderHeaderVO;
import nc.vo.sc.order.OrderItemVO;
import nc.vo.sc.order.OrderVO;
import nc.vo.sc.pub.BD_ConvertVO;
import nc.vo.sc.pub.RetScVrmAndParaPriceVO;
import nc.vo.sc.pub.SCPubVO;
import nc.vo.sc.pub.ScUtils;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.ctpo.ParaPoToCtRewriteVO;
import nc.vo.scm.pu.BillStatus;
import nc.vo.scm.pu.PuPubVO;
import nc.vo.scm.pub.SCMEnv;
import nc.vo.scm.pub.session.ClientLink;
import nc.vo.scminter.InterRegister;


/**
 * Order的BO类
 *
 * 创建日期：(2001-6-23)
 *
 * @author：
 */
public class OrderImpl implements IOrder, IArapCodeValid {
    /**
     * OrderBO 构造子注解。
     */
    public OrderImpl() {
        super();
    }
    /**
     * 通过主键获得VO对象。
     *
     * 创建日期：(2001-6-23)
     *
     * @return nc.vo.sc.order.OrderVO
     * @param key
     *            String
     * @exception java.rmi.RemoteException
     *                异常说明。
     */
    public OrderVO findByPrimaryKeyFroOrder(String key) throws BusinessException  {

        OrderVO order = null;
        try {
            OrderDMO dmo = new OrderDMO();
            order = dmo.findByPrimaryKey(key);

        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
        return order;
    }

    /**
     * 作者：袁野
     * 功能：判断请购单是否有相应后续委外订单
     * 参数：String[]  请购单行数组
     * 返回：UFBoolean[] 注：true表示请购单行存在后续单据，false表示不存在
     * 例外：
     * 日期：2005-09-05 10:47:32
     * 异常：BusinessException 
     * 修改日期，修改人，修改原因，注释标志：
     */

    public UFBoolean[] queryIfExecPray(String[] aStrAry_PrayBillRowID) throws BusinessException  {
        UFBoolean[] lUFBAry_Return = null;
        try {
            OrderDMO dmo = new OrderDMO();
            lUFBAry_Return = dmo.queryIfExecPray(aStrAry_PrayBillRowID);

        } catch (Exception e) {
            
          PublicDMO.throwBusinessException(e);
        }
        return lUFBAry_Return;
    }

    /**
     * 根据主键在数据库中删除一个VO对象。
     *
     * 创建日期：(2001-6-23)
     *
     * @param key
     *            String
     * @exception BusinessException 
     *                异常说明。
     */
    private void delete(OrderVO vo) throws BusinessException  {

        try {
            OrderDMO dmo = new OrderDMO();
            dmo.delete(vo);
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
    }

    /**
     * 订单审批的业务动作（普通业务：生成未审批的备料计划）
     *
     * 创建日期：(2001-6-23)
     *
     * @param key
     *            String
     * @exception BusinessException 
     *                异常说明。
     */
    private void approve(OrderVO vo) throws BusinessException  {
        boolean bCanOper = false; //是否可操作
        PKLock  m_boLock = null;
        String corderid = null;
        String coperatorid = null;

        try {
            corderid = vo.getParentVO().getPrimaryKey();
            coperatorid = ((OrderHeaderVO) vo.getParentVO()).getCcuroperator();
            if (coperatorid == null || coperatorid.trim().equals(""))
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000048")/*@res "数据非法:没有操作员"*/);

            //加锁
            m_boLock = PKLock.getInstance();
            String cbiztype = ((OrderHeaderVO) vo.getParentVO()).getCbiztype();

            bCanOper = m_boLock.acquireLock(corderid, coperatorid, nc.bs.sc.pub.PublicDMO.getDsName());
            if (bCanOper) {
                //是否已审核（在DMO中判断，保证checkPass中设置审核标志之前判断能否审核）
                OrderDMO dmo = new OrderDMO();

                //审核动作（生成备料计划）

                //判断生产制造是否启用
                CreatecorpDMO pubDMO = new CreatecorpDMO();
                String pk_corp = ((OrderHeaderVO) vo.getParentVO()).getPk_corp();
                boolean haveUsed = pubDMO.isEnabled(pk_corp, "MO");
                if (!haveUsed) {
                    return;
                }

                //判断业务类型，普通业务则生成备料计划
                String verifyRule = dmo.getVerifyRule(cbiztype);
                if (verifyRule != null && verifyRule.trim().equalsIgnoreCase("Y")) {
                    //将订单VO转换为备料计划VO
                    vo = findByPrimaryKeyFroOrder(vo.getParentVO().getPrimaryKey());

                    OrderItemVO[] itemVOs = (OrderItemVO[]) vo.getChildrenVO();
                    int num = itemVOs.length;
                    PickmVO pickmVO = new PickmVO();
                    PickmHeaderVO[] pickmHeaderVOs = getPickmHeaderVOs(vo);
                    //
                    //                    PickmBO pickm = new nc.bs.mo.mo2010.PickmBO();
                    Object objInstance = null;
                    InterServBO interServBo = new InterServBO();
                    //try {
                    objInstance = interServBo.getInterInstance(ProductCode.PROD_MM, InterRegister.MM0007);
                    // } catch (Exception e) {
                    // SCMEnv.out("调用生产制造接口时出现异常");
                    // SCMEnv.out(e);
                    //}
                    for (int i = 0; i < num; i++) {
                        pickmVO = new PickmVO();
                        pickmVO.setParentVO(pickmHeaderVOs[i]);
                        //                      pickm.savePickm(pickmVO);
                        interServBo.getInterResultByInstance(ProductCode.PROD_MM, InterRegister.MM0007, objInstance, InterRegister.MM0007_savePickm, new Object[] { pk_corp });
                    }
                }
            } else
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPPSCMCommon-000316")/*@res "正在进行相关操作，请稍后再试"*/);
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        } finally {
            try {
                if (m_boLock != null && bCanOper) {
                    //对单据解锁
                    m_boLock.releaseLock(corderid, coperatorid, nc.bs.sc.pub.PublicDMO.getDsName());
                }
            } catch (Exception e) {
              PublicDMO.throwBusinessException(e);
            }
        }
    }

    /**
     * 作废单据
     *
     * 创建日期：(2001-6-23)
     *
     * @param order
     *            nc.vo.sc.order.OrderVO
     * @exception BusinessException 
     *                异常说明。
     */
    private void discardBill(String key, String coperatorid) throws BusinessException  {
      PKLock m_boLock = null;
        boolean bCanOper = false; //是否可操作

        try {
            if (coperatorid == null || coperatorid.trim().equals(""))
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000048")/*@res "数据非法:没有操作员"*/);

            //加业务锁
            m_boLock = PKLock.getInstance();
            bCanOper = m_boLock.acquireLock(key, coperatorid, nc.bs.sc.pub.PublicDMO.getDsName());
            //nc.bs.pr.pray.PraybillBO pray = new nc.bs.pr.pray.PraybillBO();
            if (bCanOper) {

                //是否可作废（已审核?）
                OrderDMO dmo = new OrderDMO();
                String status = dmo.getOrderState(null, key);
                if (status == null || status.equals(BillStatus.DELETED.toString()))
                    throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000049")/*@res "该单据已被作废"*/);
                if (status.equals(BillStatus.AUDITED.toString()))
                    throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000050")/*@res "该单据已审核，无法作废"*/);
                if (status.equals(BillStatus.AUDITING.toString()))
                    throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000051")/*@res "该单据正在审核中，无法作废"*/);

                //回写请购单订货数量
                OrderVO orderVO = dmo.findByPrimaryKey(key);
                OrderItemVO[] itemVO = (OrderItemVO[]) orderVO.getChildrenVO();
                int num = itemVO.length;

                //设置status 2005-02-25 for hf
                for (int i = 0; i < num; i++) {
                    itemVO[i].setStatus(nc.vo.pub.VOStatus.DELETED);
                }

                Vector lvec_ParVO = new Vector();
                nc.vo.scm.pu.ParaVO21WriteNumTo20[] l_aryParVO;

                for (int i = 0; i < num; i++) {
                    String upbill_bid = itemVO[i].getCupsourcebillrowid();
                    if (upbill_bid == null || upbill_bid.trim().equals(""))
                        continue;
                    UFDouble nOldNum = itemVO[i].getNoldnum();
                    if (nOldNum == null)
                        nOldNum = new UFDouble(0);
                    UFDouble nNewNum = new UFDouble(0);
                    //pray.updateAccumulateNum(upbill_bid, nOldNum, nNewNum,
                    // ((OrderHeaderVO)orderVO.getParentVO()).getPk_corp());
                    nc.vo.scm.pu.ParaVO21WriteNumTo20 l_ParVOTemp = new nc.vo.scm.pu.ParaVO21WriteNumTo20();
                    l_ParVOTemp.setRowbid(upbill_bid);
                    l_ParVOTemp.setNumNew(nNewNum);
                    l_ParVOTemp.setNumOld(nOldNum);
                    l_ParVOTemp.setPkCorp(((OrderHeaderVO) orderVO.getParentVO()).getPk_corp());
                    lvec_ParVO.addElement(l_ParVOTemp);
                }

                if (lvec_ParVO.size() > 0) {
                    l_aryParVO = new nc.vo.scm.pu.ParaVO21WriteNumTo20[lvec_ParVO.size()];
                    lvec_ParVO.copyInto(l_aryParVO);
//                    Object obj = new InterServBO().getInterInstance(ProductCode.PROD_PO, InterRegister.PU0151);
//                    if (obj != null) {
//                        ((IPuToSc_PraybillBO) obj).updateAccumNumFrmSc(l_aryParVO);
//                    }
                    IPuToSc_PraybillBO pray = (IPuToSc_PraybillBO) NCLocator.getInstance().lookup(IPuToSc_PraybillBO.class.getName());
                    pray.updateAccumNumFrmSc(l_aryParVO);
                }
                //pray.updateAccumNumFrmSc(l_aryParVO);
                //

                //          回写合同
                Vector lvec_CTParVO = new Vector();
                ParaPoToCtRewriteVO[] l_aryCTParVO;
              //回写合同时务必给当前操作员赋值，否则合同加锁会失败，回写失败
              String sOperatorId = ((OrderHeaderVO) orderVO.getParentVO()).getCoperator();

                for (int i = 0; i < num; i++) {
                    String upbill_type = itemVO[i].getCupsourcebilltype();
                    String lStr_ContractRowId = itemVO[i].getCcontractrowid();
                    if (upbill_type != null && upbill_type.length() > 0 && (upbill_type.equals(BillTypeConst.CT_BEFOREDATE) || upbill_type.equals(BillTypeConst.CT_ORDINARY))) {
                        String upbill_bid = itemVO[i].getCupsourcebillrowid();
                        if (upbill_bid == null || upbill_bid.trim().equals(""))
                            continue;
                        UFDouble nOldNum = itemVO[i].getNoldnum();
                        UFDouble nOldsummny = itemVO[i].getNsummny();

                        if (nOldNum == null)
                            nOldNum = new UFDouble(0);

                        if (nOldsummny == null)
                            nOldsummny = new UFDouble(0);

                        UFDouble nNewNum = new UFDouble(0);
                        UFDouble nNewsummny = new UFDouble(0);

                        ParaPoToCtRewriteVO l_CTParVOTemp = new ParaPoToCtRewriteVO();
                        //                          l_ParVOTemp.setFirstTime(new UFBoolean(true)) ;
                        l_CTParVOTemp.setCContractRowID(upbill_bid);
                        l_CTParVOTemp.setDNum(nNewNum.sub(nOldNum));
                        l_CTParVOTemp.setDSummny(nNewsummny.sub(nOldsummny));
                        l_CTParVOTemp.setOperatorID(sOperatorId);
                        lvec_CTParVO.addElement(l_CTParVOTemp);
                    } else {//关联合同时的回写
                        if (lStr_ContractRowId != null && lStr_ContractRowId.length() > 0) {
                            UFDouble nOldNum = itemVO[i].getNoldnum();
                            UFDouble nOldsummny = itemVO[i].getNsummny();

                            if (nOldNum == null)
                                nOldNum = new UFDouble(0);

                            if (nOldsummny == null)
                                nOldsummny = new UFDouble(0);

                            UFDouble nNewNum = new UFDouble(0);
                            UFDouble nNewsummny = new UFDouble(0);

                            ParaPoToCtRewriteVO l_CTParVOTemp = new ParaPoToCtRewriteVO();
                            //                      l_ParVOTemp.setFirstTime(new UFBoolean(true)) ;
                            l_CTParVOTemp.setCContractRowID(lStr_ContractRowId);
                            l_CTParVOTemp.setDNum(nNewNum.sub(nOldNum));
                            l_CTParVOTemp.setDSummny(nNewsummny.sub(nOldsummny));
                            l_CTParVOTemp.setOperatorID(sOperatorId);
                            lvec_CTParVO.addElement(l_CTParVOTemp);
                        }
                    }

                }

                if (lvec_CTParVO.size() > 0) {
                    l_aryCTParVO = new ParaPoToCtRewriteVO[lvec_CTParVO.size()];
                    lvec_CTParVO.copyInto(l_aryCTParVO);
//                    Object obj = new InterServBO().getInterInstance(ProductCode.PROD_CT, InterRegister.CT0001);
//                    if (obj != null) {
//                        ((ICtToPo_BackToCt) obj).writeBackAccuOrdData(l_aryCTParVO);
//
//                    }
                    ICtToPo_BackToCt ct = (ICtToPo_BackToCt) NCLocator.getInstance().lookup(ICtToPo_BackToCt.class.getName());
                    ct.writeBackAccuOrdData(l_aryCTParVO);
                    //purbacktoctbo.writeBackAccuOrdData(l_aryCTParVO);
                }

                //          回写2005-02-23

                //回写销售定单
                updateXSDDNum(orderVO);

                //回写调拨定单
                updateDBDDNum(orderVO);

                //作废操作
                dmo.discardBill(key);
            } else
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPPSCMCommon-000316")/*@res "正在进行相关操作，请稍后再试"*/);

        } catch (Exception e) {
            
          PublicDMO.throwBusinessException(e);
        } finally {
            try {
                if (m_boLock != null && bCanOper) {
                    //对单据解锁
                    m_boLock.releaseLock(key, coperatorid, nc.bs.sc.pub.PublicDMO.getDsName());
                }
            } catch (Exception e) {
              PublicDMO.throwBusinessException(e);
            }
        }
    }

    /**
     * 作废单据
     *
     * 创建日期：(2001-6-23)
     *
     * @param order
     *            nc.vo.sc.order.OrderVO
     * @exception BusinessException 
     *                异常说明。
     */
    public void discardBill(OrderVO vo) throws BusinessException  {

        
        String key = ((OrderHeaderVO) vo.getParentVO()).getPrimaryKey();
      //回写合同时务必给当前操作员赋值，否则合同加锁会失败，回写失败
        String sOperatorId = ((OrderHeaderVO) vo.getParentVO()).getCoperator();

        
       
        
        try {

            //nc.bs.pr.pray.PraybillBO pray = new nc.bs.pr.pray.PraybillBO();
            //PurBackToCtBO purbacktoctbo = new PurBackToCtBO();

            ////是否可作废（已审核?）
            OrderDMO dmo = new OrderDMO();
            //String status = dmo.getOrderState(null, key);
            //if (status == null || status.equals("1"))
            //throw new BusinessException("该单据已被作废！");
            //if (status.equals("3"))
            //throw new BusinessException("该单据已审核，无法作废！");
            //if (status.equals("2"))
            //throw new BusinessException("该单据正在审核中，无法作废！");

            OrderVO orderVO = dmo.findByPrimaryKey(key);
            OrderItemVO[] itemVO = (OrderItemVO[]) orderVO.getChildrenVO();
            int num = itemVO.length;

            //          回写请购单订货数量

            //设置status 2005-02-25 for hf
            for (int i = 0; i < num; i++) {
                itemVO[i].setStatus(nc.vo.pub.VOStatus.DELETED);
            }

            //GC
            OrderDdlbVO []ddlbVO = orderVO.getDdlbvos();
            int num2 = ddlbVO.length;
            for (int i = 0; i < num2; i++) {
            	ddlbVO[i].setStatus(nc.vo.pub.VOStatus.DELETED);
			}
            //GC-END
            Vector lvec_ParVO = new Vector();
            nc.vo.scm.pu.ParaVO21WriteNumTo20[] l_aryParVO;

            for (int i = 0; i < num; i++) {
                String upbill_type = itemVO[i].getCupsourcebilltype();
                if (upbill_type != null && upbill_type.length() > 0) {
                    if (upbill_type.equals("20")) {
                        String upbill_bid = itemVO[i].getCupsourcebillrowid();
                        if (upbill_bid == null || upbill_bid.trim().equals(""))
                            continue;
                        UFDouble nOldNum = itemVO[i].getNoldnum();
                        if (nOldNum == null)
                            nOldNum = new UFDouble(0);
                        UFDouble nNewNum = new UFDouble(0);
                        //pray.updateAccumulateNum(upbill_bid, nOldNum, nNewNum,
                        // ((OrderHeaderVO)orderVO.getParentVO()).getPk_corp());
                        nc.vo.scm.pu.ParaVO21WriteNumTo20 l_ParVOTemp = new nc.vo.scm.pu.ParaVO21WriteNumTo20();
                        l_ParVOTemp.setRowbid(upbill_bid);
                        l_ParVOTemp.setNumNew(nNewNum);
                        l_ParVOTemp.setNumOld(nOldNum);
                        l_ParVOTemp.setPkCorp(((OrderHeaderVO) orderVO.getParentVO()).getPk_corp());
                        lvec_ParVO.addElement(l_ParVOTemp);
                    }
                }

            }

            if (lvec_ParVO.size() > 0) {
                l_aryParVO = new nc.vo.scm.pu.ParaVO21WriteNumTo20[lvec_ParVO.size()];
                lvec_ParVO.copyInto(l_aryParVO);

//                Object obj = new InterServBO().getInterInstance(ProductCode.PROD_PO, InterRegister.PU0151);
//                if (obj != null) {
//                    ((IPuToSc_PraybillBO) obj).updateAccumNumFrmSc(l_aryParVO);
//                }
                IPuToSc_PraybillBO pray = (IPuToSc_PraybillBO) NCLocator.getInstance().lookup(IPuToSc_PraybillBO.class.getName());
                pray.updateAccumNumFrmSc(l_aryParVO);
                //pray.updateAccumNumFrmSc(l_aryParVO);
            }

            //回写合同
            Vector lvec_CTParVO = new Vector();
            ParaPoToCtRewriteVO[] l_aryCTParVO;

            for (int i = 0; i < num; i++) {
                String upbill_type = itemVO[i].getCupsourcebilltype();
                String lStr_ContractRowId = itemVO[i].getCcontractrowid();
                if (upbill_type != null && upbill_type.length() > 0 && (upbill_type.equals(BillTypeConst.CT_BEFOREDATE) || upbill_type.equals(BillTypeConst.CT_ORDINARY))) {
                    String upbill_bid = itemVO[i].getCupsourcebillrowid();
                    if (upbill_bid == null || upbill_bid.trim().equals(""))
                        continue;
                    UFDouble nOldNum = itemVO[i].getNoldnum();
                    UFDouble nOldsummny = itemVO[i].getNsummny();

                    if (nOldNum == null)
                        nOldNum = new UFDouble(0);

                    if (nOldsummny == null)
                        nOldsummny = new UFDouble(0);

                    UFDouble nNewNum = new UFDouble(0);
                    UFDouble nNewsummny = new UFDouble(0);

                    ParaPoToCtRewriteVO l_CTParVOTemp = new ParaPoToCtRewriteVO();
                    //                      l_ParVOTemp.setFirstTime(new UFBoolean(true)) ;
                    l_CTParVOTemp.setCContractRowID(upbill_bid);
                    l_CTParVOTemp.setDNum(nNewNum.sub(nOldNum));
                    l_CTParVOTemp.setDSummny(nNewsummny.sub(nOldsummny));
                    l_CTParVOTemp.setOperatorID(sOperatorId);
                    lvec_CTParVO.addElement(l_CTParVOTemp);
                } else {//关联合同时的回写
                    if (lStr_ContractRowId != null && lStr_ContractRowId.length() > 0) {
                        UFDouble nOldNum = itemVO[i].getNoldnum();
                        UFDouble nOldsummny = itemVO[i].getNsummny();

                        if (nOldNum == null)
                            nOldNum = new UFDouble(0);

                        if (nOldsummny == null)
                            nOldsummny = new UFDouble(0);

                        UFDouble nNewNum = new UFDouble(0);
                        UFDouble nNewsummny = new UFDouble(0);

                        ParaPoToCtRewriteVO l_CTParVOTemp = new ParaPoToCtRewriteVO();
                        //                      l_ParVOTemp.setFirstTime(new UFBoolean(true)) ;
                        l_CTParVOTemp.setCContractRowID(lStr_ContractRowId);
                        l_CTParVOTemp.setDNum(nNewNum.sub(nOldNum));
                        l_CTParVOTemp.setDSummny(nNewsummny.sub(nOldsummny));
                        l_CTParVOTemp.setOperatorID(sOperatorId);
                        lvec_CTParVO.addElement(l_CTParVOTemp);
                    }
                }

            }

            if (lvec_CTParVO.size() > 0) {
                l_aryCTParVO = new ParaPoToCtRewriteVO[lvec_CTParVO.size()];
                lvec_CTParVO.copyInto(l_aryCTParVO);
//                Object obj = new InterServBO().getInterInstance(ProductCode.PROD_CT, InterRegister.CT0001);
//                if (obj != null) {
//                    ((ICtToPo_BackToCt) obj).writeBackAccuOrdData(l_aryCTParVO);
//                }
                ICtToPo_BackToCt ct = (ICtToPo_BackToCt) NCLocator.getInstance().lookup(ICtToPo_BackToCt.class.getName());
                ct.writeBackAccuOrdData(l_aryCTParVO);
                //purbacktoctbo.writeBackAccuOrdData(l_aryCTParVO);
            }

            //          回写2005-02-23

            //回写销售定单
            updateXSDDNum(orderVO);

            //回写调拨定单
            updateDBDDNum(orderVO);

            //作废操作
            dmo.discardBill(key);
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
    }

    /**
     * 作废单据
     *
     * 创建日期：(2001-6-23)
     *
     * @param order
     *            nc.vo.sc.order.OrderVO
     * @exception BusinessException 
     *                异常说明。
     */
    public void discardBillArray(OrderVO[] vos) throws BusinessException  {

        try {
            for (int i = 0; i < vos.length; i++) {
                discardBill(vos[i]);
            }

        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        } 
    }
    
    public void saveOutterBill(OrderVO VOs[], nc.vo.scm.pub.session.ClientLink clientlink) throws BusinessException  {

        try {
          new OrderDMO().saveOutterBill(VOs, clientlink);
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        } 
    }

    /**
     * 作废单据
     *
     * 创建日期：(2001-6-23)
     *
     * @param order
     *            nc.vo.sc.order.OrderVO
     * @exception BusinessException 
     *                异常说明。
     */
    private void discardBillArray(String key, String coperatorid) throws BusinessException  {
        boolean bCanOper = false; //是否可操作
        PKLock m_boLock = null;
        try {

            if (coperatorid == null || coperatorid.trim().equals(""))
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000048")/*@res "数据非法:没有操作员"*/);

            //加业务锁
            m_boLock = PKLock.getInstance();
            bCanOper = m_boLock.acquireLock(key, coperatorid, nc.bs.sc.pub.PublicDMO.getDsName());
            //nc.bs.pr.pray.PraybillBO pray = new nc.bs.pr.pray.PraybillBO();

            if (bCanOper) {

                //是否可作废（已审核?）
                OrderDMO dmo = new OrderDMO();
                String status = dmo.getOrderState(null, key);
                if (status == null || status.equals(BillStatus.DELETED.toString()))
                    throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000049")/*@res "该单据已被作废"*/);
                if (status.equals(BillStatus.AUDITED.toString()))
                    throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000050")/*@res "该单据已审核，无法作废"*/);
                if (status.equals(BillStatus.AUDITING.toString()))
                    throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000051")/*@res "该单据正在审核中，无法作废"*/);

                //回写请购单订货数量
                OrderVO orderVO = dmo.findByPrimaryKey(key);
                OrderItemVO[] itemVO = (OrderItemVO[]) orderVO.getChildrenVO();
                int num = itemVO.length;

                //设置status 2005-02-25 for hf
                for (int i = 0; i < num; i++) {
                    itemVO[i].setStatus(nc.vo.pub.VOStatus.DELETED);
                }

                Vector lvec_ParVO = new Vector();
                nc.vo.scm.pu.ParaVO21WriteNumTo20[] l_aryParVO;

                for (int i = 0; i < num; i++) {
                    String upbill_bid = itemVO[i].getCupsourcebillrowid();
                    if (upbill_bid == null || upbill_bid.trim().equals(""))
                        continue;
                    UFDouble nOldNum = itemVO[i].getNoldnum();
                    if (nOldNum == null)
                        nOldNum = new UFDouble(0);
                    UFDouble nNewNum = new UFDouble(0);
                    //pray.updateAccumulateNum(upbill_bid, nOldNum, nNewNum,
                    // ((OrderHeaderVO)orderVO.getParentVO()).getPk_corp());
                    nc.vo.scm.pu.ParaVO21WriteNumTo20 l_ParVOTemp = new nc.vo.scm.pu.ParaVO21WriteNumTo20();
                    l_ParVOTemp.setRowbid(upbill_bid);
                    l_ParVOTemp.setNumNew(nNewNum);
                    l_ParVOTemp.setNumOld(nOldNum);
                    l_ParVOTemp.setPkCorp(((OrderHeaderVO) orderVO.getParentVO()).getPk_corp());
                    lvec_ParVO.addElement(l_ParVOTemp);
                }
                if (lvec_ParVO.size() > 0) {
                    l_aryParVO = new nc.vo.scm.pu.ParaVO21WriteNumTo20[lvec_ParVO.size()];
                    lvec_ParVO.copyInto(l_aryParVO);
//                    Object obj = new InterServBO().getInterInstance(ProductCode.PROD_PO, InterRegister.PU0151);
//                    if (obj != null) {
//                        ((IPuToSc_PraybillBO) obj).updateAccumNumFrmSc(l_aryParVO);
//
//                    }
                    IPuToSc_PraybillBO pray = (IPuToSc_PraybillBO) NCLocator.getInstance().lookup(IPuToSc_PraybillBO.class.getName());
                    pray.updateAccumNumFrmSc(l_aryParVO);
                }
                //pray.updateAccumNumFrmSc(l_aryParVO);
                //
                //          回写合同
                Vector lvec_CTParVO = new Vector();
                ParaPoToCtRewriteVO[] l_aryCTParVO;

                for (int i = 0; i < num; i++) {
                    String upbill_type = itemVO[i].getCupsourcebilltype();
                    String lStr_ContractRowId = itemVO[i].getCcontractrowid();
                    if (upbill_type != null && upbill_type.length() > 0 && (upbill_type.equals(BillTypeConst.CT_BEFOREDATE) || upbill_type.equals(BillTypeConst.CT_ORDINARY))) {
                        String upbill_bid = itemVO[i].getCupsourcebillrowid();
                        if (upbill_bid == null || upbill_bid.trim().equals(""))
                            continue;
                        UFDouble nOldNum = itemVO[i].getNoldnum();//订单行修改前原有数量
                        UFDouble nOldsummny = itemVO[i].getNsummny();//本币价税合计

                        if (nOldNum == null)
                            nOldNum = new UFDouble(0);

                        if (nOldsummny == null)
                            nOldsummny = new UFDouble(0);

                        UFDouble nNewNum = new UFDouble(0);
                        UFDouble nNewsummny = new UFDouble(0);

                        ParaPoToCtRewriteVO l_CTParVOTemp = new ParaPoToCtRewriteVO();
                        //                          l_ParVOTemp.setFirstTime(new UFBoolean(true)) ;
                        l_CTParVOTemp.setCContractRowID(upbill_bid);
                        l_CTParVOTemp.setDNum(nNewNum.sub(nOldNum));
                        l_CTParVOTemp.setDSummny(nNewsummny.sub(nOldsummny));
                        l_CTParVOTemp.setOperatorID(coperatorid);
                        lvec_CTParVO.addElement(l_CTParVOTemp);
                    } else {//关联合同时的回写
                        if (lStr_ContractRowId != null && lStr_ContractRowId.length() > 0) {
                            UFDouble nOldNum = itemVO[i].getNoldnum();
                            UFDouble nOldsummny = itemVO[i].getNsummny();

                            if (nOldNum == null)
                                nOldNum = new UFDouble(0);

                            if (nOldsummny == null)
                                nOldsummny = new UFDouble(0);

                            UFDouble nNewNum = new UFDouble(0);
                            UFDouble nNewsummny = new UFDouble(0);

                            ParaPoToCtRewriteVO l_CTParVOTemp = new ParaPoToCtRewriteVO();
                            //                      l_ParVOTemp.setFirstTime(new UFBoolean(true)) ;
                            l_CTParVOTemp.setCContractRowID(lStr_ContractRowId);
                            l_CTParVOTemp.setDNum(nNewNum.sub(nOldNum));
                            l_CTParVOTemp.setDSummny(nNewsummny.sub(nOldsummny));
                            l_CTParVOTemp.setOperatorID(coperatorid);
                            lvec_CTParVO.addElement(l_CTParVOTemp);
                        }
                    }

                }

                if (lvec_CTParVO.size() > 0) {
                    l_aryCTParVO = new ParaPoToCtRewriteVO[lvec_CTParVO.size()];
                    lvec_CTParVO.copyInto(l_aryCTParVO);
//                    Object obj = new InterServBO().getInterInstance(ProductCode.PROD_CT, InterRegister.CT0001);
//                    if (obj != null) {
//                        ((ICtToPo_BackToCt) obj).writeBackAccuOrdData(l_aryCTParVO);
//
//                    }
                    ICtToPo_BackToCt ct = (ICtToPo_BackToCt)NCLocator.getInstance().lookup(ICtToPo_BackToCt.class.getName());
                    ct.writeBackAccuOrdData(l_aryCTParVO);
                    //purbacktoctbo.writeBackAccuOrdData(l_aryCTParVO);
                }

                //              回写2005-02-23

                //回写销售定单
                updateXSDDNum(orderVO);

                //回写调拨定单
                updateDBDDNum(orderVO);
                //作废操作
                dmo.discardBill(key);
            } else
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPPSCMCommon-000316")/*@res "正在进行相关操作，请稍后再试"*/);

        } catch (Exception e) {
            
          PublicDMO.throwBusinessException(e);
        } finally {
            try {
                if (m_boLock != null && bCanOper) {
                    //对单据解锁
                    m_boLock.releaseLock(key, coperatorid, nc.bs.sc.pub.PublicDMO.getDsName());
                }
            } catch (Exception e) {
              PublicDMO.throwBusinessException(e);
            }
        }
    }

    /**
     * 向数据库中插入一个VO对象。
     *
     * 创建日期：(2001-6-23)
     *
     * @param order
     *            nc.vo.sc.order.OrderVO
     * @return java.lang.String 所插入VO对象的主键字符串。
     * @exception BusinessException 
     *                异常说明。
     */
    public BD_ConvertVO[] findBd_Converts(String pk_invbasdoc[], String pk_measdoc[]) throws BusinessException  {

        try {
            OrderDMO dmo = new OrderDMO();

            BD_ConvertVO convert[] = dmo.findBd_Converts(pk_invbasdoc, pk_measdoc);
            return convert;
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
    return null;
    }

    /**
     * 向数据库中插入一个VO对象。
     *
     * 创建日期：(2001-6-23)
     *
     * @param order
     *            nc.vo.sc.order.OrderVO
     * @return java.lang.String 所插入VO对象的主键字符串。
     * @exception BusinessException 
     *                异常说明。
     */
    private boolean findBillCode(String billcode) throws BusinessException  {

        try {
            OrderDMO dmo = new OrderDMO();

            return dmo.findBillCode(billcode);
        } catch (Exception e) {
            
          PublicDMO.throwBusinessException(e);
        }
    return false;
    }

    /**
     * 效率优化后的换算率取法
     *
     * 创建日期：(2001-6-23)
     *
     * @param order
     *            nc.vo.sc.order.OrderVO
     * @return java.lang.String 所插入VO对象的主键字符串。
     * @exception BusinessException 
     *                异常说明。
     */

    public ArrayList findConvertsandFreeVO(String pk_invbasdoc[], String pk_measdoc[], ArrayList list) throws BusinessException  {

        try {
            //BD_ConvertVO
            OrderDMO dmo = new OrderDMO();

            BD_ConvertVO convert[] = dmo.findBd_Converts(pk_invbasdoc, pk_measdoc);

            //FreeVO
            ArrayList freevoList = null;

            FreeItemDMO dmo2 = new FreeItemDMO();
            Hashtable table = dmo2.queryByInvIDsHash(list);
            if (table == null || table.size() <= 0) {
                freevoList = new ArrayList();
                ;
            } else {
                freevoList = new ArrayList();
                for (int i = 0; i < list.size(); i++) {
                    String id = (String) list.get(i);
                    if (table.containsKey(id)) {
                        freevoList.add(table.get(id));
                    } else
                        freevoList.add(new nc.vo.scm.ic.bill.FreeVO());
                }
            }
            //
            ArrayList returnList = new ArrayList();
            returnList.add(convert);
            returnList.add(freevoList);
            return returnList;

        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
    return null;
    }

    /**
     * 通过主键获得VO对象。
     *
     * 创建日期：(2001-6-23)
     *
     * @return nc.vo.sc.order.OrderVO
     * @param key
     *            String
     * @exception BusinessException 
     *                异常说明。
     */
    private OrderHeaderVO findHeaderByPrimaryKey(String key) throws BusinessException  {

        OrderHeaderVO orderHeader = null;
        try {
            OrderDMO dmo = new OrderDMO();
            orderHeader = dmo.findHeaderByPrimaryKey(key);
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
        return orderHeader;
    }

    /**
     * 通过主键获得VO对象。
     *
     * 创建日期：(2001-6-23)
     *
     * @return nc.vo.sc.order.OrderVO
     * @param key
     *            String
     * @exception BusinessException 
     *                异常说明。
     */
    private OrderItemVO[] findItemsForHeader(String key) throws BusinessException  {

        OrderItemVO[] orderItems = null;
        try {
            OrderDMO dmo = new OrderDMO();
            orderItems = dmo.findItemsForHeader(key);
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
        return orderItems;
    }

    //*采购提前期
    public int getAdvanceDays(String pk_corp, String cwareid, String cbaseid, UFDouble d) throws BusinessException  {

        Vector v = new Vector();

        try {

            if (cwareid != null && cwareid.length() > 0 && cbaseid != null && cbaseid.length() > 0) {
//                Object obj = new InterServBO().getInterInstance(ProductCode.PROD_PO, InterRegister.PU0150);
//                if (obj != null) {
//                    v = ((IPuToSc_PraybillDMO) obj).queryAdvanceDays(pk_corp, cwareid, cbaseid);
//
//                }
              IPuToSc_PraybillDMO dmo = (IPuToSc_PraybillDMO) NCLocator.getInstance().lookup(IPuToSc_PraybillDMO.class.getName());
              v=dmo.queryAdvanceDays(pk_corp, cwareid, cbaseid);
                //PraybillDMO prayDMO = new PraybillDMO();
                //v = prayDMO.queryAdvanceDays(pk_corp, cwareid, cbaseid);
            } else
                return 0;
        } catch (Exception e) {
            
          PublicDMO.throwBusinessException(e);
        }

        if (v.size() == 0)
            return 0;

        UFDouble dFixedahead = (UFDouble) v.elementAt(0);
        UFDouble dAheadcoff = (UFDouble) v.elementAt(1);
        UFDouble dAheadbatch = (UFDouble) v.elementAt(2);

        if (d != null && dFixedahead != null && dAheadcoff != null && dAheadbatch != null && dAheadbatch.doubleValue() != 0.0) {
            double d1 = d.doubleValue();
            double d2 = dFixedahead.doubleValue();
            double d3 = dAheadcoff.doubleValue();
            double d4 = dAheadbatch.doubleValue();
            if (d1 > d4) {
                double dd = d2 + (d1 - d4) * d3 / d4;
                int k = (int) dd;
                if (dd - k > 0)
                    k++;
                return k;
            } else
                return (int) d2;
        } else
            return 0;
    }

    //委外订单表体转换为备料计划表头
    public PickmHeaderVO[] getPickmHeaderVOs(OrderVO orderVO) throws BusinessException  {

        OrderHeaderVO headVO = (OrderHeaderVO) orderVO.getParentVO();
        OrderItemVO[] itemVOs = (OrderItemVO[]) orderVO.getChildrenVO();

        int num = itemVOs.length;
        PickmHeaderVO[] returnHeaderVOs = new PickmHeaderVO[num];

        try {
            OrderDMO dmo = new OrderDMO();

            for (int i = 0; i < num; i++) {
                returnHeaderVOs[i] = new PickmHeaderVO();
                //
                String pk_corp = headVO.getPk_corp();
                String cwareid = headVO.getCwareid();
                returnHeaderVOs[i].setPk_corp(pk_corp); //公司
                returnHeaderVOs[i].setGcbm(cwareid); //工厂编码（库存组织）
                returnHeaderVOs[i].setZdrq(headVO.getDorderdate()); //制单日期
                returnHeaderVOs[i].setZdrmc(dmo.getUserName(pk_corp, headVO.getCoperator())); //制单人
                returnHeaderVOs[i].setYlbmid(headVO.getCdeptid()); //用料部门
                returnHeaderVOs[i].setZt("A"); //状态---A
                returnHeaderVOs[i].setLyid(itemVOs[i].getCorderid()); //来源id----委外单据ID
                returnHeaderVOs[i].setFbid(itemVOs[i].getCorder_bid());//（委外订单行ID）
                returnHeaderVOs[i].setLydjh(headVO.getVordercode()); //来源单据号---委外订单号
                returnHeaderVOs[i].setLylx(new Integer(2)); //来源类型---委外是2
                returnHeaderVOs[i].setSfct(new UFBoolean("Y")); //是否成套发料，默认成套
                returnHeaderVOs[i].setBljhdh(itemVOs[i].getCorder_bid());
                returnHeaderVOs[i].setZjbz(new Integer(1));
                returnHeaderVOs[i].setDr(new Integer(0));
                returnHeaderVOs[i].setKsid(headVO.getCvendormangid());//供应商管理ID

                //
                String cbaseid = itemVOs[i].getCbaseid();
                //String cmangid = itemVOs[i].getCmangid();
                Object[] produceInfo = dmo.getPk_produce(pk_corp, cbaseid, cwareid);
                UFDouble nordernum = itemVOs[i].getNordernum();
                returnHeaderVOs[i].setPk_produce(produceInfo[0].toString()); //生产档案主页ID（由cbaseid得到）
                returnHeaderVOs[i].setWlbmid(cbaseid); //物料ID
                returnHeaderVOs[i].setJldwid(dmo.getPk_measdoc(cbaseid)); //计量单位（主计量单位）
                returnHeaderVOs[i].setJhwgsl(itemVOs[i].getNordernum()); //计划完工数量
                returnHeaderVOs[i].setDate(getPlanBeginDate(pk_corp, cwareid, cbaseid, nordernum, produceInfo[1], itemVOs[i].getDplanarrvdate()));

            }
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
        return returnHeaderVOs;
    }

    //*计划开工日期（计划到货日期-采购提前期+前段提前期）
    public String getPlanBeginDate(String pk_corp, String cwareid, String cbaseid, UFDouble d, Object prevahead, UFDate planArrDate) throws BusinessException  {

        if (planArrDate == null || planArrDate.toString().trim().equals(""))
            return "";

        int prePreDays = 0;

        if (prevahead != null && !prevahead.toString().trim().equals("")) {
            UFDouble days = new UFDouble(prevahead.toString());
            prePreDays = days.intValue();
        }
        int purPreDays = getAdvanceDays(pk_corp, cwareid, cbaseid, d);

        UFDate returnDate = planArrDate.getDateBefore(purPreDays);
        returnDate = planArrDate.getDateAfter(prePreDays);
        return returnDate.toString();

    }

    /**
     * 向数据库中插入一个VO对象。
     *
     * 创建日期：(2001-6-23)
     *
     * @param order
     *            nc.vo.sc.order.OrderVO
     * @return java.lang.String 所插入VO对象的主键字符串。
     * @exception BusinessException 
     *                异常说明。
     */
    public String getPrayState(String pos, String billid) throws BusinessException  {

        try {
            OrderDMO dmo = new OrderDMO();

            return dmo.getPrayState(pos, billid);
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
    return null;
    }

    //返回存货分类编码数组
    public String[] getSubInvClassCode(String cInvClassCode, String sOpera) throws BusinessException  {
        String[] saClassCode = null;
        try {
            OrderDMO dmo = new OrderDMO();
            saClassCode = dmo.getSubInvClassCode(cInvClassCode, sOpera);
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
        return saClassCode;
    }

    /**
     * 向数据库中插入一个VO对象。
     *
     * 创建日期：(2001-6-23)
     *
     * @param order
     *            nc.vo.sc.order.OrderVO
     * @return java.lang.String 所插入VO对象的主键字符串。
     * @exception BusinessException 
     *                异常说明。
     */
    private OrderVO insert(OrderVO order) throws BusinessException  {

        try {
            //批次号处理begin
            nc.bs.sc.pub.BatchCodeDMO batchCodeDmo = new nc.bs.sc.pub.BatchCodeDMO();
            HashMap hBatchCodes = batchCodeDmo.getBatchCode(order);
            OrderItemVO[] batchItems = (OrderItemVO[]) order.getChildrenVO();
            if (hBatchCodes != null && hBatchCodes.size() > 0) {
                for (int i = 0; i < batchItems.length; i++) {
                    if (batchItems[i].getVproducenum() == null || batchItems[i].getVproducenum().trim().length() == 0)
                        batchItems[i].setVproducenum((String) hBatchCodes.get(batchItems[i].getCmangid()));
                }
            }
            //批次号处理end

            OrderDMO dmo = new OrderDMO();

            //库存组织/仓库匹配检查
            //String sErr = dmo.checkWarehouse(order);
            //if(sErr != null && sErr.length() > 0) throw new
            // nc.vo.pub.BusinessException(sErr);

            OrderVO returnVO = dmo.insert(order);
            return returnVO;
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
    return null;
    }

    /**
     * 通过主键获得VO对象。
     *
     * 创建日期：(2001-6-20)
     *
     * @return nc.vo.sc.order.OrderVO
     * @param key
     *            String
     * @exception BusinessException 
     *                异常说明。
     */
    public OrderHeaderVO[] queryAllHeadForOrder(String unitCode) throws BusinessException  {

        OrderHeaderVO[] order = null;
        try {
            OrderDMO dmo = new OrderDMO();
            order = dmo.queryAllHead(unitCode);
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
        return order;
    }

    /**
     * 通过主键获得VO对象,委外订单维护节点、委外订单审核节点、以及根据委外订单生成委外退库单参照界面查询时调用。
     *
     * 创建日期：(2001-6-20)
     *
     * @return nc.vo.sc.order.OrderVO
     * @param key
     *            String
     * @exception BusinessException 
     *                异常说明。
     */
    public OrderHeaderVO[] queryAllHeadForOrder(String strAuditFlag, String strWhereSql, ClientLink cl, boolean iswaitaudit) throws BusinessException  {

        OrderHeaderVO[] order = null;
        String strPkCorp = null;
        String strUserId = null;
        String strPowerSqlHead = null;
        String strPowerSqlBody = null;
        if (cl != null) {
            strPkCorp = cl.getCorp();
            strUserId = cl.getUser();
            if (strPkCorp == null || strUserId == null) {
                SCMEnv.out("可能是程序BUG：不能获取本次查询的操作员ID!以下信息供程序员参考：\n");
            } else {
                strPowerSqlHead = ScmDps.getSubSql("sc_order", null, strUserId, new String[] { strPkCorp });
                if (strPowerSqlHead != null && strPowerSqlHead.trim().length() > 0) {
                    if (strWhereSql != null && strWhereSql.trim().length() > 0) {
                        strWhereSql += " and " + strPowerSqlHead + " ";
                    } else {
                        strWhereSql = strPowerSqlHead + " ";
                    }
                }
                strPowerSqlBody = ScmDps.getSubSql("sc_order_b", null, strUserId, new String[] { strPkCorp });
                if (strPowerSqlBody != null && strPowerSqlBody.trim().length() > 0) {
                    if (strWhereSql != null && strWhereSql.trim().length() > 0) {
                        strWhereSql += " and " + strPowerSqlBody + " ";
                    } else {
                        strWhereSql = strPowerSqlBody + " ";
                    }
                }
            }
        }
        try {
            OrderDMO dmo = new OrderDMO();
            order = dmo.queryAllHead(strAuditFlag, strWhereSql);
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
        
        if (iswaitaudit) {
        	order = (OrderHeaderVO[]) ScUtils.filterHeadByIsWaitAudit(order, BillTypeConst.SC_Order, BsScTool.getLoginOperator());
        }

        return order;
    }

    /**
     * 通过主键获得VO对象。
     *
     * 创建日期：(2001-6-20)
     *
     * @return nc.vo.sc.order.OrderVO
     * @param key
     *            String
     * @exception BusinessException 
     *                异常说明。
     */
    public NewPraybillItemVO[] queryAllPrayBody(String condition) throws BusinessException  {

        NewPraybillItemVO[] pray = null;
        try {
            OrderDMO dmo = new OrderDMO();
            pray = dmo.queryAllPrayBody(condition);
        } catch (Exception e) {
            
          PublicDMO.throwBusinessException(e);
        }
        return pray;
    }

    /**
     * 通过主键获得VO对象。
     *
     * 创建日期：(2001-6-20)
     *
     * @return nc.vo.sc.order.OrderVO
     * @param key
     *            String
     * @exception BusinessException 
     *                异常说明。
     * 此方法没有使用，暂时删除
     */
//    private OrderHeaderVO[] queryHeadByVO(OrderHeaderVO condOrderVO, Boolean isAnd) throws BusinessException  {
//
//        OrderHeaderVO[] order = null;
//        try {
//            OrderDMO dmo = new OrderDMO();
//            order = dmo.queryHeadByVO(condOrderVO, isAnd);
//        } catch (Exception e) {
//          PublicDMO.throwBusinessException(e);
//        }
//        return order;
//    }

    /**
     * 通过主键获得VO对象。
     *
     * 创建日期：(2001-6-20)
     *
     * @return nc.vo.sc.order.OrderVO
     * @param key
     *            String
     * @exception BusinessException 
     *                异常说明。
     */
    private NewPraybillItemVO queryOnePrayBody(String bill_bid) throws BusinessException  {

        NewPraybillItemVO pray = null;
        try {
            OrderDMO dmo = new OrderDMO();
            pray = dmo.queryOnePrayBody(bill_bid);
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
        return pray;
    }

    /**
     * 订单弃审
     *
     * 创建日期：(2001-6-23)
     *
     * @param key
     *            String
     * @exception BusinessException 
     *                异常说明。
     */
    public OrderVO unAudit(OrderVO vo) throws BusinessException {
        try {
            //String coperatorid = ((OrderHeaderVO) vo.getParentVO()).getCcuroperator();
            String corderid = vo.getParentVO().getPrimaryKey();
            String pk_corp = ((OrderHeaderVO) vo.getParentVO()).getPk_corp();

            OrderDMO dmo = new OrderDMO();
            String status = dmo.getOrderState(null, corderid);
            if (status == null || status.equals(BillStatus.DELETED.toString()))
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000036")/*@res "该单据已被作废，无法弃审"*/);
//            if (status.equals(BillStatus.AUDITING.toString()))
//                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000052")/*@res "该单据正在审核中，无法操作"*/);
            if (status.equals(BillStatus.FREE.toString()) || status.equals(BillStatus.AUDITFAIL.toString()))
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000053")/*@res "该单据已被弃审，无法再次弃审"*/);

            //是否满足弃审条件(是否有关闭的订单行、备料计划是否审批、是否生成到货单、是否生成发票、是否生成入库单）
            OrderItemVO[] itemVO = dmo.findItemsForHeader(corderid);
            int num = itemVO.length;
            String[] keys = new String[num];
            for (int i = 0; i < num; i++) {
                if (!itemVO[i].getBisactive().booleanValue())
                    throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000054")/*@res "该订单存在关闭的订单行，无法弃审"*/);
                keys[i] = itemVO[i].getCorder_bid();
            }

            String nextbillid = null;
            //判断采购管理是否启用
            CreatecorpDMO pubDMO = new CreatecorpDMO();
            boolean haveUsed = pubDMO.isEnabled(pk_corp, "PO");
            if (haveUsed) {

                nextbillid = dmo.findNextArrBill(corderid);
                if (nextbillid != null && !nextbillid.toString().equals(""))
                    throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000055")/*@res "该单据已生成到货单，无法弃审"*/);
                nextbillid = dmo.findNextInvoiceBill(corderid);
                if (nextbillid != null && !nextbillid.toString().equals(""))
                    throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000056")/*@res "该单据已生成发票，无法弃审"*/);
            }
            //判断库存管理是否启用
            haveUsed = pubDMO.isEnabled(pk_corp, "IC");
            if (haveUsed) {
                nextbillid = dmo.findNextWareBill(corderid);
                if (nextbillid != null && !nextbillid.toString().equals(""))
                    throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000057")/*@res "该单据已生成入库单，无法弃审"*/);
            }

            //弃审
            dmo.unAudit(vo);
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
        return vo;
    }

    public AggregatedValueObject[] unAuditArray(AggregatedValueObject[] voaOrder) 
    	throws BusinessException , BusinessException {
      if (voaOrder[0] instanceof OrderVO) {
        OrderVO[] a = new OrderVO[voaOrder.length];
        for (int i = 0; i < voaOrder.length; i++) {
          a[i] = (OrderVO) voaOrder[i];
        }
        return unAuditArray(a);
      }else{
        return null;
      }
    }
    
    /**
     * 订单数组弃审
     *
     * 创建日期：(2001-6-23)
     *
     * @param key
     *            String
     * @exception BusinessException 
     *                异常说明。
     */
    public OrderVO[] unAuditArray(OrderVO[] voaOrder) 
    	throws BusinessException , BusinessException {
        int iLen = voaOrder.length;
        for (int i = 0; i < iLen; i++) {
        	voaOrder[i] = unAudit(voaOrder[i]);
        }
        return voaOrder;
    }

    /**
     * 作者：yye
     * 功能：取SC默认价格、按照原有取价规则取得价格
     * 参数：RetPoVrmAndParaPriceVO    voPara    参数VO
     *        String    pk_corp       公司主键
     *        String    saMangId[]      存货管理ID
     *        String    saCurrId[]      币种ID
     *        UFDouble[]  daBRate       折本汇率数据
     *        UFDouble[]  daARate       折辅汇率数据
     *        String    sDate       单据日期
     * 返回：    UFDouble[]            采购默认价格，为按币种折算过的价格
     *        不返回空，且其中的价格数组等均不为空
     * 例外：BusinessException         包裹业务及系统异常
     * 日期：(2001-6-5 9:04:03)
     * 修改日期，修改人，修改原因，注释标志：
     */
    public RetScVrmAndParaPriceVO queryVrmAndParaPrices(RetScVrmAndParaPriceVO voPara) throws BusinessException  {

        String pk_corp = voPara.getPk_corp();
        String sStoOrgId = voPara.getStoOrgId();
        String sVendMangId = voPara.getVendMangId();
        String[] saMangId = voPara.getSaInvMangId();
        String[] saCurrId = voPara.getSaCurrId();
        UFDouble[] daBRate = voPara.getDaBRate();
        UFDouble[] daARate = voPara.getDaARate();
        UFDate dOrderDate = voPara.getDOrderDate();

        nc.vo.scm.pu.Timer timeDebug = new nc.vo.scm.pu.Timer();
        timeDebug.start();

        int iTotalLen = saMangId.length;
        UFDouble[] daPrice = null;
        //组织返回值
        RetScVrmAndParaPriceVO voRet = new RetScVrmAndParaPriceVO(iTotalLen);
        try {
            int iPriorPrice = nc.bs.sc.pub.PublicDMO.getPricePriorPolicy(pk_corp);

            //调用供应商管理接口取得价格
            CreatecorpDMO corpDmo = new CreatecorpDMO();
            if (corpDmo.isEnabled(pk_corp, ProductCode.PROD_PO)) { //"PO"
                IAsk vend = (IAsk) NCLocator.getInstance().lookup(IAsk.class.getName());
                //daPrice = vend.queryPriceForPO(saMangId, new String[] {sVendMangId}, saCurrId,iPriorPrice == RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE ? "无税价格优先" : "含税价格优先", voPara.getClientLink().getLogonDate().toString()/*-=notranslate=-*/);
            }
            timeDebug.addExecutePhase("调用采购管理接口取得价格");/*-=notranslate=-*/

            //如果供应商存货关系中不存在价格，根据系统参数到基础档案中查找
            Vector vParaIndex = new Vector();
            if (daPrice == null) {
                daPrice = new UFDouble[iTotalLen];
            }
            for (int i = 0; i < daPrice.length; i++) {
                if (daPrice[i] == null) {
                    vParaIndex.addElement(new Integer(i));
                }
            }

            int iParaLen = vParaIndex.size();
            if (iParaLen > 0) {
                //取得价格参数
                String sPara = new SysInitDMO().getParaString(pk_corp, "SC10");
                if (sPara != null) {
                    UFDouble[] daBasePrice = queryPricesFromPara(voPara, sPara, iPriorPrice);
                    if (daBasePrice != null && daBasePrice.length > 0) {
                        for (int i = 0; i < iParaLen; i++) {
                            if (daBasePrice[i] != null
                            //&& (daBasePrice[i].compareTo(nc.vo.pu.pub.VariableConst.ZERO) != 0
                            ) {
                                int iIndex = ((Integer) vParaIndex.get(i)).intValue();
                                daPrice[iIndex] = daBasePrice[i];
                                if (sPara.equals("参考成本") || sPara.equals("计划价")) {/*-=notranslate=-*/
                                    voRet.setPriceNoTaxAt(iIndex, true);
                                }
                            }
                        }
                    }
                }
            }
            timeDebug.addExecutePhase("根据系统参数到取采购价格");/*-=notranslate=-*/

        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }

        //设置返回值
        voRet.setDaQueryValue(daPrice);
        voRet.setPk_corp(pk_corp);
        voRet.setStoOrgId(sStoOrgId);
        voRet.setSaCurrId(saCurrId);
        voRet.setVendMangId(sVendMangId);
        voRet.setSaInvMangId(saMangId);
        voRet.setDOrderDate(dOrderDate);
        voRet.setDaBRate(daBRate);
        voRet.setDaARate(daARate);
        timeDebug.showAllExecutePhase("订单BS取VRM及采购默认价格时间");/*-=notranslate=-*/

        return voRet;
    }

    /**
     * 作者：yye
     * 功能：取SC默认价格，按照参数设置取得存货得相应价格
     * 参数：    String    pk_corp       公司主键
     *        String    saMangId[]      存货管理ID
     *        String    saCurrId[]      币种ID
     *        UFDouble[]  daBRate       折本汇率数据
     *        UFDouble[]  daARate       折辅汇率数据
     *        String    sDate       单据日期
     * 返回：    UFDouble[]            SC默认价格，为按币种折算过的价格
     * 例外：BusinessException         包裹业务及系统异常
     * 日期：(2001-6-5 9:04:03)
     * 修改日期，修改人，修改原因，注释标志：
     */
    private UFDouble[] queryPricesFromPara(RetScVrmAndParaPriceVO voPara, String sPara, int iPricePolicy) throws BusinessException  {

        if (voPara == null || voPara.getSaInvMangId() == null) {
            return null;
        }

        nc.vo.scm.pu.Timer timeDebug = new nc.vo.scm.pu.Timer();
        timeDebug.start();

        UFDouble[] daPrice = new UFDouble[voPara.getSaInvMangId().length];
        String sStoOrgId = voPara.getStoOrgId();
        try {
            nc.bs.sc.order.OrderDMO dmo = new OrderDMO();

            if (sPara.equals("最新进价")) {/*-=notranslate=-*/
                daPrice = dmo.getNewPrices(voPara.getPk_corp(), voPara.getSaInvMangId(), voPara.getSaCurrId(), iPricePolicy);
                return daPrice;
            } else if (sPara.equals("最低进价")) {/*-=notranslate=-*/
                daPrice = dmo.getLowPrices(voPara.getPk_corp(), voPara.getSaInvMangId(), voPara.getSaCurrId(), iPricePolicy);
                return daPrice;
            } else if (sPara.equals("参考成本")) {/*-=notranslate=-*/
                if (SCPubVO.getString_TrimZeroLenAsNull(sStoOrgId) != null)
                    daPrice = dmo.getCostPrices(voPara.getPk_corp(), sStoOrgId, voPara.getSaInvMangId());
                else {
                    HashMap hCostPrice = dmo.queryCostPricesFrmInvman(voPara.getPk_corp(), voPara.getSaInvMangId());
                    for (int i = 0; i < voPara.getSaInvMangId().length; i++) {
                        daPrice[i] = (UFDouble) hCostPrice.get(voPara.getSaInvMangId()[i]);
                    }
                }

            } else if (sPara.equals("计划价")) {/*-=notranslate=-*/
                if (SCPubVO.getString_TrimZeroLenAsNull(sStoOrgId) != null)
                    daPrice = dmo.getPlanPrices(voPara.getPk_corp(), sStoOrgId, voPara.getSaInvMangId());
                else {
                    HashMap hPlanPrice = dmo.queryPlanPricesFrmInvMan(voPara.getSaInvMangId(), voPara.getPk_corp());
                    for (int i = 0; i < voPara.getSaInvMangId().length; i++) {
                        daPrice[i] = (UFDouble) hPlanPrice.get(voPara.getSaInvMangId()[i]);
                    }
                }
            } else if (sPara.equals("无默认")) {/*-=notranslate=-*/
                return daPrice;
            }
            timeDebug.addExecutePhase("查询价格");/*-=notranslate=-*/

            if (daPrice != null) {
              nc.bs.bd.b21.BusinessCurrencyRateUtil currArith = new nc.bs.bd.b21.BusinessCurrencyRateUtil(voPara.getPk_corp());
              //del since v55 : boolean bNeedARate = currArith.isBlnLocalFrac();
              boolean bNeedARate = false;
                for (int i = 0; i < daPrice.length; i++) {
                    if (daPrice[i] == null || SCPubVO.getString_TrimZeroLenAsNull(voPara.getSaCurrId()[i]) == null || voPara.getDaBRate()[i] == null || //主辅币核算，但无折辅汇率
                            (bNeedARate && voPara.getDaARate()[i] == null)) {
                        continue;
                    }
                    daPrice[i] = currArith.getOriginAmountByOpp(
                    		voPara.getSaCurrId()[i],
                    		voPara.getSaCurrId()[i],
                    		daPrice[i],
                    		voPara.getDaBRate()[i] == null ? null : voPara.getDaBRate()[i],
                    		voPara.getDOrderDate().toString());
                }
            }
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
        timeDebug.addExecutePhase("价格换算");/*-=notranslate=-*/
        timeDebug.showAllExecutePhase("订单BS采购价格");/*-=notranslate=-*/

        return daPrice;
    }

    /**
     * 用VO对象的属性值更新数据库。
     *
     * 创建日期：(2001-6-23)
     *
     * @param order
     *            nc.vo.sc.order.OrderVO
     * @exception BusinessException 
     *                异常说明。
     */
    public OrderVO update(OrderVO order) throws BusinessException  {

        try {

          //修改单据：如果单据号未变化，则不做单据号是否重复检查。
          String strNewOrderCode = PuPubVO.getString_TrimZeroLenAsNull(((OrderHeaderVO) order.getParentVO()).getVordercode());
          String strOldOrderCode = PuPubVO.getString_TrimZeroLenAsNull(((OrderHeaderVO) order.getM_voOld().getParentVO()).getVordercode());
          if (strOldOrderCode != null && strNewOrderCode != null && !strNewOrderCode.equalsIgnoreCase(strOldOrderCode)) {
            PublicDMO dmo1 = new PublicDMO();
            nc.vo.pub.lang.UFBoolean isExist = dmo1.isBillCodeDuplicate(order);
            if (isExist.booleanValue()) {
              throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("4004pub","UPP4004pub-000090")/* @res "单据号重复，保存失败" */);
            }
          }
          //V501修改时修改单据号
          //V502 重购
          IGetSysBillCode getSysBillCode = (IGetSysBillCode) NCLocator.getInstance().lookup(
              IGetSysBillCode.class.getName());
          getSysBillCode.setBillNoWhenModify(order, order.getM_voOld(), "vordercode");

      

            //批次号处理begin
            nc.bs.sc.pub.BatchCodeDMO batchCodeDmo = new nc.bs.sc.pub.BatchCodeDMO();
            HashMap hBatchCodes = batchCodeDmo.getBatchCode(order);
            OrderItemVO[] batchItems = (OrderItemVO[]) order.getChildrenVO();
            if (hBatchCodes != null && hBatchCodes.size() > 0) {
                for (int i = 0; i < batchItems.length; i++) {
                    if (batchItems[i].getVproducenum() == null || batchItems[i].getVproducenum().trim().length() == 0)
                        batchItems[i].setVproducenum((String) hBatchCodes.get(batchItems[i].getCmangid()));
                }
            }
            //批次号处理end

            String key = ((OrderHeaderVO) order.getParentVO()).getCorderid();

            //是否可修改（已审核?）
            OrderDMO dmo = new OrderDMO();

            String status = dmo.getOrderState(null, key);
            if (status == null || status.equals(BillStatus.DELETED.toString()))
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000058")/*@res "该单据已被作废,无法修改"*/);
            if (status.equals(BillStatus.AUDITED.toString()))
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000059")/*@res "该单据已审核,无法修改"*/);
            //2009-10-27 renzhonghai 单据在送审后，没有审批人情况下可以修改。
            if (status.equals(BillStatus.AUDITING.toString()) && ((OrderHeaderVO) order.getParentVO()).getCauditpsn() != null)
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000060")/*@res "该单据正在审核中,无法修改"*/);

            ////是否保留最初制单人
            String sPara = new SysInitDMO().getParaString(((OrderHeaderVO) order.getParentVO()).getPk_corp(), "SC09");
            if (sPara != null && sPara.trim().length() > 0) {
                if (sPara.trim().equals("否") || sPara.trim().equalsIgnoreCase("N")) {
                    ((OrderHeaderVO) order.getParentVO()).setCoperator(((OrderHeaderVO) order.getParentVO()).getCcuroperator());
                }
            }

            //修改操作
            OrderVO returnVO = dmo.update(order);

            //回写2005-02-23

            //回写销售定单
            updateXSDDNum(order);

            //回写调拨定单
            updateDBDDNum(order);

            return returnVO;
        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
    return null;
    }

    /**
     * 回写调拨订单
     *
     * 创建日期：(2001-6-23)
     * @param order nc.vo.sc.order.OrderVO
     * @exception BusinessException  异常说明。
     */
    public void updateDBDDNum(OrderVO orderVO) throws BusinessException  {
        //*临时注释掉所有回写内容，等相关产品接口都融入V31后放开。2005-04-03 begin
        try {

            //String key = ((OrderHeaderVO) orderVO.getParentVO()).getCorderid();
            String coperatorid = ((OrderHeaderVO) orderVO.getParentVO()).getCoperator();
            String pkcorp = ((OrderHeaderVO) orderVO.getParentVO()).getPk_corp();

            OrderItemVO[] itemVO1 = (OrderItemVO[]) orderVO.getChildrenVO();
            int num1 = itemVO1.length;

            if (num1 <= 0) {
                return;
            }

            //add 2005-06-06 begin

            Vector lVec_OrderItemVO = new Vector();

            for (int i = 0; i < num1; i++) {
                String upbill_type = itemVO1[i].getCupsourcebilltype();
                if (upbill_type == null || upbill_type.trim().length() == 0) {
                    continue;
                } else if (!upbill_type.trim().equals("5X")) {
                    continue;
                } else {
                    lVec_OrderItemVO.addElement(itemVO1[i]);
                }
            }

            int num = lVec_OrderItemVO.size();
            if (num <= 0)
                return;

            OrderItemVO[] itemVO = new OrderItemVO[num];
            lVec_OrderItemVO.copyInto(itemVO);
            //add 2005-06-06 end

            UFDouble[] l_dOldNum = new UFDouble[num]; //原数量 数组
            UFDouble[] l_dNum = new UFDouble[num]; //现数量 数组
            String[] l_cbodyid = new String[num]; //行ID 数组
            String[] l_cheadid = new String[num]; //头ID 数组
            UFDouble[] l_dOldAssNum = new UFDouble[num]; //原辅计量数量 数组
            UFDouble[] l_dAssNum = new UFDouble[num]; //现辅计量数量 数组

            for (int i = 0; i < num; i++) {

                String upbill_type = itemVO[i].getCupsourcebilltype();
                if (upbill_type == null || upbill_type.trim().length() == 0) {
                    continue;
                }

                if (!upbill_type.trim().equals("5X")) {
                    continue;
                }
                
                //直运安排补货生成委外订单：orderVO.isBuhuo() == true
                if (itemVO[i].getStatus() == 2 || orderVO.isBuhuo()) {//新增行{
                    l_dOldNum[i] = new UFDouble(0);
                    l_dNum[i] = itemVO[i].getNordernum();
                } else if (itemVO[i].getStatus() == 3) {//删除行
                    l_dOldNum[i] = itemVO[i].getNoldnum();
                    l_dNum[i] = new UFDouble(0);
                } else {
                    l_dOldNum[i] = itemVO[i].getNoldnum();
                    l_dNum[i] = itemVO[i].getNordernum();
                }
                //    if (1==1) return;

                l_cbodyid[i] = itemVO[i].getCupsourcebillrowid();

                l_cheadid[i] = itemVO[i].getCupsourcebillid();

                l_dOldAssNum[i] = new UFDouble(0);

                l_dAssNum[i] = new UFDouble(0);

            }

            nc.vo.scm.rewrite.ParaRewriteVO l_ParaRewriteVO = new nc.vo.scm.rewrite.ParaRewriteVO();
            l_ParaRewriteVO.setCBodyIdArray(l_cbodyid);
            l_ParaRewriteVO.setCHeadIdArray(l_cheadid);
            l_ParaRewriteVO.setDAssNumArray(l_dAssNum);
            l_ParaRewriteVO.setDNumArray(l_dNum);
            l_ParaRewriteVO.setDOldAssNumArray(l_dOldAssNum);
            l_ParaRewriteVO.setDOldNumArray(l_dOldNum);
            l_ParaRewriteVO.setPk_corp(pkcorp);
            l_ParaRewriteVO.setOperatorid(coperatorid);
            l_ParaRewriteVO.setTime(new nc.vo.pub.lang.UFTime(System.currentTimeMillis()).toString());

            /*
             nc.bs.to.outer.OuterBO l_OuterBO = new nc.bs.to.outer.OuterBO();
             l_OuterBO.backArrangeToOrder(l_ParaRewriteVO, "61");
             */
//            Object obj = new InterServBO().getInterInstance(ProductCode.PROD_TO, InterRegister.TO0002);
//            if (obj != null) {
//                ((IOuter) obj).backArrangeToOrder(l_ParaRewriteVO, "61");
//
//            }
            IOuter outer = (IOuter)NCLocator.getInstance().lookup(IOuter.class.getName());
            outer.backArrangeToOrder(l_ParaRewriteVO, "61");

        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
        //*///临时注释掉所有回写内容，等相关产品接口都融入V31后放开。2005-04-03 begin
    }

    /**
     * 回写销售订单
     *
     * 创建日期：(2001-6-23)
     * @param order nc.vo.sc.order.OrderVO
     * @exception BusinessException  异常说明。
     */
    public void updateXSDDNum(OrderVO orderVO) throws BusinessException  {
        // /*临时注释掉所有回写内容，等相关产品接口都融入V31后放开。2005-04-03 begin
        try {

            String coperatorid = ((OrderHeaderVO) orderVO.getParentVO()).getCoperator();
            UFDate lufd_orderdate = ((OrderHeaderVO) orderVO.getParentVO()).getDorderdate();
            nc.vo.pub.lang.UFDateTime lufdt_orderdate = new nc.vo.pub.lang.UFDateTime(lufd_orderdate.toString());

            OrderItemVO[] itemVO1 = (OrderItemVO[]) orderVO.getChildrenVO();
            Vector lVec_OrderItemVO = new Vector();

            //2005-06-06 begin
            int num1 = itemVO1.length;

            for (int i = 0; i < num1; i++) {
                String upbill_type = itemVO1[i].getCupsourcebilltype();
                if (upbill_type == null || upbill_type.trim().length() == 0 || !upbill_type.trim().equals("30")) {
                    continue;
                } else {
                    lVec_OrderItemVO.addElement(itemVO1[i]);
                }
            }

            int num = lVec_OrderItemVO.size();
            if (num <= 0)
                return;

            OrderItemVO[] itemVO = new OrderItemVO[num];
            lVec_OrderItemVO.copyInto(itemVO);
            //add 2005-06-06 end

            Object[][] backinfo = new Object[num][5];

            for (int i = 0; i < num; i++) {

                String upbill_type = itemVO[i].getCupsourcebilltype();
                if (upbill_type == null || upbill_type.trim().length() == 0 || !upbill_type.trim().equals("30")) {
                    continue;
                }

                UFDouble nOldNum = itemVO[i].getNoldnum();
                UFDouble nNewNum = itemVO[i].getNordernum();
//              直运安排补货生成委外订单：orderVO.isBuhuo() == true;
                if (itemVO[i].getStatus() == 2 || orderVO.isBuhuo()) {
                    nOldNum = new UFDouble(0);
                    nNewNum = itemVO[i].getNordernum();
                } else if (itemVO[i].getStatus() == 3) {//删除行
                    nOldNum = itemVO[i].getNoldnum();
                    nNewNum = new UFDouble(0);
                } else {
                    nOldNum = itemVO[i].getNoldnum();
                    nNewNum = itemVO[i].getNordernum();
                }

                backinfo[i][0] = itemVO[i].getCupsourcebillrowid();
                backinfo[i][1] = nNewNum.sub(nOldNum);
                backinfo[i][2] = null;
                backinfo[i][3] = null;
                backinfo[i][4] = null;

            }

            /*
             nc.bs.so.so016.BillConvertDMO l_billconvertdmo = new nc.bs.so.so016.BillConvertDMO();
             l_billconvertdmo.writeBackArrangeInfo(backinfo, coperatorid, lufdt_orderdate);
             */
//            Object obj = new InterServBO().getInterInstance(ProductCode.PROD_SO, InterRegister.SO0901);
//            if (obj != null) {
//                ((ISOToPUTO_BillConvertDMO) obj).writeBackArrangeInfo(backinfo, coperatorid, lufdt_orderdate);
//            }
            ISOToPUTO_BillConvertDMO dmo = (ISOToPUTO_BillConvertDMO)NCLocator.getInstance().lookup(ISOToPUTO_BillConvertDMO.class.getName());
            dmo.writeBackArrangeInfo(backinfo, coperatorid, lufdt_orderdate);

        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
        //*///临时注释掉所有回写内容，等相关产品接口都融入V31后放开。2005-04-03 begin
    }

    /**
     * 回写请购单累计订货数量
     *
     * 创建日期：(2001-6-23)
     *
     * @param order
     *            nc.vo.sc.order.OrderVO
     * @exception BusinessException 
     *                异常说明。
     */
    public void updatePrayNum(OrderVO orderVO) throws BusinessException  {
        try {

            //取需要回写的请购单行ID
            Vector vec = new Vector();
            OrderItemVO[] itemVO = (OrderItemVO[]) orderVO.getChildrenVO();
            int num = itemVO.length;
            for (int i = 0; i < num; i++) {
                String upbill_type = itemVO[i].getCupsourcebilltype();

                if (upbill_type != null && upbill_type.length() > 0) {
                    if (upbill_type.equals("20")) {
                        String upbill_bid = itemVO[i].getCupsourcebillrowid();
                        String upbillid = itemVO[i].getCupsourcebillid();
                        if (upbill_bid == null || upbill_bid.trim().equals(""))
                            continue;
                        vec.addElement(upbill_bid);
                        vec.addElement(upbillid);
                    }
                }

            }
            if (vec == null || vec.size() == 0)
                return;
            //
            //nc.bs.pr.pray.PraybillBO pray = new nc.bs.pr.pray.PraybillBO();

            //回写请购单
            Vector lvec_ParVO = new Vector();
            for (int i = 0; i < num; i++) {
                String upbill_bid = itemVO[i].getCupsourcebillrowid();
                String corder_bid = itemVO[i].getCorder_bid();
                if (upbill_bid == null || upbill_bid.trim().equals(""))
                    continue;
                UFDouble nOldNum = itemVO[i].getNoldnum();
                if (nOldNum == null)
                    nOldNum = new UFDouble(0);
                if (itemVO[i].getStatus() == 1) {
                    if (corder_bid == null || corder_bid.trim().length() == 0)
                        nOldNum = new UFDouble(0); //新增行处理
                    else {
                        boolean b = false;
                        for (int j = 0; j < num; j++) {
                            String s = itemVO[j].getCupsourcebillrowid();
                            if (i != j && s != null && s.trim().length() > 0 && s.equals(upbill_bid)) {
                                b = true;
                                break;
                            }
                        }
                        if (b)
                            nOldNum = new UFDouble(0); //粘贴行处理
                    }
                }
                UFDouble nNewNum = itemVO[i].getNordernum();
                if (nNewNum == null)
                    nNewNum = new UFDouble(0);
                if (itemVO[i].getStatus() == 3)
                    nNewNum = new UFDouble(0); //删除行处理
                //pray.updateAccumulateNum(upbill_bid, nOldNum, nNewNum,
                // ((OrderHeaderVO)orderVO.getParentVO()).getPk_corp());
                nc.vo.scm.pu.ParaVO21WriteNumTo20 l_ParVOTemp = new nc.vo.scm.pu.ParaVO21WriteNumTo20();
                l_ParVOTemp.setRowbid(upbill_bid);
                l_ParVOTemp.setNumNew(nNewNum);
                l_ParVOTemp.setNumOld(nOldNum);
                
                //判断如果是新增保存，传表体ts；否则不传  add by hanbin 2009-11-25
                if(itemVO[i].getStatus() == VOStatus.NEW){
                  l_ParVOTemp.setStrTS(itemVO[i].getCupsourcebts());
                }
                l_ParVOTemp.setPkCorp(((OrderHeaderVO) orderVO.getParentVO()).getPk_corp());
                if(orderVO.getUserConfirmFlag() != null) l_ParVOTemp.setUserConfirm(orderVO.getUserConfirmFlag().booleanValue());
                lvec_ParVO.addElement(l_ParVOTemp);
            }
            
            nc.vo.scm.pu.ParaVO21WriteNumTo20 l_aryParVO[] = new nc.vo.scm.pu.ParaVO21WriteNumTo20[lvec_ParVO.size()];
            lvec_ParVO.copyInto(l_aryParVO);

            IPuToSc_PraybillBO pray = (IPuToSc_PraybillBO) NCLocator.getInstance().lookup(IPuToSc_PraybillBO.class.getName());
            pray.updateAccumNumFrmSc(l_aryParVO);
            //pray.updateAccumNumFrmSc(l_aryParVO);

        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
    }

    public void updateCTNum(OrderVO orderVO, OrderVO oldorderVO) throws BusinessException  {
        try {

            //合同是否启用
            boolean isCTEnable = false;
            nc.bs.sm.createcorp.CreatecorpDMO cDmo = new nc.bs.sm.createcorp.CreatecorpDMO();
            String pk_corp = ((OrderHeaderVO) orderVO.getParentVO()).getPk_corp();
          //回写合同时务必给当前操作员赋值，否则合同加锁会失败，回写失败
          String sOperatorId = ((OrderHeaderVO) orderVO.getParentVO()).getCoperator();
            isCTEnable = cDmo.isEnabled(pk_corp, "CT");

            if (!isCTEnable) {
                return;
            }

            //取需要回写的合同行ID
            //Vector vec = new Vector();
            Hashtable lHTB_RowNoAndCntRowID = new Hashtable();
            Hashtable lHTB_RowNoAndRelateCnt = new Hashtable();//是否关联合同行
            OrderItemVO[] itemVO = (OrderItemVO[]) orderVO.getChildrenVO();
            OrderItemVO[] olditemVO = null;
            if (oldorderVO != null) {
                olditemVO = (OrderItemVO[]) oldorderVO.getChildrenVO();
            }

            int num = itemVO.length;
            //            for (int i = 0; i < num; i++) {
            //                String upbill_type = itemVO[i].getCupsourcebilltype();
            //                if (upbill_type != null && upbill_type.length() > 0) {
            //                    if (upbill_type.equals("Z1") || upbill_type.equals("Z2")) {
            //                        String upbill_bid = itemVO[i].getCupsourcebillrowid();
            //                        String upbillid = itemVO[i].getCupsourcebillid();
            //                        if (upbill_bid == null || upbill_bid.trim().equals(""))
            //                            continue;
            //                        vec.addElement(upbill_bid);
            //                        vec.addElement(upbillid);
            //                    }
            //                }
            //
            //            }

            for (int i = 0; i < num; i++) {
                String upbill_type = itemVO[i].getCupsourcebilltype();
                String lStr_ContractRowId = itemVO[i].getCcontractrowid();
                if (upbill_type != null && upbill_type.length() > 0 && ((upbill_type.equals("Z1") || upbill_type.equals("Z2")))) {
                    String upbill_bid = itemVO[i].getCupsourcebillrowid();
                    //String upbillid = itemVO[i].getCupsourcebillid();
                    if (upbill_bid == null || upbill_bid.trim().equals(""))
                        continue;
                    lHTB_RowNoAndCntRowID.put(String.valueOf(i), upbill_bid);
                    lHTB_RowNoAndRelateCnt.put(String.valueOf(i), new Boolean(false));
                } else {//关联合同的行
                    if (lStr_ContractRowId != null && lStr_ContractRowId.length() > 0) {
                        lHTB_RowNoAndCntRowID.put(String.valueOf(i), lStr_ContractRowId);
                        lHTB_RowNoAndRelateCnt.put(String.valueOf(i), new Boolean(true));
                    }
                }

            }
            
            if (lHTB_RowNoAndCntRowID == null || lHTB_RowNoAndCntRowID.size() == 0){
                Hashtable lHTB_OldRowNoAndCntRowID = new Hashtable();
                Hashtable lHTB_OldRowNoAndRelateCnt = new Hashtable();//是否关联合同行
                
                int numofold = 0;
                
                if (olditemVO != null){
                    numofold = olditemVO.length;
                }
                
                for (int i = 0; i < numofold; i++) {
                    String upbill_type = olditemVO[i].getCupsourcebilltype();
                    String lStr_ContractRowId = olditemVO[i].getCcontractrowid();
                    if (upbill_type != null && upbill_type.length() > 0 && ((upbill_type.equals("Z1") || upbill_type.equals("Z2")))) {
                        String upbill_bid = olditemVO[i].getCupsourcebillrowid();
                        //String upbillid = olditemVO[i].getCupsourcebillid();
                        if (upbill_bid == null || upbill_bid.trim().equals(""))
                            continue;
                        lHTB_OldRowNoAndCntRowID.put(String.valueOf(i), upbill_bid);
                        lHTB_OldRowNoAndRelateCnt.put(String.valueOf(i), new Boolean(false));
                    } else {//关联合同的行
                        if (lStr_ContractRowId != null && lStr_ContractRowId.length() > 0) {
                            lHTB_OldRowNoAndCntRowID.put(String.valueOf(i), lStr_ContractRowId);
                            lHTB_OldRowNoAndRelateCnt.put(String.valueOf(i), new Boolean(true));
                        }
                    }

                }
                
                if (lHTB_OldRowNoAndCntRowID == null || lHTB_OldRowNoAndCntRowID.size() == 0)
                    return;
            }
            

            
            //
            //PurBackToCtBO purbacktoctbo = new PurBackToCtBO();

            //回写合同
            Vector lvec_ParVO = new Vector();
            for (int i = 0; i < num; i++) {
                String corder_bid = itemVO[i].getCorder_bid();
                

                if (lHTB_RowNoAndRelateCnt != null && lHTB_RowNoAndRelateCnt.size() != 0 && lHTB_RowNoAndRelateCnt.get(String.valueOf(i)) != null && !((Boolean) lHTB_RowNoAndRelateCnt.get(String.valueOf(i))).booleanValue()) {//直接来源于合同时
                    
                    Object lObj_ContractRowId = lHTB_RowNoAndCntRowID.get(String.valueOf(i));
                    if (lObj_ContractRowId == null || lObj_ContractRowId.toString().trim().length() == 0) {
                        continue;//如果不需要回写
                    }

                    String lStr_ContractRowId = lObj_ContractRowId.toString().trim();
                    
                    //处理 新旧 num
                    UFDouble nOldNum = itemVO[i].getNoldnum();
                    if (nOldNum == null)
                        nOldNum = new UFDouble(0);
                    if (itemVO[i].getStatus() == 2) {
                        if (corder_bid == null || corder_bid.trim().length() == 0)
                            nOldNum = new UFDouble(0); //新增行处理
                        else {//直接来源于合同时的粘贴行处理，由于粘贴行时，会把corder_bid设置为null,所以正常情况下，代码实际走不到这里
                            boolean b = false;
                            for (int j = 0; j < num; j++) {
                                String s = itemVO[j].getCupsourcebillrowid();
                                if (i != j && s != null && s.trim().length() > 0 && s.equals(lStr_ContractRowId)) {
                                    b = true;
                                    break;
                                }
                            }
                            if (b)
                                nOldNum = new UFDouble(0); //粘贴行处理

                        }
                    }

                    UFDouble nNewNum = itemVO[i].getNordernum();
                    if (nNewNum == null)
                        nNewNum = new UFDouble(0);
                    if (itemVO[i].getStatus() == 3)
                        nNewNum = new UFDouble(0); //删除行处理

                    //处理 新旧 summny yye
                    UFDouble nOldsummny = new UFDouble(0);

                    UFDouble nNewsummny = new UFDouble(0);

                    if (itemVO[i].getStatus() == 2) {//新增行
                        if (corder_bid == null || corder_bid.trim().length() == 0) {
                            nOldsummny = new UFDouble(0);
                        } else {
                            //修改或删除时，在old VO中找对应summny
                            String ls_bill_bid = itemVO[i].getCorder_bid();
                            int li_temp = 0;
                            boolean lb_find = false;
                            if (olditemVO != null) {
                                for (int j = 0; j < olditemVO.length; i++) {
                                    if (itemVO[i].getCorder_bid().equals(ls_bill_bid)) {
                                        li_temp = j;
                                        lb_find = true;
                                        break;
                                    }
                                }

                                if (lb_find) {
                                    nOldsummny = olditemVO[li_temp].getNsummny();
                                    if (nOldsummny == null)
                                        nOldsummny = new UFDouble(0);
                                } else {
                                    nOldsummny = new UFDouble(0);
                                }
                            } else {
                                nOldsummny = new UFDouble(0);
                            }

                        }
                        nNewsummny = itemVO[i].getNsummny();
                        if (nNewsummny == null)
                            nNewsummny = new UFDouble(0);

                    } else {//当为修改行或删除行时

                        if (itemVO[i].getStatus() == 1) {//修改行

                            nNewsummny = itemVO[i].getNsummny();
                            if (nNewsummny == null)
                                nNewsummny = new UFDouble(0);

                        } else if (itemVO[i].getStatus() == 3) {//删除行

                            nNewsummny = new UFDouble(0);
                        }

                        //修改或删除时，在old VO中找对应summny
                        String ls_bill_bid = itemVO[i].getCorder_bid();
                        int li_temp = 0;
                        boolean lb_find = false;
                        if (olditemVO != null) {
                            for (int j = 0; j < olditemVO.length; i++) {
                                if (itemVO[i].getCorder_bid().equals(ls_bill_bid)) {
                                    li_temp = j;
                                    lb_find = true;
                                    break;
                                }
                            }

                            if (lb_find) {
                                nOldsummny = olditemVO[li_temp].getNsummny();
                                if (nOldsummny == null)
                                    nOldsummny = new UFDouble(0);
                            } else {
                                nOldsummny = new UFDouble(0);
                            }
                        } else {
                            nOldsummny = new UFDouble(0);
                        }

                    }

                    ///////////////////////
                    //pray.updateAccumulateNum(upbill_bid, nOldNum, nNewNum,
                    // ((OrderHeaderVO)orderVO.getParentVO()).getPk_corp());
                    ParaPoToCtRewriteVO l_ParVOTemp = new ParaPoToCtRewriteVO();

                    //l_ParVOTemp.setFirstTime(new UFBoolean(true)) ;
                    l_ParVOTemp.setCContractRowID(lStr_ContractRowId);
                    l_ParVOTemp.setDNum(nNewNum.sub(nOldNum));
                    l_ParVOTemp.setDSummny(nNewsummny.sub(nOldsummny));
                    
                    l_ParVOTemp.setCorpId(orderVO.getParentVO() == null ? null : ((OrderHeaderVO)orderVO.getParentVO()).getPk_corp());//add for v5
                    l_ParVOTemp.setBillDate(orderVO.getParentVO() == null ? null : ((OrderHeaderVO)orderVO.getParentVO()).getDorderdate());//add for v5
                    l_ParVOTemp.setOperatorID(sOperatorId);

                    l_ParVOTemp.setM_cOrderCode(itemVO[i].getCrowno());//add by hanbin 2009-11-5 原因：添加委外订单行的行号
                    
                    lvec_ParVO.addElement(l_ParVOTemp);
                } else {//关联合同时的回写控制，由于历史原因，关联和直接来源合同的回写代码结构分开
                    
                    String lStr_ContractRowId = itemVO[i].getCcontractrowid();
                    
                    
                    UFDouble lUFD_OldNum = itemVO[i].getNoldnum();
                    UFDouble lUFD_NewNum = itemVO[i].getNordernum();
                    UFDouble lUFD_Oldsummny = new UFDouble(0);
                    UFDouble lUFD_Newsummny = new UFDouble(0);
                    
                    if (lUFD_OldNum == null){
                        lUFD_OldNum = new UFDouble(0);
                    }
                    
                    if (lUFD_NewNum == null){
                        lUFD_NewNum = new UFDouble(0);
                    }
                    
                    //情况一：新增行
                    if (itemVO[i].getStatus() == 2) {
//                        if (corder_bid == null || corder_bid.trim().length() == 0){//新增行处理 保存后已经有表体ID
                            lUFD_OldNum = new UFDouble(0); 
                            lUFD_Oldsummny = new UFDouble(0);
                            
                            lUFD_NewNum = itemVO[i].getNordernum();
                            lUFD_Newsummny = itemVO[i].getNsummny();
                            
                            if (lUFD_NewNum == null)
                                lUFD_NewNum = new UFDouble(0);
                            
                            if (lUFD_Newsummny == null)
                                lUFD_Newsummny = new UFDouble(0);
//                        }
                    }
                    
//                    if (1==1) return;
                    if (itemVO[i].getStatus() == 1 || itemVO[i].getStatus() == 3){
                        
                        //修改或删除行时，首先找到对应的OldItemVO
                        String ls_bill_bid = itemVO[i].getCorder_bid();
                        int li_temp = 0;
                        boolean lb_find = false;
                        if (olditemVO != null) {
                            for (int j = 0; j < olditemVO.length; j++) {
                                if (olditemVO[j].getCorder_bid().equals(ls_bill_bid)) {
                                    li_temp = j;
                                    lb_find = true;
                                    break;
                                }
                            }

                            if (lb_find) {
                                if (olditemVO[li_temp].getCcontractrowid() == null || olditemVO[li_temp].getCcontractrowid().trim().length() ==0){
                                    //原先不关联合同
                                    lUFD_OldNum = new UFDouble(0);
                                    lUFD_Oldsummny =  new UFDouble(0);
                                }else{//原先就关联合同
                                    lUFD_OldNum = olditemVO[li_temp].getNordernum();
                                    lUFD_Oldsummny =  olditemVO[li_temp].getNsummny();
                                    
                                    if (lUFD_OldNum == null){
                                        lUFD_OldNum = new UFDouble(0);
                                    }
                                    
                                    if (lUFD_Oldsummny == null){
                                        lUFD_Oldsummny = new UFDouble(0);
                                    }
                                }
                                
                            } else {
                                lUFD_OldNum = new UFDouble(0);
                                lUFD_Oldsummny =  new UFDouble(0);
                            }
                        } else {
                            lUFD_OldNum = new UFDouble(0);
                            lUFD_Oldsummny =  new UFDouble(0);
                        }
                        
                        //情况二：修改行
                        if (itemVO[i].getStatus() == 1){   
                            lUFD_NewNum = itemVO[i].getNordernum();
                            lUFD_Newsummny = itemVO[i].getNsummny(); 
                            
                            if (lUFD_NewNum == null)
                                lUFD_NewNum = new UFDouble(0);
                            
                            if (lUFD_Newsummny == null)
                                lUFD_Newsummny = new UFDouble(0);
                            
                            //如果原先就关联合同，但是改关联为另一个合同，则需要额外针对取消旧关联合同回写一次
                            if (olditemVO != null && olditemVO[li_temp] != null){
                              String lStr_OldContractRowId = olditemVO[li_temp].getCcontractrowid();
                              if (lStr_OldContractRowId != null ){
                                  
                                  ParaPoToCtRewriteVO l_ParVOTemp = new ParaPoToCtRewriteVO();
                                  l_ParVOTemp.setCContractRowID(lStr_OldContractRowId);
                                  l_ParVOTemp.setDNum(new UFDouble(0).sub(lUFD_OldNum));
                                  l_ParVOTemp.setDSummny(new UFDouble(0).sub(lUFD_Oldsummny));
                                  
                                  l_ParVOTemp.setCorpId(orderVO.getParentVO() == null ? null : ((OrderHeaderVO)orderVO.getParentVO()).getPk_corp());//add for v5
                                  l_ParVOTemp.setBillDate(orderVO.getParentVO() == null ? null : ((OrderHeaderVO)orderVO.getParentVO()).getDorderdate());//add for v5

                                  l_ParVOTemp.setM_cOrderCode(olditemVO[li_temp].getCrowno());//add by hanbin 2009-11-5 原因：添加委外订单行的行号
                                  lvec_ParVO.addElement(l_ParVOTemp);
                                  
                                  //然后再变成new UFDouble(0)
                                  lUFD_OldNum = new UFDouble(0);
                                  lUFD_Oldsummny =  new UFDouble(0);
                              }
                            }
                        }
                        
                       //情况三：删除行
                        if (itemVO[i].getStatus() == 3){
                            lUFD_NewNum = new UFDouble(0);
                            lUFD_Newsummny = new UFDouble(0);
                        }
                    }
                    
                    if (lStr_ContractRowId != null && lStr_ContractRowId.trim().length() > 0){
                        ParaPoToCtRewriteVO l_ParVOTemp = new ParaPoToCtRewriteVO();
                        l_ParVOTemp.setCContractRowID(lStr_ContractRowId);
                        l_ParVOTemp.setDNum(lUFD_NewNum.sub(lUFD_OldNum));
                        l_ParVOTemp.setDSummny(lUFD_Newsummny.sub(lUFD_Oldsummny));
                        
                        l_ParVOTemp.setCorpId(orderVO.getParentVO() == null ? null : ((OrderHeaderVO)orderVO.getParentVO()).getPk_corp());//add for v5
                        l_ParVOTemp.setBillDate(orderVO.getParentVO() == null ? null : ((OrderHeaderVO)orderVO.getParentVO()).getDorderdate());//add for v5
                        l_ParVOTemp.setOperatorID(sOperatorId);//add for v5

                        l_ParVOTemp.setM_cOrderCode(itemVO[i].getCrowno());//add by hanbin 2009-11-5 原因：添加委外订单行的行号
                        
                        lvec_ParVO.addElement(l_ParVOTemp);
                    }
                    

                }

            }
            
            /*/old code for V31
            l_aryParVO = new ParaPoToCtRewriteVO[lvec_ParVO.size()];
            lvec_ParVO.copyInto(l_aryParVO);
            Object obj = new InterServBO().getInterInstance(ProductCode.PROD_CT, InterRegister.CT0001);
            if (obj != null) {
                ((ICtToPo_BackToCtBO) obj).writeBackAccuOrdData(l_aryParVO);

            }
            //purbacktoctbo.writeBackAccuOrdData(l_aryParVO);
             */
            
            //New code for V5
            ParaPoToCtRewriteVO[] l_aryParVO = new ParaPoToCtRewriteVO[lvec_ParVO.size()];
            lvec_ParVO.copyInto(l_aryParVO);
            ICtToPo_BackToCt rewriteBackToCt = null;
            rewriteBackToCt = (ICtToPo_BackToCt) NCLocator.getInstance().lookup(ICtToPo_BackToCt.class.getName());
        if(rewriteBackToCt != null){
          rewriteBackToCt.writeBackAccuOrdData(l_aryParVO);
        }

        } catch (Exception e) {
          PublicDMO.throwBusinessException(e);
        }
    }


  /**
   * 动态执行类调用：委外订单新增保存和修改保存脚本合并
   * 
   * @param:nc.vo.sc.order.OrderVO 保存界面VO
   * @date:2006-12-31
   * @since v5.01
   * @author lxd
   */
  public OrderVO doSave(OrderVO VO) throws BusinessException {
    //检查自定义项
    IScm srv = (IScm) NCLocator.getInstance().lookup(IScm.class.getName());    
    srv.checkDefDataType(VO);
    boolean buhuo = VO.isBuhuo();
    OrderHeaderVO headVO = (OrderHeaderVO) VO.getParentVO();
    String sHeadKey = headVO.getPrimaryKey();
    OrderVO orderVO = new OrderVO();// 返回

    try {

      OrderDMO dmo = new OrderDMO();
      
      //比较上游单据的ts是否一致,只查表头；以及单据状态(请购单)检查
      checkSourceBillWhenSave(VO,dmo);
      
      PublicDMO.validateInv(VO);
      
      if (sHeadKey == null || sHeadKey.length() == 0) {// 新增保存
        orderVO = dmo.insert(VO);
        

        //回写销售定单
        orderVO.setBuhuo(buhuo);
        updateXSDDNum(orderVO);

        //回写调拨定单
        updateDBDDNum(orderVO);

        orderVO.setM_voOld(null);// 查询的旧VO(只针对修改动作)。
        VO.setStatus(VOStatus.NEW);
      } else {// 修改保存
        // 查询旧订单
        nc.vo.sc.order.OrderVO oldVO = null;
        String strBillId = VO.getParentVO() == null ? null : VO.getParentVO().getPrimaryKey();
        if (strBillId != null && !strBillId.trim().equals("")) {
          oldVO = findByPrimaryKeyFroOrder(strBillId);// 查询"修改保存前"的旧VO(只针对修改动作)。
        }
        VO.setM_voOld(oldVO);//V501修改单据时，保存修改前单据VO，以检查单据号是否重复
        orderVO = update(VO);

        orderVO.setM_voOld(oldVO);// "修改保存前"的旧VO,为后面的changeATP等做准备。
        VO.setStatus(VOStatus.UPDATED);
      }
    } catch (BusinessException e) {
      SCMEnv.out(e);
      throw e;
    } catch (Exception e) {
      PublicDMO.throwBusinessException(e);
    }
    return orderVO;
  }
  /**
   * 委外订单新增保存和修改保存脚本合并，由动态执行类调用：回写价格审批单
   * 
   * @param:nc.vo.sc.order.OrderVO VO 需要保存的VO
   * @param:String strBillStatus:需要保存的单据状态，分两种：新增保存、修改保存
   * @return:void
   * @date:2006-12-31
   * @since v5.01
   * @author lxd
   */
  public void reWriteGenOrderNums(OrderVO VO) throws BusinessException {
    if (VO.getStatus() == VOStatus.NEW) {// 新增保存则...
      nc.itf.pp.ask.IAsk iAsk = (nc.itf.pp.ask.IAsk) nc.bs.framework.common.NCLocator.getInstance().lookup(nc.itf.pp.ask.IAsk.class.getName());
      nc.vo.sc.order.OrderItemVO bodyVO[] = (nc.vo.sc.order.OrderItemVO[])VO.getChildrenVO();
      if(bodyVO != null && bodyVO.length > 0){
        java.util.Vector vTemp = new java.util.Vector();
        int intBodyLen = bodyVO.length;
        for(int i = 0; i < intBodyLen; i++){
          if(bodyVO[i].getCpriceaudit_bb1id() != null) vTemp.addElement(bodyVO[i].getCpriceaudit_bb1id());
        }
        if(vTemp.size() > 0){
          String s[] = new String[vTemp.size()];
          vTemp.copyInto(s);
          iAsk.reWriteGenOrderNums(s,null);
        }
      }
//    } else if (VO.getStatus() == VOStatus.UPDATED) {// 修改保存则...
      
    }

}

  

  /**
   * 此方法目前只用于保存时的时间戳(合同)检查：比较上游单据的ts是否一致,只查表头；以及单据状态(请购单)检查
   * <p>
   * <b>examples:</b>
   * <p>
   * 使用示例
   * <p>
   * <b>参数说明</b>
   * @param VO：委外订单VO
   * @param dmo：委外Order的DMO类
   * @throws nc.vo.pub.BusinessException
   * <p>
   * @author lixiaodong
   * @time 2007-4-23 上午09:39:03
   */
  public void checkSourceBillWhenSave(OrderVO VO, OrderDMO dmo)
  throws nc.vo.pub.BusinessException {

    OrderItemVO[] itemVO = (OrderItemVO[]) VO.getChildrenVO();
    int rowCount = itemVO.length;
    String bill_bid = null;
    String strSourceOrderState = null;
    String ts = null;

    try {

      for (int i = 0; i < rowCount; i++) {
        if (PuPubVO.getString_TrimZeroLenAsNull(itemVO[i].getCordersource())!=null && itemVO[i].getStatus()!=nc.vo.pub.VOStatus.DELETED) {
          if (ScmConst.PO_Pray.equalsIgnoreCase(PuPubVO.getString_TrimZeroLenAsNull(itemVO[i].getCordersource()))) {// 来源单据类型
            bill_bid = PuPubVO.getString_TrimZeroLenAsNull(itemVO[i].getCsourcebillid());
            if(bill_bid  == null){
              continue;
            }
            strSourceOrderState = dmo.getPrayState(null, bill_bid);
            if (strSourceOrderState == null || strSourceOrderState.equals("1")) {
              throw new nc.vo.pub.BusinessException("第" + (i + 1)
                  + "行单据已被作废，请重新选择！");
            }
            if (strSourceOrderState.equals("0")
                || strSourceOrderState.equals("4")) {
              throw new nc.vo.pub.BusinessException("第" + (i + 1)
                  + "行单据已被弃审，请重新选择！");
            }
            if (strSourceOrderState.equals("2")) {
              throw new nc.vo.pub.BusinessException("第" + (i + 1)
                  + "行单据正在审核中，请重新选择！");
            }
          }
          else if (ScmConst.CT_PU.equalsIgnoreCase(PuPubVO.getString_TrimZeroLenAsNull(itemVO[i].getCordersource()))) {
            bill_bid = PuPubVO.getString_TrimZeroLenAsNull(itemVO[i].getCupsourcebillid());
            if(bill_bid  == null){
              continue;
            }
            ts = dmo.getCTState(bill_bid);
            if (ts == null || (itemVO[i].getCupsourcehts() != null && !ts.equals(itemVO[i].getCupsourcehts()))) {
              throw new nc.vo.pub.BusinessException(nc.bs.ml.NCLangResOnserver
                  .getInstance().getStrByID("SCMCOMMON", "UPPSCMCommon-000316")/*
                   * @res
                   * "正在进行相关操作，请稍后再试"
                   */);
            }
          }
        }
      }
    }
    catch (SQLException e) {
      // 日志异常
      nc.vo.scm.pub.SCMEnv.out(e);
      //按规范抛出异常
      nc.bs.scm.pub.ScmPubDMO.throwBusinessException(e);
    }
  }
  /**
   * 父类方法重写
   * 
   * @see nc.itf.scm.inter.IArapCodeValid#isCodeValid(java.lang.String,
   *      java.lang.String[]) 功能：判断一组订单号是否有效 参数：String sPk_corp 公司PK String[]
   *      saOrderCodes 订单号数组 返回：boolean 例外：BusinessException
   */
  public boolean isCodeValid(String sPk_corp, String[] saBillCodes) throws BusinessException {
    try {
      OrderDMO dmo = new OrderDMO();
      //如果有异常，则抛出
      dmo.getIdForCode(sPk_corp, saBillCodes);
    }
    catch (Exception e) {
      PublicDMO.throwBusinessException(e);
    }
    return true;
  }
}