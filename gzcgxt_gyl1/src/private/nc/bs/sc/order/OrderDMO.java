/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product.                              *
 \***************************************************************/

package nc.bs.sc.order;


import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Vector;

import nc.bs.dao.BaseDAO;
import nc.bs.framework.common.InvocationInfoProxy;
import nc.bs.framework.common.NCLocator;
import nc.bs.pub.DataManageObject;
import nc.bs.pub.SystemException;
import nc.bs.pub.pf.ICheckState;
import nc.bs.pub.pf.IQueryData;
import nc.bs.pub.pf.IQueryData2;
import nc.bs.sc.ct.ScFromCtImpl;
import nc.bs.sc.pub.PublicDMO;
import nc.bs.sc.pub.SCATP;
import nc.bs.scm.pub.ScmPubDMO;
import nc.bs.scm.pub.TempTableDMO;
import nc.bs.scm.pub.bill.SQLUtil;
import nc.bs.scm.pub.pf.SCMPfPubUtil;
import nc.bs.sm.createcorp.CreatecorpDMO;
import nc.itf.pu.pub.IGetSysBillCode;
import nc.itf.sc.inter.IScToPu_OrderDMO;
import nc.itf.uap.pf.IPFWorkflowQry;
import nc.itf.uap.sf.ICreateCorpQueryService;
import nc.itf.uap.sf.ICreateCorpService;
import nc.itf.uif.pub.IUifService;

import nc.uif.pub.exception.UifException;
import nc.vo.pub.AggregatedValueObject;
import nc.vo.pub.BusinessException;
import nc.vo.pub.CircularlyAccessibleValueObject;
import nc.vo.pub.ProductCode;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pub.util.StringUtil;
import nc.vo.sc.order.NewPraybillItemVO;
import nc.vo.sc.order.OrderBbVO;
import nc.vo.sc.order.OrderDdlbVO;
import nc.vo.sc.order.OrderHeaderVO;
import nc.vo.sc.order.OrderItemVO;
import nc.vo.sc.order.OrderVO;
import nc.vo.sc.pub.BD_ConvertVO;
import nc.vo.sc.pub.RetScVrmAndParaPriceVO;
import nc.vo.sc.pub.SCPubVO;
import nc.vo.sc.pub.ScConstants;
import nc.vo.sc.pub.ScUtils;
import nc.vo.scm.constant.ScmConst;
import nc.vo.scm.ctpo.RetCtToPoQueryVO;
import nc.vo.scm.ic.ATPVO;
import nc.vo.scm.pu.BillStatus;
import nc.vo.scm.pu.PuPubVO;
import nc.vo.scm.pu.RelationsCalVO;
import nc.vo.scm.pub.SCMEnv;
import nc.vo.scm.pub.TempTableVO;


/**
 * Order的DMO类。
 *
 * 创建日期：(2001-6-23)
 * @author：
 */
public class OrderDMO extends DataManageObject implements IQueryData, ICheckState, IQueryData2, IScToPu_OrderDMO, nc.bs.pub.pf.IBackCheckState {
    /**
     * OrderDMO 构造子注解。
     *
     * @exception javax.naming.NamingException 父类构造子抛出的异常。
     * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
     */
    public OrderDMO() throws javax.naming.NamingException, SystemException {
        super();
    }

    /**
     * OrderDMO 构造子注解。
     *
     * @param dbName java.lang.String 在EJB Server中配置的数据库DataSource名称。
     * @exception javax.naming.NamingException 父类构造子抛出的异常。
     * @exception nc.bs.pub.SystemException 父类构造子抛出的异常。
     */
    public OrderDMO(String dbName) throws javax.naming.NamingException, SystemException {
        super(dbName);
    }

    /**
     * 作者：yye
     * 功能：审批订单--驳回
     * 参数：
     *		String billId				单据ID
     *		String approveId			审批人ID
     *		String approveDate			审批日期
     *		String checkNote			批语
     * 返回：void
     * 例外：Exception					一般异常
     * 日期：(2005-05-24 15:39:21)
     * 修改日期，修改人，修改原因，注释标志：
     */
    public void backNoState(String billId, String approveId, String approveDate, String backNote) throws Exception {

        String sql = "update sc_order set ibillstatus = 0, cauditpsn = null, dauditdate = null where corderid = ? and dr = 0";
        Connection con = null;
        PreparedStatement stmt = null;

        try {
            con = getConnection();

            stmt = prepareStatement(con, sql);

            stmt.setString(1, billId);

            executeUpdate(stmt);

            executeBatch(stmt);

        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
    }

    /**
     * 作者：yye
     * 功能：审批订单--逐级弃审(供应链暂不支持)
     * 参数：
     *		String billId				单据ID
     *		String approveId			审批人ID
     *		String approveDate			审批日期
     *		String checkNote			批语
     * 返回：void
     * 例外：Exception					一般异常
     * 日期：(2005-05-24 15:39:21)
     * 修改日期，修改人，修改原因，注释标志：
     */
    public void backGoing(String billId, String approveId, String approveDate, String backNote) throws Exception {
      checkGoing(billId, approveId, approveDate, backNote);
    }

    /**
     * 作者：yye
     * 功能：得到订单根据价格优先规则的相应币种最新价
     * 参数：String cmangids[]			存货管理ID数组
     * 例外：SQLException			SQL异常
     * 日期：
     * 修改日期，修改人，修改原因，注释标志：
     */
    public UFDouble[] getNewPrices(String pk_corp, String saMangId[], String saCurrId[], int iPriorPrice) throws Exception {

        if (saMangId == null || saCurrId == null) {
            return null;
        }

        //价格字段
        String sPriceField = (iPriorPrice == RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE ? "noriginalnetprice" : "norgnettaxprice");

        //创建临时表
        int iLen = saMangId.length;
        ArrayList listTempTableValue = new ArrayList();
        for (int i = 0; i < iLen; i++) {
            if (SCPubVO.getString_TrimZeroLenAsNull(saMangId[i]) == null || SCPubVO.getString_TrimZeroLenAsNull(saCurrId[i]) == null) {
                continue;
            }
            ArrayList listElement = new ArrayList();
            listElement.add(saMangId[i]);
            listElement.add(saCurrId[i]);

            listTempTableValue.add(listElement);
        }
        String sTempTableName = new nc.bs.scm.pub.TempTableDMO().getTempStringTable(nc.vo.scm.pub.TempTableVO.PU_CLMS_PO01, new String[] { "cmangid", "ccurrencytypeid" }, new String[] { "char(20) not null ", "char(20) not null " }, null, listTempTableValue);

        String sSql = "(SELECT sc_order_b.cmangid,sc_order_b.ccurrencytypeid,MAX(sc_order.dorderdate) AS dorderdate";
        sSql += " FROM " + sTempTableName + ",sc_order,sc_order_b";
        sSql += " WHERE " + sTempTableName + ".cmangid=sc_order_b.cmangid ";
        sSql += " AND " + sTempTableName + ".ccurrencytypeid=sc_order_b.ccurrencytypeid ";
        sSql += " AND sc_order.corderid = sc_order_b.corderid";
        sSql += " AND " + "(sc_order.dr=0)";
        sSql += " AND " + "(sc_order_b.dr=0)";
        sSql += " AND  sc_order_b." + sPriceField + " IS NOT NULL";
        sSql += " AND  sc_order_b.pk_corp = '" + pk_corp + "'";
        sSql += " GROUP BY sc_order_b.cmangid,sc_order_b.ccurrencytypeid) A";

        String sSqlMain = "SELECT sc_order_b.cmangid,sc_order_b.ccurrencytypeid,sc_order_b." + sPriceField;
        sSqlMain += " FROM " + sSql + " JOIN sc_order_b ON A.cmangid=sc_order_b.cmangid";
        sSqlMain += " AND A.ccurrencytypeid=sc_order_b.ccurrencytypeid ";
        sSqlMain += " ORDER BY sc_order_b.ts DESC ";

        String sKey = null;
        //结果
        HashMap hmapMangId = new HashMap();
        Connection con = null;
        Statement stmt = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sSqlMain);

            while (rs.next()) {
                sKey = rs.getString(1) + rs.getString(2);

                UFDouble dValue = SCPubVO.getUFDouble_ValueAsValue(rs.getDouble(3));
                if (dValue == null) {
                    hmapMangId.put(sKey, "");
                } else {
                    hmapMangId.put(sKey, dValue);
                }
            }

            //防止Oracle游标超过最大数，关闭rs
            rs.close();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        if (hmapMangId == null) {
            return null;
        }

        //组织返回值
        UFDouble[] daPrice = new UFDouble[iLen];
        for (int i = 0; i < iLen; i++) {
            sKey = saMangId[i] + saCurrId[i];
            daPrice[i] = (UFDouble) hmapMangId.get(sKey);
        }

        return daPrice;
    }

    /**
     * 作者：yye
     * 功能：得到订单根据价格优先规则的相应币种最低价
     * 参数：String saMangId[]			存货管理ID数组
     * 例外：SQLException			SQL异常
     * 日期：(2001-6-23 14:23:21)
     * 修改日期，修改人，修改原因，注释标志：
     */
    public UFDouble[] getLowPrices(String pk_corp, String saMangId[], String saCurrId[], int iPriorPrice) throws Exception {

        String sql = "";
        if ((saMangId == null) || (saCurrId == null)) {
            return null;
        }

        //价格字段
        String sPriceField = (iPriorPrice == RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE ? "noriginalnetprice" : "norgnettaxprice");

        //创建临时表
        int iLen = saMangId.length;
        ArrayList listTempTableValue = new ArrayList();
        for (int i = 0; i < iLen; i++) {
            if (SCPubVO.getString_TrimZeroLenAsNull(saMangId[i]) == null || SCPubVO.getString_TrimZeroLenAsNull(saCurrId[i]) == null) {
                continue;
            }
            ArrayList listElement = new ArrayList();
            listElement.add(saMangId[i]);
            listElement.add(saCurrId[i]);

            listTempTableValue.add(listElement);
        }
        String sTempTableName = new nc.bs.scm.pub.TempTableDMO().getTempStringTable(nc.vo.scm.pub.TempTableVO.PU_CLMS_PO02, new String[] { "cmangid", "ccurrencytypeid" }, new String[] { "char(20) not null ", "char(20) not null " }, null, listTempTableValue);

        sql = "SELECT sc_order_b.cmangid,sc_order_b.ccurrencytypeid,MIN(sc_order_b." + sPriceField + ")";
        sql += " FROM " + SCPubVO.getJoinTableBy2Table(sTempTableName, "cmangid", "sc_order_b", "cmangid");
        sql += " AND " + sTempTableName + ".ccurrencytypeid=sc_order_b.ccurrencytypeid";
        sql += " WHERE ";
        sql += "(sc_order_b.dr=0)";
        sql += " AND pk_corp = '" + pk_corp + "' AND " + sPriceField + " IS NOT NULL";
        sql += " GROUP BY sc_order_b.cmangid,sc_order_b.ccurrencytypeid";

        String sKey = null;
        //结果
        HashMap hmapMangId = new HashMap();
        Connection con = null;
        Statement stmt = null;
        try {
            con = getConnection();
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()) {
                sKey = rs.getString(1) + rs.getString(2);

                UFDouble dValue = SCPubVO.getUFDouble_ValueAsValue(rs.getDouble(3));
                if (dValue == null) {
                    hmapMangId.put(sKey, "");
                } else {
                    hmapMangId.put(sKey, dValue);
                }
            }

            //防止Oracle游标超过最大数，关闭rs
            rs.close();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        if (hmapMangId == null) {
            return null;
        }

        //组织返回值
        UFDouble[] daPrice = new UFDouble[iLen];
        for (int i = 0; i < iLen; i++) {
            sKey = saMangId[i] + saCurrId[i];
            daPrice[i] = (UFDouble) hmapMangId.get(sKey);
        }

        return daPrice;
    }

    /**
     * 作者：yye
     * 功能：取存货的参考成本
     * 参数：String pk_corp				公司ID
     String sStoOrgId				组织ID
     String saMangId[]			存货管理ID数组
     * 例外：SQLException			SQL异常
     * 日期：(2003-6-23 14:23:21)
     * 修改日期，修改人，修改原因，注释标志：
     */
    public UFDouble[] getCostPrices(String pk_corp, String sStoOrgId, String saMangId[]) throws Exception {

        if (SCPubVO.getString_TrimZeroLenAsNull(pk_corp) == null || SCPubVO.getString_TrimZeroLenAsNull(sStoOrgId) == null || saMangId == null) {
            return null;
        }

        //使用临时表
        String sTempTable = null;
        try {
            sTempTable = new TempTableDMO().getTempTable(saMangId, TempTableVO.TEMPTABLE_SC_00, TempTableVO.TEMPPKFIELD_SC);
        } catch (Exception e) {
            reportException(e);
            throw e;
        }

        String sql = "SELECT ckcb,pk_invmandoc FROM " + SCPubVO.getJoinTableBy2Table(sTempTable, TempTableVO.TEMPPKFIELD_SC, "bd_produce", "pk_invmandoc") + " WHERE pk_corp = ? AND pk_calbody= ? " + " AND ckcb IS NOT NULL";

        HashMap mapRet = new HashMap();

        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, pk_corp);
            stmt.setString(2, sStoOrgId);
            rs = stmt.executeQuery();

            UFDouble dValue = null;
            while (rs.next()) {
                dValue = SCPubVO.getUFDouble_ValueAsValue(rs.getBigDecimal(1));
                if (dValue != null) {
                    mapRet.put(rs.getString(2), dValue);
                }
            }

        } finally {
            //关闭结果集，即时释放资源
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {
            }
            try {
                if (stmt != null)
                    stmt.close();
            } catch (Exception e) {
            }
            try {
                if (con != null)
                    con.close();
            } catch (Exception e) {
            }
        }
        int iLen = saMangId.length;
        UFDouble[] daPrice = new UFDouble[iLen];
        if (mapRet.size() > 0) {
            for (int i = 0; i < iLen; i++) {
                daPrice[i] = (UFDouble) mapRet.get(saMangId[i]);
            }
        }
        return daPrice;
    }

    /**
     *  功能描述:获得参考成本
     *  输入参数:公司主键，存货基础档案ID[]，库存组织Id[]
     *  返回值:Vector,参考成本
     */
    public HashMap queryCostPricesFrmInvman(String pk_corp, String[] sMangIds) throws java.rmi.RemoteException, SQLException {

        //判断参数有效性
        if (sMangIds == null || sMangIds.length == 0)
            return null;

        //构造sql语句
        StringBuffer sbSql = new StringBuffer();
        sbSql.append("select pk_invbasdoc,pk_invmandoc,costprice from bd_invmandoc where pk_invmandoc in ");

        String strIdsSet = "";
        try {
            nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();
            strIdsSet = tmpTblDmo.insertTempTable(sMangIds, nc.vo.scm.pub.TempTableVO.TEMPTABLE_SC_00, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_SC);
            if (strIdsSet == null || strIdsSet.trim().length() == 0)
                strIdsSet = "('TempTableDMOError')";
        } catch (Exception e) {
            throw new SQLException(e.getMessage());
        }
        sbSql.append(strIdsSet + " ");

        sbSql.append(" and pk_corp='");
        sbSql.append(pk_corp);
        sbSql.append("'");

        //存放存货基础档案主键、参考成本值对
        HashMap hResult = new HashMap();

       
        //存货管理档案主键
        String sPk_invMangdoc = null;
        //参考成本
        UFDouble uCostPrice = null;
        //临时变量
        Object oTemp = null;

        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            con = this.getConnection();
            stmt = con.prepareStatement(sbSql.toString());
            rs = stmt.executeQuery();
            while (rs.next()) {
                oTemp = rs.getObject("pk_invmandoc");
                if (oTemp != null)
                    sPk_invMangdoc = oTemp.toString();
                else
                    continue;
                oTemp = rs.getObject("costprice");
                if (oTemp == null || oTemp.toString().trim().equals(""))
                    uCostPrice = new UFDouble(0);
                else
                    uCostPrice = new UFDouble(oTemp.toString());
                hResult.put(sPk_invMangdoc, uCostPrice);
            }
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (Exception e) {
            }
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        return hResult;
    }

    /**
     * 作者：yye
     * 功能：取存货的计划价
     * 参数：String pk_corp				公司ID
     String sStoOrgId				组织ID
     String saMangId[]			存货管理ID数组
     * 例外：SQLException			SQL异常
     * 日期：(2003-6-23 14:23:21)
     * 修改日期，修改人，修改原因，注释标志：
     */
    public UFDouble[] getPlanPrices(String pk_corp, String sStoOrgId, String[] saMangId) throws Exception {

        if (SCPubVO.getString_TrimZeroLenAsNull(pk_corp) == null || SCPubVO.getString_TrimZeroLenAsNull(sStoOrgId) == null || saMangId == null) {
            return null;
        }

        //使用临时表
        String sTempTable = null;
        try {
            sTempTable = new TempTableDMO().getTempTable(saMangId, TempTableVO.TEMPTABLE_SC_00, TempTableVO.TEMPPKFIELD_SC);
        } catch (Exception e) {
            reportException(e);
            throw e;
        }
        String sql = "SELECT jhj,pk_invmandoc FROM " + SCPubVO.getJoinTableBy2Table(sTempTable, TempTableVO.TEMPPKFIELD_SC, "bd_produce", "pk_invmandoc") + " WHERE pk_corp = ? AND pk_calbody= ? " + " AND jhj IS NOT NULL";

        HashMap mapRet = new HashMap();

        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, pk_corp);
            stmt.setString(2, sStoOrgId);
            rs = stmt.executeQuery();

            UFDouble dValue = null;
            while (rs.next()) {
                dValue = SCPubVO.getUFDouble_ValueAsValue(rs.getBigDecimal(1));
                if (dValue != null) {
                    mapRet.put(rs.getString(2), dValue);
                }
            }

        } finally {
            //关闭结果集，即时释放资源
            try {
                if (rs != null)
                    rs.close();
            } catch (Exception e) {
            }
            try {
                if (stmt != null)
                    stmt.close();
            } catch (Exception e) {
            }
            try {
                if (con != null)
                    con.close();
            } catch (Exception e) {
            }
        }
        int iLen = saMangId.length;
        UFDouble[] daPrice = new UFDouble[iLen];
        if (mapRet.size() > 0) {
            for (int i = 0; i < iLen; i++) {
                daPrice[i] = (UFDouble) mapRet.get(saMangId[i]);
            }
        }
        return daPrice;
    }

    /**
     * 作者:yye
     * 功能描述:从存货管理档案获取计划价
     * 输入参数:存货基础档案ID，公司Id
     * 返回值:计划价格
     * 异常处理:SQLException
     * 日期:
     * 修改日期:
     * @return nc.vo.pub.lang.UFDouble
     */
    public HashMap queryPlanPricesFrmInvMan(String sMangIds[], String sCorpId) throws SQLException {
        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.pr.pray.PraybillDMO", "getPlanPriceForPr", new Object[] { sMangIds, sCorpId });
        /*************************************************************/
        //判断参数有效性
        if (sMangIds == null || sMangIds.length == 0)
            return null;
        //构造sql语句
        StringBuffer sbSql = new StringBuffer();
        sbSql.append("select pk_invbasdoc,pk_invmandoc,planprice from bd_invmandoc where pk_invmandoc in ");

        String strIdsSet = "";
        try {
            nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();
            strIdsSet = tmpTblDmo.insertTempTable(sMangIds, nc.vo.scm.pub.TempTableVO.TEMPTABLE_SC_00, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_SC);
            if (strIdsSet == null || strIdsSet.trim().length() == 0)
                strIdsSet = "('TempTableDMOError')";
        } catch (Exception e) {
            throw new SQLException(e.getMessage());
        }
        sbSql.append(strIdsSet + " ");

        sbSql.append(" and pk_corp='");
        sbSql.append(sCorpId);
        sbSql.append("'");

        //存放存货基础档案主键、计划价值对
        HashMap hResult = new HashMap();
        //存货管理档案主键
        String sPk_invMangdoc = null;
        //计划价
        UFDouble uPlanPrice = null;
        //临时变量
        Object oTemp = null;
        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            con = this.getConnection();
            stmt = con.prepareStatement(sbSql.toString());
            rs = stmt.executeQuery();
            while (rs.next()) {
                oTemp = rs.getObject("pk_invmandoc");
                if (oTemp != null)
                    sPk_invMangdoc = oTemp.toString();
                else
                    continue;
                oTemp = rs.getObject("planprice");
                if (oTemp != null)
                    uPlanPrice = new UFDouble(oTemp.toString());
                else
                    uPlanPrice = null;
                hResult.put(sPk_invMangdoc, uPlanPrice);
            }
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (Exception e) {
            }
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.pr.pray.PraybillDMO", "getPlanPriceForPr", new Object[] { sMangIds, sCorpId });
        /*************************************************************/

        return hResult;
    }

    /**
     * <p>根据表头的主键查询一个VO。
     * <p>
     * 创建日期：(2001-6-23)
     * @param key ??dbFieldType??
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderVO findByPrimaryKey(String key) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findByPrimaryKey", new Object[] { key });
        /*************************************************************/

        OrderVO vo = new OrderVO();
        //
        OrderHeaderVO header = findHeaderByPrimaryKey(key);
        OrderItemVO[] items = null;
        OrderDdlbVO[] ddlbs = null;//gc
        if (header != null) {
            //items = findItemsForHeader(header.getPrimaryKey());
            items = findItemsAllForHeader(header.getPrimaryKey());
            //gc
            IUifService bo = (IUifService) NCLocator.getInstance().lookup(IUifService.class);
            try {
				ddlbs = (OrderDdlbVO[]) bo.queryByCondition(OrderDdlbVO.class, "corderid='"+header.getPrimaryKey()+"'");
			} catch (UifException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				throw new SQLException(e.getMessage());
			}
        }
        //
        vo.setParentVO(header);
        vo.setChildrenVO(getUnionItem(items));
        vo.setDdlbvos(ddlbs);//gc old

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findByPrimaryKey", new Object[] { key });
        /*************************************************************/

        return vo;
    }

    /**
     * 通过主键查找一个VO对象。
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderHeaderVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderHeaderVO findHeaderByPrimaryKey(String key) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findHeaderByPrimaryKey", new Object[] { key });
        /*************************************************************/
        StringBuffer strbuf = new StringBuffer();
        strbuf.append(" select vordercode, pk_corp, cpurorganization, cwareid, dorderdate,\n ");
        strbuf.append(" cvendorid, caccountbankid, cdeptid, cemployeeid, cbiztype, creciever,\n ");
        strbuf.append(" cgiveinvoicevendor, ctransmodeid, ctermProtocolid, ibillstatus,\n ");
        strbuf.append(" vmemo, caccountyear, coperator,\n ");
        strbuf.append(" vdef1, vdef2, vdef3, vdef4, vdef5,\n ");
        strbuf.append(" vdef6, vdef7, vdef8, vdef9, vdef10 ,\n ");
        strbuf.append(" vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10, pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20 ,\n ");
        strbuf.append(" cvendormangid, cauditpsn, dauditdate,\n ");
        strbuf.append(" ts, iprintcount, tmaketime, taudittime, tlastmaketime \n ");
        strbuf.append(" from sc_order where corderid = ?\n ");

        String sql = strbuf.toString();

        OrderHeaderVO orderHeader = null;
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, key);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                orderHeader = new OrderHeaderVO(key);
                // vordercode :
                String vordercode = rs.getString(1);
                orderHeader.setVordercode(vordercode == null ? null : vordercode.trim());
                // pk_corp :
                String pk_corp = rs.getString(2);
                orderHeader.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                // cpurorganization :
                String cpurorganization = rs.getString(3);
                orderHeader.setCpurorganization(cpurorganization == null ? null : cpurorganization.trim());
                // cwareid :
                String cwareid = rs.getString(4);
                orderHeader.setCwareid(cwareid == null ? null : cwareid.trim());
                // dorderdate :
                String dorderdate = rs.getString(5);
                orderHeader.setDorderdate(dorderdate == null ? null : new UFDate(dorderdate.trim(), false));
                // cvendorid :
                String cvendorid = rs.getString(6);
                orderHeader.setCvendorid(cvendorid == null ? null : cvendorid.trim());
                // caccountbankid :
                String caccountbankid = rs.getString(7);
                orderHeader.setCaccountbankid(caccountbankid == null ? null : caccountbankid.trim());
                // cdeptid :
                String cdeptid = rs.getString(8);
                orderHeader.setCdeptid(cdeptid == null ? null : cdeptid.trim());
                // cemployeeid :
                String cemployeeid = rs.getString(9);
                orderHeader.setCemployeeid(cemployeeid == null ? null : cemployeeid.trim());
                // cbiztype :
                String cbiztype = rs.getString(10);
                orderHeader.setCbiztype(cbiztype == null ? null : cbiztype.trim());
                // creciever :
                String creciever = rs.getString(11);
                orderHeader.setCreciever(creciever == null ? null : creciever.trim());
                // cgiveinvoicevendor :
                String cgiveinvoicevendor = rs.getString(12);
                orderHeader.setCgiveinvoicevendor(cgiveinvoicevendor == null ? null : cgiveinvoicevendor.trim());
                // ctransmodeid :
                String ctransmodeid = rs.getString(13);
                orderHeader.setCtransmodeid(ctransmodeid == null ? null : ctransmodeid.trim());
                // ctermProtocolid :
                String ctermProtocolid = rs.getString(14);
                orderHeader.setCtermProtocolid(ctermProtocolid == null ? null : ctermProtocolid.trim());
                // ibillstatus :
                Integer ibillstatus = (Integer) rs.getObject(15);
                orderHeader.setIbillstatus(ibillstatus == null ? null : ibillstatus);
                // vmemo :
                String vmemo = rs.getString(16);
                orderHeader.setVmemo(vmemo == null ? null : vmemo.trim());
                // caccountyear :
                String caccountyear = rs.getString(17);
                orderHeader.setCaccountyear(caccountyear == null ? null : caccountyear.trim());
                // coperator :
                String coperator = rs.getString(18);
                orderHeader.setCoperator(coperator == null ? null : coperator.trim());
                // vdef1 :
                String vdef1 = rs.getString(19);
                orderHeader.setVdef1(vdef1 == null ? null : vdef1.trim());
                // vdef2 :
                String vdef2 = rs.getString(20);
                orderHeader.setVdef2(vdef2 == null ? null : vdef2.trim());
                // vdef3 :
                String vdef3 = rs.getString(21);
                orderHeader.setVdef3(vdef3 == null ? null : vdef3.trim());
                // vdef4 :
                String vdef4 = rs.getString(22);
                orderHeader.setVdef4(vdef4 == null ? null : vdef4.trim());
                // vdef5 :
                String vdef5 = rs.getString(23);
                orderHeader.setVdef5(vdef5 == null ? null : vdef5.trim());
                // vdef6 :
                String vdef6 = rs.getString(24);
                orderHeader.setVdef6(vdef6 == null ? null : vdef6.trim());
                // vdef7 :
                String vdef7 = rs.getString(25);
                orderHeader.setVdef7(vdef7 == null ? null : vdef7.trim());
                // vdef8 :
                String vdef8 = rs.getString(26);
                orderHeader.setVdef8(vdef8 == null ? null : vdef8.trim());
                // vdef9 :
                String vdef9 = rs.getString(27);
                orderHeader.setVdef9(vdef9 == null ? null : vdef9.trim());
                // vdef10 :
                String vdef10 = rs.getString(28);
                orderHeader.setVdef10(vdef10 == null ? null : vdef10.trim());
                //
                String vdef11 = rs.getString(29);
                orderHeader.setVdef11(vdef11 == null ? null : vdef11.trim());
                //
                String vdef12 = rs.getString(30);
                orderHeader.setVdef12(vdef12 == null ? null : vdef12.trim());
                //
                String vdef13 = rs.getString(31);
                orderHeader.setVdef13(vdef13 == null ? null : vdef13.trim());
                //
                String vdef14 = rs.getString(32);
                orderHeader.setVdef14(vdef14 == null ? null : vdef14.trim());
                //
                String vdef15 = rs.getString(33);
                orderHeader.setVdef15(vdef15 == null ? null : vdef15.trim());
                //
                String vdef16 = rs.getString(34);
                orderHeader.setVdef16(vdef16 == null ? null : vdef16.trim());
                //
                String vdef17 = rs.getString(35);
                orderHeader.setVdef17(vdef17 == null ? null : vdef17.trim());
                //
                String vdef18 = rs.getString(36);
                orderHeader.setVdef18(vdef18 == null ? null : vdef18.trim());
                //
                String vdef19 = rs.getString(37);
                orderHeader.setVdef19(vdef19 == null ? null : vdef19.trim());
                //
                String vdef20 = rs.getString(38);
                orderHeader.setVdef20(vdef20 == null ? null : vdef20.trim());
                //
                String pk_defdoc1 = rs.getString(39);
                orderHeader.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
                //
                String pk_defdoc2 = rs.getString(40);
                orderHeader.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
                //
                String pk_defdoc3 = rs.getString(41);
                orderHeader.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
                //
                String pk_defdoc4 = rs.getString(42);
                orderHeader.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
                //
                String pk_defdoc5 = rs.getString(43);
                orderHeader.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
                //
                String pk_defdoc6 = rs.getString(44);
                orderHeader.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
                //
                String pk_defdoc7 = rs.getString(45);
                orderHeader.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
                //
                String pk_defdoc8 = rs.getString(46);
                orderHeader.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
                //
                String pk_defdoc9 = rs.getString(47);
                orderHeader.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
                //
                String pk_defdoc10 = rs.getString(48);
                orderHeader.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
                //
                String pk_defdoc11 = rs.getString(49);
                orderHeader.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
                //
                String pk_defdoc12 = rs.getString(50);
                orderHeader.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
                //
                String pk_defdoc13 = rs.getString(51);
                orderHeader.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
                //
                String pk_defdoc14 = rs.getString(52);
                orderHeader.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
                //
                String pk_defdoc15 = rs.getString(53);
                orderHeader.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
                //
                String pk_defdoc16 = rs.getString(54);
                orderHeader.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
                //
                String pk_defdoc17 = rs.getString(55);
                orderHeader.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
                //
                String pk_defdoc18 = rs.getString(56);
                orderHeader.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
                //
                String pk_defdoc19 = rs.getString(57);
                orderHeader.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
                //
                String pk_defdoc20 = rs.getString(58);
                orderHeader.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());

                //cvendormangid
                String cvendormangid = rs.getString(59);
                orderHeader.setCvendormangid(cvendormangid == null ? null : cvendormangid.trim());
                // cauditpsn :
                String cauditpsn = rs.getString(60);
                orderHeader.setCauditpsn(cauditpsn == null ? null : cauditpsn.trim());
                // dauditdate :
                String dauditdate = rs.getString(61);
                orderHeader.setDauditdate(dauditdate == null ? null : new UFDate(dauditdate.trim(), false));
                // ts :
                String ts = rs.getString(62);
                orderHeader.setTs(ts == null ? null : ts.trim());
                // iprintcount :
                Integer iprintcount = (Integer) rs.getObject(63);
                orderHeader.setIprintcount(iprintcount == null ? null : iprintcount);
                
                String tmaketime = rs.getString(64);
                orderHeader.setTmaketime(tmaketime == null ? null : tmaketime.trim());
                String taudittime = rs.getString(65);
                orderHeader.setTaudittime(taudittime == null ? null : taudittime.trim());
                String tlastmaketime = rs.getString(66);
                orderHeader.setTlastmaketime(tlastmaketime == null ? null : tlastmaketime.trim());

            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findHeaderByPrimaryKey", new Object[] { key });
        /*************************************************************/

        return orderHeader;
    }

    /**
     * 通过主键查找一个VO对象。
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderItemVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderItemVO findItemByPrimaryKey(String key) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findItemByPrimaryKey", new Object[] { key });
        /*************************************************************/

        String sql = "select corderid, pk_corp, cmangid, cbaseid, nordernum, cassistunit, nassistnum, ndiscountrate, idiscounttaxtype, ntaxrate, ccurrencytypeid, noriginalnetprice, noriginalcurprice, noriginalcurmny, noriginaltaxmny, noriginalsummny, nexchangeotobrate, ntaxmny, nmoney, nsummny, naccumarrvnum, naccumstorenum, naccuminvoicenum, naccumwastnum, dplanarrvdate, cwarehouseid, creceiveaddress, cprojectid, cprojectphaseid, coperator, forderrowstatus, bisactive, cordersource, csourcebillid, csourcebillrow, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid, vmemo, vfree1, vfree2, vfree3, vfree4, vfree5, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10, pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20, ts, crowno, norgtaxprice, norgnettaxprice，vproducenum,ccontractid,ccontractrowid,ccontractrcode,vpriceauditcode,cpriceauditid,cpriceaudit_bid,cpriceaudit_bb1id from sc_order_b where corder_bid = ?";/*-=notranslate=-*/

        OrderItemVO orderItem = null;
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, key);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                orderItem = new OrderItemVO(key);
                // corderid :
                String corderid = rs.getString(1);
                orderItem.setCorderid(corderid == null ? null : corderid.trim());
                // pk_corp :
                String pk_corp = rs.getString(2);
                orderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                // cmangid :
                String cmangid = rs.getString(3);
                orderItem.setCmangid(cmangid == null ? null : cmangid.trim());
                // cbaseid :
                String cbaseid = rs.getString(4);
                orderItem.setCbaseid(cbaseid == null ? null : cbaseid.trim());
                // nordernum :
                BigDecimal nordernum = rs.getBigDecimal(5);
                orderItem.setNordernum(nordernum == null ? null : new UFDouble(nordernum));
                // cassistunit :
                String cassistunit = rs.getString(6);
                orderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
                // nassistnum :
                BigDecimal nassistnum = rs.getBigDecimal(7);
                orderItem.setNassistnum(nassistnum == null ? null : new UFDouble(nassistnum));
                // ndiscountrate :
                BigDecimal ndiscountrate = rs.getBigDecimal(8);
                orderItem.setNdiscountrate(ndiscountrate == null ? null : new UFDouble(ndiscountrate));
                // idiscounttaxtype :
                Integer idiscounttaxtype = (Integer) rs.getObject(9);
                orderItem.setIdiscounttaxtype(idiscounttaxtype == null ? null : idiscounttaxtype);
                // ntaxrate :
                BigDecimal ntaxrate = rs.getBigDecimal(10);
                orderItem.setNtaxrate(ntaxrate == null ? null : new UFDouble(ntaxrate));
                // ccurrencytypeid :
                String ccurrencytypeid = rs.getString(11);
                orderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
                // noriginalnetprice :
                BigDecimal noriginalnetprice = rs.getBigDecimal(12);
                orderItem.setNoriginalnetprice(noriginalnetprice == null ? null : new UFDouble(noriginalnetprice));
                // noriginalcurprice :
                BigDecimal noriginalcurprice = rs.getBigDecimal(13);
                orderItem.setNoriginalcurprice(noriginalcurprice == null ? null : new UFDouble(noriginalcurprice));
                // noriginalcurmny :
                BigDecimal noriginalcurmny = rs.getBigDecimal(14);
                orderItem.setNoriginalcurmny(noriginalcurmny == null ? null : new UFDouble(noriginalcurmny));
                // noriginaltaxmny :
                BigDecimal noriginaltaxmny = rs.getBigDecimal(15);
                orderItem.setNoriginaltaxmny(noriginaltaxmny == null ? null : new UFDouble(noriginaltaxmny));
                // noriginalsummny :
                BigDecimal noriginalsummny = rs.getBigDecimal(16);
                orderItem.setNoriginalsummny(noriginalsummny == null ? null : new UFDouble(noriginalsummny));
                // nexchangeotobrate :
                BigDecimal nexchangeotobrate = rs.getBigDecimal(17);
                orderItem.setNexchangeotobrate(nexchangeotobrate == null ? null : new UFDouble(nexchangeotobrate));
                // ntaxmny :
                BigDecimal ntaxmny = rs.getBigDecimal(18);
                orderItem.setNtaxmny(ntaxmny == null ? null : new UFDouble(ntaxmny));
                // nmoney :
                BigDecimal nmoney = rs.getBigDecimal(19);
                orderItem.setNmoney(nmoney == null ? null : new UFDouble(nmoney));
                // nsummny :
                BigDecimal nsummny = rs.getBigDecimal(20);
                orderItem.setNsummny(nsummny == null ? null : new UFDouble(nsummny));
                // naccumarrvnum :
                BigDecimal naccumarrvnum = rs.getBigDecimal(21);
                orderItem.setNaccumarrvnum(naccumarrvnum == null ? null : new UFDouble(naccumarrvnum));
                // naccumstorenum :
                BigDecimal naccumstorenum = rs.getBigDecimal(22);
                orderItem.setNaccumstorenum(naccumstorenum == null ? null : new UFDouble(naccumstorenum));
                // naccuminvoicenum :
                BigDecimal naccuminvoicenum = rs.getBigDecimal(23);
                orderItem.setNaccuminvoicenum(naccuminvoicenum == null ? null : new UFDouble(naccuminvoicenum));
                // naccumwastnum :
                BigDecimal naccumwastnum = rs.getBigDecimal(24);
                orderItem.setNaccumwastnum(naccumwastnum == null ? null : new UFDouble(naccumwastnum));
                // dplanarrvdate :
                String dplanarrvdate = rs.getString(25);
                orderItem.setDplanarrvdate(dplanarrvdate == null ? null : new UFDate(dplanarrvdate.trim(), false));
                // cwarehouseid :
                String cwarehouseid = rs.getString(26);
                orderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
                // creceiveaddress :
                String creceiveaddress = rs.getString(27);
                orderItem.setCreceiveaddress(creceiveaddress == null ? null : creceiveaddress.trim());
                // cprojectid :
                String cprojectid = rs.getString(28);
                orderItem.setCprojectid(cprojectid == null ? null : cprojectid.trim());
                // cprojectphaseid :
                String cprojectphaseid = rs.getString(29);
                orderItem.setCprojectphaseid(cprojectphaseid == null ? null : cprojectphaseid.trim());
                // coperator :
                String coperator = rs.getString(30);
                orderItem.setCoperator(coperator == null ? null : coperator.trim());
                // forderrowstatus :
                Integer forderrowstatus = (Integer) rs.getObject(31);
                orderItem.setForderrowstatus(forderrowstatus == null ? null : forderrowstatus);
                // bisactive :
                String bisactive = rs.getString(32);
                if (bisactive == null)
                    orderItem.setBisactive(null);
                else if (bisactive.trim().equals("1"))
                    orderItem.setBisactive(new UFBoolean(false));
                else
                    orderItem.setBisactive(new UFBoolean(true));
                // cordersource :
                String cordersource = rs.getString(33);
                orderItem.setCordersource(cordersource == null ? null : cordersource.trim());
                // csourcebillid :
                String csourcebillid = rs.getString(34);
                orderItem.setCsourcebillid(csourcebillid == null ? null : csourcebillid.trim());
                // csourcebillrow :
                String csourcebillrow = rs.getString(35);
                orderItem.setCsourcebillrow(csourcebillrow == null ? null : csourcebillrow.trim());
                // cupsourcebilltype :
                String cupsourcebilltype = rs.getString(36);
                orderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
                // cupsourcebillid :
                String cupsourcebillid = rs.getString(37);
                orderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
                // cupsourcebillrowid :
                String cupsourcebillrowid = rs.getString(38);
                orderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
                // vmemo :
                String vmemo = rs.getString(39);
                orderItem.setVmemo(vmemo == null ? null : vmemo.trim());
                // vfree1 :
                String vfree1 = rs.getString(40);
                orderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
                // vfree2 :
                String vfree2 = rs.getString(41);
                orderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
                // vfree3 :
                String vfree3 = rs.getString(42);
                orderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
                // vfree4 :
                String vfree4 = rs.getString(43);
                orderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
                // vfree5 :
                String vfree5 = rs.getString(44);
                orderItem.setVfree5(vfree5 == null ? null : vfree5.trim());
                // vdef1 :
                String vdef1 = rs.getString(45);
                orderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
                // vdef2 :
                String vdef2 = rs.getString(46);
                orderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
                // vdef3 :
                String vdef3 = rs.getString(47);
                orderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
                // vdef4 :
                String vdef4 = rs.getString(48);
                orderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
                // vdef5 :
                String vdef5 = rs.getString(49);
                orderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
                // vdef6 :
                String vdef6 = rs.getString(50);
                orderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
                //			 vdef7 :
                String vdef7 = rs.getString(51);
                orderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
                // vdef8 :
                String vdef8 = rs.getString(52);
                orderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
                // vdef9 :
                String vdef9 = rs.getString(53);
                orderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
                // vdef10 :
                String vdef10 = rs.getString(54);
                orderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
                //
                String vdef11 = rs.getString(55);
                orderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
                //
                String vdef12 = rs.getString(56);
                orderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
                //
                String vdef13 = rs.getString(57);
                orderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
                //
                String vdef14 = rs.getString(58);
                orderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
                //
                String vdef15 = rs.getString(59);
                orderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
                //
                String vdef16 = rs.getString(60);
                orderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
                //
                String vdef17 = rs.getString(61);
                orderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
                //
                String vdef18 = rs.getString(62);
                orderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
                //
                String vdef19 = rs.getString(63);
                orderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
                //
                String vdef20 = rs.getString(64);
                orderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
                //
                String pk_defdoc1 = rs.getString(65);
                orderItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
                //
                String pk_defdoc2 = rs.getString(66);
                orderItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
                //
                String pk_defdoc3 = rs.getString(67);
                orderItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
                //
                String pk_defdoc4 = rs.getString(68);
                orderItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
                //
                String pk_defdoc5 = rs.getString(69);
                orderItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
                //
                String pk_defdoc6 = rs.getString(70);
                orderItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
                //
                String pk_defdoc7 = rs.getString(71);
                orderItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
                //
                String pk_defdoc8 = rs.getString(72);
                orderItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
                //
                String pk_defdoc9 = rs.getString(73);
                orderItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
                //
                String pk_defdoc10 = rs.getString(74);
                orderItem.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
                //
                String pk_defdoc11 = rs.getString(75);
                orderItem.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
                //
                String pk_defdoc12 = rs.getString(76);
                orderItem.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
                //
                String pk_defdoc13 = rs.getString(77);
                orderItem.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
                //
                String pk_defdoc14 = rs.getString(78);
                orderItem.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
                //
                String pk_defdoc15 = rs.getString(79);
                orderItem.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
                //
                String pk_defdoc16 = rs.getString(80);
                orderItem.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
                //
                String pk_defdoc17 = rs.getString(81);
                orderItem.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
                //
                String pk_defdoc18 = rs.getString(82);
                orderItem.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
                //
                String pk_defdoc19 = rs.getString(83);
                orderItem.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
                //
                String pk_defdoc20 = rs.getString(84);
                orderItem.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());

                // ts :
                String ts = rs.getString(85);
                orderItem.setTs(ts == null ? null : ts.trim());
                // crowno :
                String crowno = rs.getString(86);
                orderItem.setCrowno(crowno == null ? null : crowno.trim());
                // norgtaxprice :
                BigDecimal norgtaxprice = rs.getBigDecimal(87);
                orderItem.setNorgtaxprice(norgtaxprice == null ? null : new UFDouble(norgtaxprice));
                // norgnettaxprice :
                BigDecimal norgnettaxprice = rs.getBigDecimal(88);
                orderItem.setNorgnettaxprice(norgnettaxprice == null ? null : new UFDouble(norgnettaxprice));
                //vproducenum：
                String vproducenum = rs.getString(89);
                orderItem.setVproducenum(vproducenum == null ? null : vproducenum.trim());
                //
                String ccontractid = rs.getString(90);
                orderItem.setCcontractid(ccontractid == null ? null : ccontractid.trim());
                //
                //
                String ccontractrowid = rs.getString(91);
                orderItem.setCcontractrowid(ccontractrowid == null ? null : ccontractrowid.trim());
                //
                //
                String ccontractrcode = rs.getString(92);
                orderItem.setCcontractrcode(ccontractrcode == null ? null : ccontractrcode.trim());
                
                String vpriceauditcode = rs.getString(93);
                orderItem.setVpriceauditcode(vpriceauditcode == null ? null : vpriceauditcode.trim());
                
                String cpriceauditid = rs.getString(94);
                orderItem.setCpriceauditid(cpriceauditid == null ? null : cpriceauditid.trim());
                
                String cpriceaudit_bid = rs.getString(95);
                orderItem.setCpriceaudit_bid(cpriceaudit_bid == null ? null : cpriceaudit_bid.trim());
                
                String cpriceaudit_bb1id = rs.getString(96);
                orderItem.setCpriceaudit_bb1id(cpriceaudit_bb1id == null ? null : cpriceaudit_bb1id.trim());
                //
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findItemByPrimaryKey", new Object[] { key });
        /*************************************************************/

        return orderItem;
    }

    /**
     * 通过主键查找一个VO对象。
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderItemVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderItemVO[] findItemsForHeader(String key) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findItemsForHeader", new Object[] { key });
        /*************************************************************/

        //select sql
        String sql = "select corder_bid, corderid, pk_corp, cmangid, cbaseid, nordernum,";
        sql += " cassistunit, nassistnum, ndiscountrate, idiscounttaxtype, ntaxrate,";
        sql += " ccurrencytypeid, noriginalnetprice, noriginalcurprice, noriginalcurmny,";
        sql += "  noriginaltaxmny, noriginalsummny, nexchangeotobrate, ntaxmny, nmoney,";
        sql += " nsummny, ";
        sql += " naccumarrvnum, naccumstorenum, naccuminvoicenum, naccumwastnum,";
        sql += " dplanarrvdate, cwarehouseid, creceiveaddress, cprojectid, ";
        sql += " cprojectphaseid, coperator, forderrowstatus, bisactive, cordersource,";
        sql += " csourcebillid, csourcebillrow, cupsourcebilltype, cupsourcebillid,";
        sql += " cupsourcebillrowid, vmemo, vfree1, vfree2, vfree3, vfree4, vfree5,";
        sql += " vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10, pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20, ts, crowno, norgtaxprice, norgnettaxprice, vproducenum,ccontractid,ccontractrowid,ccontractrcode,vpriceauditcode,cpriceauditid,cpriceaudit_bid,cpriceaudit_bb1id ";
        sql += " from sc_order_b where dr=0 and corderid = ? order by crowno";

        OrderItemVO[] orderItems = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, key);
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                OrderItemVO orderItem = new OrderItemVO();
                //
                String corder_bid = rs.getString("corder_bid");
                orderItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
                //
                String corderid = rs.getString("corderid");
                orderItem.setCorderid(corderid == null ? null : corderid.trim());
                //
                String pk_corp = rs.getString("pk_corp");
                orderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                //
                String cmangid = rs.getString("cmangid");
                orderItem.setCmangid(cmangid == null ? null : cmangid.trim());
                //
                String cbaseid = rs.getString("cbaseid");
                orderItem.setCbaseid(cbaseid == null ? null : cbaseid.trim());
                //
                BigDecimal nordernum = rs.getBigDecimal("nordernum");
                orderItem.setNordernum(nordernum == null ? null : new UFDouble(nordernum));
                orderItem.setNoldnum(nordernum == null ? null : new UFDouble(nordernum));
                //
                String cassistunit = rs.getString("cassistunit");
                orderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
                //
                BigDecimal nassistnum = rs.getBigDecimal("nassistnum");
                orderItem.setNassistnum(nassistnum == null ? null : new UFDouble(nassistnum));
                //
                BigDecimal ndiscountrate = rs.getBigDecimal("ndiscountrate");
                orderItem.setNdiscountrate(ndiscountrate == null ? null : new UFDouble(ndiscountrate));
                //
                Integer idiscounttaxtype = (Integer) rs.getObject("idiscounttaxtype");
                orderItem.setIdiscounttaxtype(idiscounttaxtype == null ? null : idiscounttaxtype);
                //
                BigDecimal ntaxrate = rs.getBigDecimal("ntaxrate");
                orderItem.setNtaxrate(ntaxrate == null ? null : new UFDouble(ntaxrate));
                //
                String ccurrencytypeid = rs.getString("ccurrencytypeid");
                orderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
                //
                BigDecimal noriginalnetprice = rs.getBigDecimal("noriginalnetprice");
                orderItem.setNoriginalnetprice(noriginalnetprice == null ? null : new UFDouble(noriginalnetprice));
                //
                BigDecimal noriginalcurprice = rs.getBigDecimal("noriginalcurprice");
                orderItem.setNoriginalcurprice(noriginalcurprice == null ? null : new UFDouble(noriginalcurprice));
                //
                BigDecimal noriginalcurmny = rs.getBigDecimal("noriginalcurmny");
                orderItem.setNoriginalcurmny(noriginalcurmny == null ? null : new UFDouble(noriginalcurmny));
                //
                BigDecimal noriginaltaxmny = rs.getBigDecimal("noriginaltaxmny");
                orderItem.setNoriginaltaxmny(noriginaltaxmny == null ? null : new UFDouble(noriginaltaxmny));
                //
                BigDecimal noriginalsummny = rs.getBigDecimal("noriginalsummny");
                orderItem.setNoriginalsummny(noriginalsummny == null ? null : new UFDouble(noriginalsummny));
                //
                BigDecimal nexchangeotobrate = rs.getBigDecimal("nexchangeotobrate");
                orderItem.setNexchangeotobrate(nexchangeotobrate == null ? null : new UFDouble(nexchangeotobrate));
                //
                BigDecimal ntaxmny = rs.getBigDecimal("ntaxmny");
                orderItem.setNtaxmny(ntaxmny == null ? null : new UFDouble(ntaxmny));
                //
                BigDecimal nmoney = rs.getBigDecimal("nmoney");
                orderItem.setNmoney(nmoney == null ? null : new UFDouble(nmoney));
                //
                BigDecimal nsummny = rs.getBigDecimal("nsummny");
                orderItem.setNsummny(nsummny == null ? null : new UFDouble(nsummny));
                //
                BigDecimal naccumarrvnum = rs.getBigDecimal("naccumarrvnum");
                orderItem.setNaccumarrvnum(naccumarrvnum == null ? null : new UFDouble(naccumarrvnum));
                //
                BigDecimal naccumstorenum = rs.getBigDecimal("naccumstorenum");
                orderItem.setNaccumstorenum(naccumstorenum == null ? null : new UFDouble(naccumstorenum));
                //
                BigDecimal naccuminvoicenum = rs.getBigDecimal("naccuminvoicenum");
                orderItem.setNaccuminvoicenum(naccuminvoicenum == null ? null : new UFDouble(naccuminvoicenum));
                //
                BigDecimal naccumwastnum = rs.getBigDecimal("naccumwastnum");
                orderItem.setNaccumwastnum(naccumwastnum == null ? null : new UFDouble(naccumwastnum));
                //
                String dplanarrvdate = rs.getString("dplanarrvdate");
                orderItem.setDplanarrvdate(dplanarrvdate == null ? null : new UFDate(dplanarrvdate.trim(), false));
                //
                String cwarehouseid = rs.getString("cwarehouseid");
                orderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
                //
                String creceiveaddress = rs.getString("creceiveaddress");
                orderItem.setCreceiveaddress(creceiveaddress == null ? null : creceiveaddress.trim());
                //
                String cprojectid = rs.getString("cprojectid");
                orderItem.setCprojectid(cprojectid == null ? null : cprojectid.trim());
                //
                String cprojectphaseid = rs.getString("cprojectphaseid");
                orderItem.setCprojectphaseid(cprojectphaseid == null ? null : cprojectphaseid.trim());
                //
                String coperator = rs.getString("coperator");
                orderItem.setCoperator(coperator == null ? null : coperator.trim());
                //
                Integer forderrowstatus = (Integer) rs.getObject("forderrowstatus");
                orderItem.setForderrowstatus(forderrowstatus == null ? null : forderrowstatus);
                //
                String bisactive = rs.getString("bisactive");
                if (bisactive == null)
                    orderItem.setBisactive(null);
                else if (bisactive.trim().equals("1"))
                    orderItem.setBisactive(new UFBoolean(false));
                else
                    orderItem.setBisactive(new UFBoolean(true));
                //orderItem.setBisactive(bisactive == null ? null : new UFBoolean(bisactive.trim()));
                //
                String cordersource = rs.getString("cordersource");
                orderItem.setCordersource(cordersource == null ? null : cordersource.trim());
                //
                String csourcebillid = rs.getString("csourcebillid");
                orderItem.setCsourcebillid(csourcebillid == null ? null : csourcebillid.trim());
                //
                String csourcebillrow = rs.getString("csourcebillrow");
                orderItem.setCsourcebillrow(csourcebillrow == null ? null : csourcebillrow.trim());
                //
                String cupsourcebilltype = rs.getString("cupsourcebilltype");
                orderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
                //
                String cupsourcebillid = rs.getString("cupsourcebillid");
                orderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
                //
                String cupsourcebillrowid = rs.getString("cupsourcebillrowid");
                orderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
                //
                String vmemo = rs.getString("vmemo");
                orderItem.setVmemo(vmemo == null ? null : vmemo.trim());
                //
                String vfree1 = rs.getString("vfree1");
                orderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
                //
                String vfree2 = rs.getString("vfree2");
                orderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
                //
                String vfree3 = rs.getString("vfree3");
                orderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
                //
                String vfree4 = rs.getString("vfree4");
                orderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
                //
                String vfree5 = rs.getString("vfree5");
                orderItem.setVfree5(vfree5 == null ? null : vfree5.trim());
                //
                String vdef1 = rs.getString("vdef1");
                orderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
                //
                String vdef2 = rs.getString("vdef2");
                orderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
                //
                String vdef3 = rs.getString("vdef3");
                orderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
                //
                String vdef4 = rs.getString("vdef4");
                orderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
                //
                String vdef5 = rs.getString("vdef5");
                orderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
                //
                String vdef6 = rs.getString("vdef6");
                orderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
                //
                String vdef7 = rs.getString("vdef7");
                orderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
                //
                String vdef8 = rs.getString("vdef8");
                orderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
                //
                String vdef9 = rs.getString("vdef9");
                orderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
                //
                String vdef10 = rs.getString("vdef10");
                orderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
                //
                String vdef11 = rs.getString("vdef11");
                orderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
                //
                String vdef12 = rs.getString("vdef12");
                orderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
                //
                String vdef13 = rs.getString("vdef13");
                orderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
                //
                String vdef14 = rs.getString("vdef14");
                orderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
                //
                String vdef15 = rs.getString("vdef15");
                orderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
                //
                String vdef16 = rs.getString("vdef16");
                orderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
                //
                String vdef17 = rs.getString("vdef17");
                orderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
                //
                String vdef18 = rs.getString("vdef18");
                orderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
                //
                String vdef19 = rs.getString("vdef19");
                orderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
                //
                String vdef20 = rs.getString("vdef20");
                orderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
                //
                String pk_defdoc1 = rs.getString("pk_defdoc1");
                orderItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
                //
                String pk_defdoc2 = rs.getString("pk_defdoc2");
                orderItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
                //
                String pk_defdoc3 = rs.getString("pk_defdoc3");
                orderItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
                //
                String pk_defdoc4 = rs.getString("pk_defdoc4");
                orderItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
                //
                String pk_defdoc5 = rs.getString("pk_defdoc5");
                orderItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
                //
                String pk_defdoc6 = rs.getString("pk_defdoc6");
                orderItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
                //
                String pk_defdoc7 = rs.getString("pk_defdoc7");
                orderItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
                //
                String pk_defdoc8 = rs.getString("pk_defdoc8");
                orderItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
                //
                String pk_defdoc9 = rs.getString("pk_defdoc9");
                orderItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
                //
                String pk_defdoc10 = rs.getString("pk_defdoc10");
                orderItem.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
                //
                String pk_defdoc11 = rs.getString("pk_defdoc11");
                orderItem.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
                //
                String pk_defdoc12 = rs.getString("pk_defdoc12");
                orderItem.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
                //
                String pk_defdoc13 = rs.getString("pk_defdoc13");
                orderItem.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
                //
                String pk_defdoc14 = rs.getString("pk_defdoc14");
                orderItem.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
                //
                String pk_defdoc15 = rs.getString("pk_defdoc15");
                orderItem.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
                //
                String pk_defdoc16 = rs.getString("pk_defdoc16");
                orderItem.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
                //
                String pk_defdoc17 = rs.getString("pk_defdoc17");
                orderItem.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
                //
                String pk_defdoc18 = rs.getString("pk_defdoc18");
                orderItem.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
                //
                String pk_defdoc19 = rs.getString("pk_defdoc19");
                orderItem.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
                //
                String pk_defdoc20 = rs.getString("pk_defdoc20");
                orderItem.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
                //ts
                String ts = rs.getString("ts");
                orderItem.setTs(ts == null ? null : ts.trim());
                //crowno
                String crowno = rs.getString("crowno");
                orderItem.setCrowno(crowno == null ? null : crowno.trim());
                //
                BigDecimal norgtaxprice = rs.getBigDecimal("norgtaxprice");
                orderItem.setNorgtaxprice(norgtaxprice == null ? null : new UFDouble(norgtaxprice));
                //
                BigDecimal norgnettaxprice = rs.getBigDecimal("norgnettaxprice");
                orderItem.setNorgnettaxprice(norgnettaxprice == null ? null : new UFDouble(norgnettaxprice));
                //vproducenum：
                String vproducenum = rs.getString("vproducenum");
                orderItem.setVproducenum(vproducenum == null ? null : vproducenum.trim());
                //
                String ccontractid = rs.getString("ccontractid");
                orderItem.setCcontractid(ccontractid == null ? null : ccontractid.trim());
                //
                //
                String ccontractrowid = rs.getString("ccontractrowid");
                orderItem.setCcontractrowid(ccontractrowid == null ? null : ccontractrowid.trim());
                //
                //
                String ccontractrcode = rs.getString("ccontractrcode");
                orderItem.setCcontractrcode(ccontractrcode == null ? null : ccontractrcode.trim());
                //
                String vpriceauditcode = rs.getString("vpriceauditcode");
                orderItem.setVpriceauditcode(vpriceauditcode == null ? null : vpriceauditcode.trim());
                
                String cpriceauditid = rs.getString("cpriceauditid");
                orderItem.setCpriceauditid(cpriceauditid == null ? null : cpriceauditid.trim());
                
                String cpriceaudit_bid = rs.getString("cpriceaudit_bid");
                orderItem.setCpriceaudit_bid(cpriceaudit_bid == null ? null : cpriceaudit_bid.trim());
                
                String cpriceaudit_bb1id = rs.getString("cpriceaudit_bb1id");
                orderItem.setCpriceaudit_bb1id(cpriceaudit_bb1id == null ? null : cpriceaudit_bb1id.trim());
                
                
                v.addElement(orderItem);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        orderItems = new OrderItemVO[v.size()];
        if (v.size() > 0) {
            v.copyInto(orderItems);
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findItemsForHeader", new Object[] { key });
        /*************************************************************/

        return orderItems;
    }

    /**
     * 向数据库插入一个VO对象。
     *
     * 创建日期：(2001-6-23)
     * @param node nc.vo.sc.order.OrderHeaderVO
     * @exception java.sql.SQLException 异常说明。
     */
    public String insertHeader(OrderHeaderVO orderHeader) throws java.sql.SQLException, nc.bs.pub.SystemException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "insertHeader", new Object[] { orderHeader });
        /*************************************************************/

        String sql = "insert into sc_order(corderid, vordercode, pk_corp, cpurorganization, cwareid, dorderdate, cvendorid, caccountbankid, cdeptid, cemployeeid, cbiztype, creciever, cgiveinvoicevendor, ctransmodeid, ctermProtocolid, ibillstatus, vmemo, caccountyear, coperator, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10, pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20,cvendormangid,tmaketime,taudittime,tlastmaketime ) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

        String key = null;
        Connection con = null;
        PreparedStatement stmt = null;
        String pk_corp = orderHeader.getPk_corp();
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            // set PK fields:
            key = getOID(pk_corp);
            stmt.setString(1, key);
            // set non PK fields:
            if (orderHeader.getVordercode() == null) {
                stmt.setNull(2, Types.CHAR);
            } else {
                stmt.setString(2, orderHeader.getVordercode());
            }
            if (orderHeader.getPk_corp() == null) {
                stmt.setNull(3, Types.CHAR);
            } else {
                stmt.setString(3, orderHeader.getPk_corp());
            }
            if (orderHeader.getCpurorganization() == null) {
                stmt.setNull(4, Types.CHAR);
            } else {
                stmt.setString(4, orderHeader.getCpurorganization());
            }
            if (orderHeader.getCwareid() == null) {
                stmt.setNull(5, Types.CHAR);
            } else {
                stmt.setString(5, orderHeader.getCwareid());
            }
            if (orderHeader.getDorderdate() == null) {
                stmt.setNull(6, Types.CHAR);
            } else {
                stmt.setString(6, orderHeader.getDorderdate().toString());
            }
            if (orderHeader.getCvendorid() == null) {
                stmt.setNull(7, Types.CHAR);
            } else {
                stmt.setString(7, orderHeader.getCvendorid());
            }
            if (orderHeader.getCaccountbankid() == null) {
                stmt.setNull(8, Types.CHAR);
            } else {
                stmt.setString(8, orderHeader.getCaccountbankid());
            }
            if (orderHeader.getCdeptid() == null) {
                stmt.setNull(9, Types.CHAR);
            } else {
                stmt.setString(9, orderHeader.getCdeptid());
            }
            if (orderHeader.getCemployeeid() == null) {
                stmt.setNull(10, Types.CHAR);
            } else {
                stmt.setString(10, orderHeader.getCemployeeid());
            }
            if (orderHeader.getCbiztype() == null) {
                stmt.setNull(11, Types.CHAR);
            } else {
                stmt.setString(11, orderHeader.getCbiztype());
            }
            if (orderHeader.getCreciever() == null) {
                stmt.setNull(12, Types.CHAR);
            } else {
                stmt.setString(12, orderHeader.getCreciever());
            }
            if (orderHeader.getCgiveinvoicevendor() == null) {
                stmt.setNull(13, Types.CHAR);
            } else {
                stmt.setString(13, orderHeader.getCgiveinvoicevendor());
            }
            if (orderHeader.getCtransmodeid() == null) {
                stmt.setNull(14, Types.CHAR);
            } else {
                stmt.setString(14, orderHeader.getCtransmodeid());
            }
            if (orderHeader.getCtermProtocolid() == null) {
                stmt.setNull(15, Types.CHAR);
            } else {
                stmt.setString(15, orderHeader.getCtermProtocolid());
            }
            if (orderHeader.getIbillstatus() == null) {
                stmt.setNull(16, Types.INTEGER);
            } else {
                stmt.setInt(16, orderHeader.getIbillstatus().intValue());
            }
            if (orderHeader.getVmemo() == null) {
                stmt.setNull(17, Types.CHAR);
            } else {
                stmt.setString(17, orderHeader.getVmemo());
            }
            if (orderHeader.getCaccountyear() == null) {
                stmt.setNull(18, Types.CHAR);
            } else {
                stmt.setString(18, orderHeader.getCaccountyear());
            }
            if (orderHeader.getCoperator() == null) {
                stmt.setNull(19, Types.CHAR);
            } else {
                stmt.setString(19, orderHeader.getCoperator());
            }
            if (orderHeader.getVdef1() == null) {
                stmt.setNull(20, Types.CHAR);
            } else {
                stmt.setString(20, orderHeader.getVdef1());
            }
            if (orderHeader.getVdef2() == null) {
                stmt.setNull(21, Types.CHAR);
            } else {
                stmt.setString(21, orderHeader.getVdef2());
            }
            if (orderHeader.getVdef3() == null) {
                stmt.setNull(22, Types.CHAR);
            } else {
                stmt.setString(22, orderHeader.getVdef3());
            }
            if (orderHeader.getVdef4() == null) {
                stmt.setNull(23, Types.CHAR);
            } else {
                stmt.setString(23, orderHeader.getVdef4());
            }
            if (orderHeader.getVdef5() == null) {
                stmt.setNull(24, Types.CHAR);
            } else {
                stmt.setString(24, orderHeader.getVdef5());
            }
            if (orderHeader.getVdef6() == null) {
                stmt.setNull(25, Types.CHAR);
            } else {
                stmt.setString(25, orderHeader.getVdef6());
            }
            if (orderHeader.getVdef7() == null) {
                stmt.setNull(26, Types.CHAR);
            } else {
                stmt.setString(26, orderHeader.getVdef7());
            }
            if (orderHeader.getVdef8() == null) {
                stmt.setNull(27, Types.CHAR);
            } else {
                stmt.setString(27, orderHeader.getVdef8());
            }
            if (orderHeader.getVdef9() == null) {
                stmt.setNull(28, Types.CHAR);
            } else {
                stmt.setString(28, orderHeader.getVdef9());
            }
            if (orderHeader.getVdef10() == null) {
                stmt.setNull(29, Types.CHAR);
            } else {
                stmt.setString(29, orderHeader.getVdef10());
            }

            if (orderHeader.getVdef11() == null) {
                stmt.setNull(30, Types.CHAR);
            } else {
                stmt.setString(30, orderHeader.getVdef11());
            }
            if (orderHeader.getVdef12() == null) {
                stmt.setNull(31, Types.CHAR);
            } else {
                stmt.setString(31, orderHeader.getVdef12());
            }
            if (orderHeader.getVdef13() == null) {
                stmt.setNull(32, Types.CHAR);
            } else {
                stmt.setString(32, orderHeader.getVdef13());
            }
            if (orderHeader.getVdef14() == null) {
                stmt.setNull(33, Types.CHAR);
            } else {
                stmt.setString(33, orderHeader.getVdef14());
            }
            if (orderHeader.getVdef15() == null) {
                stmt.setNull(34, Types.CHAR);
            } else {
                stmt.setString(34, orderHeader.getVdef15());
            }
            if (orderHeader.getVdef16() == null) {
                stmt.setNull(35, Types.CHAR);
            } else {
                stmt.setString(35, orderHeader.getVdef16());
            }
            if (orderHeader.getVdef17() == null) {
                stmt.setNull(36, Types.CHAR);
            } else {
                stmt.setString(36, orderHeader.getVdef17());
            }
            if (orderHeader.getVdef18() == null) {
                stmt.setNull(37, Types.CHAR);
            } else {
                stmt.setString(37, orderHeader.getVdef18());
            }
            if (orderHeader.getVdef19() == null) {
                stmt.setNull(38, Types.CHAR);
            } else {
                stmt.setString(38, orderHeader.getVdef19());
            }
            if (orderHeader.getVdef20() == null) {
                stmt.setNull(39, Types.CHAR);
            } else {
                stmt.setString(39, orderHeader.getVdef20());
            }
            if (orderHeader.getPKDefDoc1() == null) {
                stmt.setNull(40, Types.CHAR);
            } else {
                stmt.setString(40, orderHeader.getPKDefDoc1());
            }
            if (orderHeader.getPKDefDoc2() == null) {
                stmt.setNull(41, Types.CHAR);
            } else {
                stmt.setString(41, orderHeader.getPKDefDoc2());
            }
            if (orderHeader.getPKDefDoc3() == null) {
                stmt.setNull(42, Types.CHAR);
            } else {
                stmt.setString(42, orderHeader.getPKDefDoc3());
            }
            if (orderHeader.getPKDefDoc4() == null) {
                stmt.setNull(43, Types.CHAR);
            } else {
                stmt.setString(43, orderHeader.getPKDefDoc4());
            }
            if (orderHeader.getPKDefDoc5() == null) {
                stmt.setNull(44, Types.CHAR);
            } else {
                stmt.setString(44, orderHeader.getPKDefDoc5());
            }
            if (orderHeader.getPKDefDoc6() == null) {
                stmt.setNull(45, Types.CHAR);
            } else {
                stmt.setString(45, orderHeader.getPKDefDoc6());
            }
            if (orderHeader.getPKDefDoc7() == null) {
                stmt.setNull(46, Types.CHAR);
            } else {
                stmt.setString(46, orderHeader.getPKDefDoc7());
            }
            if (orderHeader.getPKDefDoc8() == null) {
                stmt.setNull(47, Types.CHAR);
            } else {
                stmt.setString(47, orderHeader.getPKDefDoc8());
            }
            if (orderHeader.getPKDefDoc9() == null) {
                stmt.setNull(48, Types.CHAR);
            } else {
                stmt.setString(48, orderHeader.getPKDefDoc9());
            }
            if (orderHeader.getPKDefDoc10() == null) {
                stmt.setNull(49, Types.CHAR);
            } else {
                stmt.setString(49, orderHeader.getPKDefDoc10());
            }
            if (orderHeader.getPKDefDoc11() == null) {
                stmt.setNull(50, Types.CHAR);
            } else {
                stmt.setString(50, orderHeader.getPKDefDoc11());
            }
            if (orderHeader.getPKDefDoc12() == null) {
                stmt.setNull(51, Types.CHAR);
            } else {
                stmt.setString(51, orderHeader.getPKDefDoc12());
            }
            if (orderHeader.getPKDefDoc13() == null) {
                stmt.setNull(52, Types.CHAR);
            } else {
                stmt.setString(52, orderHeader.getPKDefDoc13());
            }
            if (orderHeader.getPKDefDoc14() == null) {
                stmt.setNull(53, Types.CHAR);
            } else {
                stmt.setString(53, orderHeader.getPKDefDoc14());
            }
            if (orderHeader.getPKDefDoc15() == null) {
                stmt.setNull(54, Types.CHAR);
            } else {
                stmt.setString(54, orderHeader.getPKDefDoc15());
            }
            if (orderHeader.getPKDefDoc16() == null) {
                stmt.setNull(55, Types.CHAR);
            } else {
                stmt.setString(55, orderHeader.getPKDefDoc16());
            }
            if (orderHeader.getPKDefDoc17() == null) {
                stmt.setNull(56, Types.CHAR);
            } else {
                stmt.setString(56, orderHeader.getPKDefDoc17());
            }
            if (orderHeader.getPKDefDoc18() == null) {
                stmt.setNull(57, Types.CHAR);
            } else {
                stmt.setString(57, orderHeader.getPKDefDoc18());
            }
            if (orderHeader.getPKDefDoc19() == null) {
                stmt.setNull(58, Types.CHAR);
            } else {
                stmt.setString(58, orderHeader.getPKDefDoc19());
            }
            if (orderHeader.getPKDefDoc20() == null) {
                stmt.setNull(59, Types.CHAR);
            } else {
                stmt.setString(59, orderHeader.getPKDefDoc20());
            }

            if (orderHeader.getCvendormangid() == null) {
                stmt.setNull(60, Types.CHAR);
            } else {
                stmt.setString(60, orderHeader.getCvendormangid());
            }
            if (orderHeader.getTmaketime() == null) {
                stmt.setNull(61, Types.CHAR);
            } else {
                stmt.setString(61, orderHeader.getTmaketime());
            }
            if (orderHeader.getTaudittime() == null) {
                stmt.setNull(62, Types.CHAR);
            } else {
                stmt.setString(62, orderHeader.getTaudittime());
            }
            if (orderHeader.getTlastmaketime() == null) {
                stmt.setNull(63, Types.CHAR);
            } else {
                stmt.setString(63, orderHeader.getTlastmaketime());
            }

            //
            stmt.executeUpdate();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "insertHeader", new Object[] { orderHeader });
        /*************************************************************/

        return key;
    }

    /**
     * 向数据库插入一个VO对象。
     *
     * 创建日期：(2001-6-23)
     * @param node nc.vo.sc.order.OrderItemVO
     * @exception java.sql.SQLException 异常说明。
     */
    public String insertItem(OrderItemVO orderItem) throws java.sql.SQLException, nc.bs.pub.SystemException {
      if (orderItem == null)
        return null;
      return insertItems(new OrderItemVO[]{orderItem})[0];
    }

    /**
     * <p>向数据库插入一个VO对象。
     * <p>
     * 创建日期：(2001-6-23)
     * @param OrderItem nc.vo.sc.order.OrderItemVO
     * @param foreignKey String
     * @exception java.sql.SQLException 异常说明。
     */
    public String insertItem(OrderItemVO orderItem, String foreignKey) throws java.sql.SQLException, nc.bs.pub.SystemException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "insertItem", new Object[] { orderItem, foreignKey });
        /*************************************************************/

        orderItem.setCorderid(foreignKey);
        String key = insertItem(orderItem);

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "insertItem", new Object[] { orderItem, foreignKey });
        /*************************************************************/

        return key;
    }

    /**
     * <p>删除母子表的所有内容。
     * <p>
     * 创建日期：(2001-6-23)
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public void delete(OrderVO vo) throws java.sql.SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "delete", new Object[] { vo });
        /*************************************************************/

        deleteItemsForHeader(((OrderHeaderVO) vo.getParentVO()).getPrimaryKey());
        deleteHeader((OrderHeaderVO) vo.getParentVO());

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "delete", new Object[] { vo });
        /*************************************************************/
    }

    /**
     * ?user>
     * 功能：外系统推式保存委外订单VO(2005-02-22)
     * 参数：
     * 返回：
     * 例外：
     * 日期：(2005-2-22 13:06:43)
     * 修改日期，修改人，修改原因，注释标志：
     * 
     */
    public void saveOutterBill(OrderVO VOs[], nc.vo.scm.pub.session.ClientLink clientlink) throws BusinessException {
        try {
            String key = null;
            String sTime = (new UFDateTime(new Date())).toString();

            SCATP atp = new SCATP();
            for (int i = 0; i < VOs.length; i++) {
                //取得单据号
                nc.bs.sc.pub.PublicDMO dmo = new nc.bs.sc.pub.PublicDMO();
                dmo.getBillCode(VOs[i]);

                OrderHeaderVO headVO = (OrderHeaderVO) VOs[i].getParentVO();
                headVO.setStatus(VOStatus.NEW);
                headVO.setDorderdate(clientlink.getLogonDate());
                headVO.setCoperator(clientlink.getUser());
                headVO.setTmaketime(sTime);
                headVO.setTlastmaketime(sTime);
                OrderItemVO bodyVO[] = (OrderItemVO[]) VOs[i].getChildrenVO();
                if (bodyVO != null && bodyVO.length > 0) {

                    //设置业务类型,参考nc.vo.bd.b999.IInitDataForVS
                    String upbill_type = bodyVO[0].getCupsourcebilltype();
                    int lint_Praysource = 3;
                    if (upbill_type != null && upbill_type.trim().length() > 0) {
                    	throw new BusinessException("NC5.5中删除请购业务类型对照，此功能还未开发完成，请等待......");
                        //nc.bs.bd.b999.PrayvsbusiDMO l_PrayvsbusiDMO = new nc.bs.bd.b999.PrayvsbusiDMO();//comment by yye 20060403
                    	
//                    	IPrayvsBusiQry bo = (IPrayvsBusiQry) NCLocator.getInstance().lookup(IPrayvsBusiQry.class.getName());//modify by yye 20060403
                    	
//                        nc.vo.bd.b999.PrayvsbusiVO l_condPrayvsbusiVO = new nc.vo.bd.b999.PrayvsbusiVO();
//                        l_condPrayvsbusiVO.setPk_corp(headVO.getPk_corp());
//                        if (upbill_type.trim().equals("5C") || upbill_type.trim().equals("5D") || upbill_type.trim().equals("5E") || upbill_type.trim().equals("5I")) {
//                            //内部交易传入单据
//                            l_condPrayvsbusiVO.setPraysource(new Integer(7));
//                            l_condPrayvsbusiVO.setPraytype(new Integer(0));
//                            lint_Praysource = 7;
//                        }
//
//                        if (upbill_type.trim().equals("30")) {
//                            //销售订单传入单据
//                            l_condPrayvsbusiVO.setPraysource(new Integer(3));
//                            l_condPrayvsbusiVO.setPraytype(new Integer(0));
//                            lint_Praysource = 3;
//                        }
//
//                        nc.vo.bd.b999.PrayvsbusiVO[] l_resultPrayvsbusiVO = bo.queryByPrayvsBusitypeVO(l_condPrayvsbusiVO, new Boolean(true));
//                        if (l_resultPrayvsbusiVO != null && l_resultPrayvsbusiVO.length > 0) {
//                            java.util.Vector v = new java.util.Vector();
//                            for (int j = 0; j < l_resultPrayvsbusiVO.length; j++) {
//                                if (l_resultPrayvsbusiVO[j].getPk_corp() != null && l_resultPrayvsbusiVO[j].getPk_corp().equals(headVO.getPk_corp()) && l_resultPrayvsbusiVO[j].getPraysource() != null && l_resultPrayvsbusiVO[j].getPraysource().intValue() == lint_Praysource && l_resultPrayvsbusiVO[j].getPraytype() != null && l_resultPrayvsbusiVO[j].getPraytype().intValue() == 0)
//                                    v.addElement(l_resultPrayvsbusiVO[j]);
//                            }
//                            if (v.size() > 0) {
//                                l_resultPrayvsbusiVO = new nc.vo.bd.b999.PrayvsbusiVO[v.size()];
//                                v.copyInto(l_resultPrayvsbusiVO);
//                                headVO.setCbiztype(l_resultPrayvsbusiVO[0].getPk_busitype());
//                            } else {
//                                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000077")/*@res "请先设置业务类型参照"*/);
//                            }
//
//                        } else {
//                            throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000077")/*@res "请先设置业务类型参照"*/);
//                        }
//
//                        if (headVO.getCbiztype() == null || headVO.getCbiztype().length() == 0) {
//                            throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000077")/*@res "请先设置业务类型参照"*/);
//                        }

                    }
                }

                headVO.setDauditdate(clientlink.getLogonDate());
                
                //since v55, Atp算法重构后的调整，此调用必须在所的VO数据设置完成，保存之前
                ArrayList<ATPVO> listRetFromBefore = atp.modifyATPBefore(VOs[i]);
                //
                key = insertHeader(headVO);
                //
                headVO.setPrimaryKey(key);
                if (bodyVO != null && bodyVO.length > 0) {

                    for (int j = 0; j < bodyVO.length; j++) {
                        bodyVO[j].setCorderid(key);
                        bodyVO[j].setStatus(VOStatus.NEW);
                        bodyVO[j].setBisactive(new UFBoolean(true));
                        bodyVO[j].setCrowno((new Integer((j + 1)*10)).toString());
                        bodyVO[j].setIdiscounttaxtype(new Integer(2));//应税外加
                        bodyVO[j].setNdiscountrate(new UFDouble(100));//扣率默认100

                        bodyVO[j].setNoriginalcurmny(null);//金额
                        bodyVO[j].setNoriginalsummny(null);//价税合计
                        bodyVO[j].setNoriginaltaxmny(null);//税额
                        bodyVO[j].setNmoney(null);//本币金额
                        bodyVO[j].setNsummny(null);//本币价税合计
                        bodyVO[j].setNtaxmny(null);//本币税额
//                        bodyVO[j].setNassistcurmny(null);//辅币金额
//                        bodyVO[j].setNassistsummny(null);//辅币价税合计
//                        bodyVO[j].setNassisttaxmny(null);//辅币税额
                        bodyVO[j].setNoriginalnetprice(null);//净单价
                        bodyVO[j].setNorgnettaxprice(null);//净含税单价
                        bodyVO[j].setNoriginalcurprice(null);//单价
                        bodyVO[j].setNorgtaxprice(null);//含税单价
                    }
                    
                    //关联合同和自动取价
                    VOs[i].setClientLink(clientlink);
                    setRelateCntAndDefaultPrice(VOs[i]);
                    //
                    insertItems(bodyVO);
                }
                //since v55, Atp算法重构后的调整，此调用必须在所的VO数据更新完成之后
                atp.modifyATPAfter(VOs[i], listRetFromBefore);
                //
                OrderImpl l_OrderBO = new OrderImpl();
                l_OrderBO.updateXSDDNum(VOs[i]);
                l_OrderBO.updateDBDDNum(VOs[i]);
                l_OrderBO.updateCTNum(VOs[i],null);
            }
        } catch (Exception e) {
            if (e instanceof BusinessException)
                throw (BusinessException) e;
            else
                throw new BusinessException(e.getMessage());
        }
    }

    /**
     * 关联合同和自动取价
     */
    private OrderVO setRelateCntAndDefaultPrice(OrderVO a_OrderVO) throws Exception {
        if (a_OrderVO == null) {
            return null;
        }
        OrderHeaderVO headVO = (OrderHeaderVO) a_OrderVO.getParentVO();
        OrderItemVO[] bodyVO = (OrderItemVO[]) a_OrderVO.getChildrenVO();

        //如果中间有的行的存货为空，则剔除掉
        Vector lVec_rows = new Vector();
        for (int i = 0; i < bodyVO.length; i++) {
            if (bodyVO[i].getCmangid() != null && bodyVO[i].getCmangid().toString().length() > 0) {
                lVec_rows.addElement(new Integer(i));
            }
        }

        int[] lintary_rows = null;
        if (lVec_rows.size() > 0) {
            lintary_rows = new int[lVec_rows.size()];
            for (int i = 0; i < lVec_rows.size(); i++) {
                lintary_rows[i] = ((Integer) lVec_rows.elementAt(i)).intValue();
            }
        } else {
            return a_OrderVO;
        }
        //检查
        int li_rowcount = lintary_rows.length;
        if (li_rowcount == 0) {
            return a_OrderVO;
        }

        //表头-供应商基础id
        String lStr_vendorbasid = headVO.getCvendorid();
        lStr_vendorbasid = SCPubVO.getString_TrimZeroLenAsNull(lStr_vendorbasid);

        //表头-供应商mangid
        String lStr_vendormangid = headVO.getCvendormangid();
        lStr_vendormangid = SCPubVO.getString_TrimZeroLenAsNull(lStr_vendormangid);

        //表头-订单日期
        String lStr_orderdate = headVO.getDorderdate().toString();
        lStr_orderdate = SCPubVO.getString_TrimZeroLenAsNull(lStr_orderdate);

        ///表头-库存组织id
        String lStr_wareid = headVO.getCwareid();
        lStr_wareid = SCPubVO.getString_TrimZeroLenAsNull(lStr_wareid);

        //表体数据
        String[] lStrary_baseid = new String[li_rowcount];
        for (int i = 0; i < li_rowcount; i++) {
            int lint_rowindex = lintary_rows[i];//行序号
            lStrary_baseid[i] = SCPubVO.getString_TrimZeroLenAsNull(bodyVO[lint_rowindex].getCbaseid());
        }

        //依据表体的行数，来构造供应商基础id数组
        //String[] lStrary_vendorbasid = null;

//        if (lStr_vendorbasid != null && lStr_vendorbasid.trim().length() > 0) {
//            lStrary_vendorbasid = (String[]) SCPubVO.getSameValueArray(lStr_vendorbasid, li_rowcount);
//        }

        //依据表体的行数，来构造供应商mangid数组
        String[] lStrary_vendorbaseid = null;

        if (lStr_vendorbasid != null && lStr_vendorbasid.trim().length() > 0) {
            lStrary_vendorbaseid = (String[]) SCPubVO.getSameValueArray(lStr_vendorbasid, li_rowcount);
        }

        //公司pk
        String lStr_PKCorp = headVO.getPk_corp();

        //取价格策略
        int lint_PricePolicy = RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE;//（默认：无税价格优先）
        nc.bs.pub.para.SysInitBO l_SysInitBO = new nc.bs.pub.para.SysInitBO();
        nc.vo.pub.para.SysInitVO lAry_initVO[] = l_SysInitBO.querySysInit(lStr_PKCorp, "SC04");

        if (lAry_initVO != null && lAry_initVO.length > 0) {
            String s = lAry_initVO[0].getValue();
            if (s != null && s.trim().length() > 0) {
                if (s.endsWith("无税价格优先"))/*-=notranslate=-*/
                    lint_PricePolicy = RelationsCalVO.PRICE_PRIOR_TO_TAXPRICE;
                else
                    ////含税优先
                    lint_PricePolicy = RelationsCalVO.TAXPRICE_PRIOR_TO_PRICE;
            }
        }

        //修改订单列的itemkey
        String lStr_ChangedKey = ScUtils.getPriceFieldByPricePolicy(lint_PricePolicy);

        //是否找到了对应的合同价,初始化时为false
        boolean[] lbolary_findCtPrice = new boolean[li_rowcount];
        for (int i = 0; i < li_rowcount; i++) {
            lbolary_findCtPrice[i] = false;
        }

        //合同是否启用
        boolean lbol_CTStartUp = new CreatecorpDMO().isEnabled(lStr_PKCorp, ProductCode.PROD_CT);

        if (lbol_CTStartUp && lStrary_baseid != null && lStrary_baseid.length > 0 && lStrary_vendorbaseid != null && lStrary_vendorbaseid.length > 0 && lStr_orderdate != null && lStr_orderdate.trim().length() > 0) {

            //为提高效率，一次性查询合同相关信息
            RetCtToPoQueryVO[] lary_CtRetVO = new ScFromCtImpl().queryForCnt(lStr_PKCorp, lStrary_baseid, lStrary_vendorbaseid, new UFDate(lStr_orderdate));

            if (lary_CtRetVO != null && lary_CtRetVO.length > 0 && lary_CtRetVO.length == li_rowcount) {

                for (int i = 0; i < li_rowcount; i++) {

                    int lint_rowindex = lintary_rows[i];//行序号

                    // 先将合同ID 合同行ID 合同号 设置为空
                    bodyVO[lint_rowindex].setCcontractid(null);
                    bodyVO[lint_rowindex].setCcontractrowid(null);
                    bodyVO[lint_rowindex].setCcontractrcode(null);

                    if (lary_CtRetVO[i] != null) {

                        UFDouble lUFD_Price = null;
                        lUFD_Price = SCPubVO.getPriceValueByPricePolicy(lary_CtRetVO[i], lint_PricePolicy);

                        if (lUFD_Price != null) {

                            UFDouble lUFD_OldPrice = SCPubVO.getUFDouble_ValueAsValue(bodyVO[lint_rowindex].getAttributeValue(lStr_ChangedKey));

                            lbolary_findCtPrice[i] = true;//找到对应的合同价

                            bodyVO[lint_rowindex].setCcontractid(lary_CtRetVO[i].getCContractID());
                            bodyVO[lint_rowindex].setCcontractrowid(lary_CtRetVO[i].getCContractRowId());
                            bodyVO[lint_rowindex].setCcontractrcode(lary_CtRetVO[i].getCContractCode());

                            ///与原有值不同才重新计算
                            if (lUFD_OldPrice == null || lUFD_Price.compareTo(lUFD_OldPrice) != 0) {
                                bodyVO[lint_rowindex].setAttributeValue(lStr_ChangedKey, lUFD_Price);
                                //重新计算数量关系
                                SCPubVO.calRelation(bodyVO[lint_rowindex],lint_PricePolicy);
                            }

                        } else {
                            lbolary_findCtPrice[i] = false;//没有找到对应的合同价
                        }
                    } else {
                        lbolary_findCtPrice[i] = false;//没有找到对应的合同价
                    }
                }
            }
        }
        //      合同相关运算 end

        Vector lVec_needDefault = new Vector();
        //取合同价结束，统计一下还有哪些行需要进一步去取默认价格
        for (int i = 0; i < lbolary_findCtPrice.length; i++) {
            if (lbolary_findCtPrice[i] == false) {
                lVec_needDefault.addElement(new Integer(lintary_rows[i]));
            }
        }
        
        if (lVec_needDefault.size() > 0) {
            int li_rowcount2 = lVec_needDefault.size();
            int[] lintary_needDefault = new int[li_rowcount2];//哪些行需要进一步去取默认价格
            for (int i = 0; i < li_rowcount2; i++) {
                lintary_needDefault[i] = ((Integer) lVec_needDefault.elementAt(i)).intValue();
            }
            //取进一步计算所需要的值
            //表体数据
            String[] lStrary_mangid2 = new String[li_rowcount2];
            String[] lStrary_currencytypeid2 = new String[li_rowcount2];
            UFDouble[] lUFDary_BRate2 = new UFDouble[li_rowcount2];
//            UFDouble[] lUFDary_ARate2 = new UFDouble[li_rowcount2];

            for (int i = 0; i < li_rowcount2; i++) {
                int lint_rowindex = lintary_needDefault[i];//行序号
                lStrary_mangid2[i] = SCPubVO.getString_TrimZeroLenAsNull(bodyVO[lint_rowindex].getCmangid());
                lStrary_currencytypeid2[i] = SCPubVO.getString_TrimZeroLenAsNull(bodyVO[lint_rowindex].getCcurrencytypeid());//币种id
                lUFDary_BRate2[i] = SCPubVO.getUFDouble_ValueAsValue(bodyVO[lint_rowindex].getNexchangeotobrate());//折本汇率
//                lUFDary_ARate2[i] = SCPubVO.getUFDouble_ValueAsValue(bodyVO[lint_rowindex].getNexchangeotoarate());//折辅汇率
            }

            //存货 币种 折本汇率 折辅汇率
            //取默认价格
            RetScVrmAndParaPriceVO l_voPara = new RetScVrmAndParaPriceVO(1);
            l_voPara.setPk_corp(lStr_PKCorp);
            l_voPara.setStoOrgId(lStr_wareid);
            l_voPara.setVendMangId(lStr_vendormangid);
            l_voPara.setSaInvMangId(lStrary_mangid2);
            l_voPara.setSaCurrId(lStrary_currencytypeid2);
            l_voPara.setDaBRate(lUFDary_BRate2);
//            l_voPara.setDaARate(lUFDary_ARate2);
            l_voPara.setDOrderDate(lStr_orderdate == null ? null : new UFDate(lStr_orderdate));
            l_voPara.setClientLink(a_OrderVO.getClientLink());

            //价格返回
            RetScVrmAndParaPriceVO l_voRetPrice = new OrderImpl().queryVrmAndParaPrices(l_voPara);

            for (int i = 0; i < li_rowcount2; i++) {
                int lint_rowindex = lintary_needDefault[i];//行序号
                UFDouble lUFD_Price = l_voRetPrice.getPriceAt(i);
                if (lUFD_Price == null) {
                    continue;
                }

                if (l_voRetPrice.isSetPriceNoTaxAt(i)) {//如果为“参考成本”或"计划价"，则永远看为“无税优先”
                    lStr_ChangedKey = "noriginalcurprice";
                }

                //与原有值不同才重新计算
                UFDouble lUFD_OldPrice = SCPubVO.getUFDouble_ValueAsValue(bodyVO[lint_rowindex].getAttributeValue(lStr_ChangedKey));

                if (lUFD_OldPrice == null || lUFD_Price.compareTo(lUFD_OldPrice) != 0) {
                    bodyVO[lint_rowindex].setAttributeValue(lStr_ChangedKey, lUFD_Price);
                    //重新计算数量关系
                    SCPubVO.calRelation(bodyVO[lint_rowindex],lint_PricePolicy);
                }

            }
        }

        a_OrderVO.setChildrenVO(bodyVO);
        return a_OrderVO;
    }

    /**
     * ?user>
     * 功能：查看委外系统是否引用了指定的单据
     * 参数：
     * 返回：
     * 例外：
     * 日期：(2005-2-22 13:06:43)
     * 修改日期，修改人，修改原因，注释标志：
     * 
     */
    public boolean isReferedOtherBills(String astrary_billids[]) throws java.rmi.RemoteException {
        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.query.OrderDMO", "isReferedOtherBills", new Object[] { astrary_billids });
        /*************************************************************/

        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        String strSql = "select cupsourcebillid from sc_order_b where dr = '0' ";

        try {
            nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();
            //(distinct saId).length <= _MINNUM_CRT_TMP_TBL_ 时不用临时表
            //tmpTblDmo.MINNUM = nc.vo.pu.pub.PuPubVO._MINNUM_CRT_TMP_TBL_;
            int iLen = astrary_billids.length;
            ArrayList listIds = new ArrayList();
            for (int i = 0; i < iLen; i++) {
                if (!listIds.contains(astrary_billids[i])) {
                    listIds.add(astrary_billids[i]);
                }
            }
            String strIdSet = tmpTblDmo.insertTempTable(listIds, nc.vo.scm.pub.TempTableVO.TEMPTABLE_SC2, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
            if (strIdSet == null || strIdSet.trim().length() == 0) {
                throw new SQLException("创建临时表时未返回主键串集合或子查询串，直接返加NULL!");
            }
            strSql += "and cupsourcebillid in " + strIdSet;
            //
            con = getConnection();
            stmt = con.prepareStatement(strSql);
            //
            rs = stmt.executeQuery();
            if (rs.next()) {
                //String strError = "存在引用现象，不能完成本操作!";
                return true;
            } else {
                return false;
            }
        } catch (Exception e) {
            //throw new SQLException(e.getMessage());
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.query.OrderDMO", "isReferedOtherBills", new Object[] { astrary_billids });
        /*************************************************************/
        return true;
    }

    /**
     * 作者：袁野
     * 功能：判断请购单是否有相应后续委外订单
     * 参数：String[]  请购单行数组
     * 返回：UFBoolean[] 注：true表示请购单行存在后续单据，false表示不存在
     * 例外：
     * 日期：2005-09-05 10:47:32
     * 异常：RemoteException
     * 修改日期，修改人，修改原因，注释标志：
     */

    public UFBoolean[] queryIfExecPray(String[] aStrAry_PrayBillRowID) throws java.rmi.RemoteException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.query.OrderDMO", "queryIfExecPray", new Object[] { aStrAry_PrayBillRowID });
        /*************************************************************/

        if (aStrAry_PrayBillRowID == null) {
            return null;
        }

        if (aStrAry_PrayBillRowID.length == 0) {
            return null;
        }

        UFBoolean[] lUFBAry_Return = new UFBoolean[aStrAry_PrayBillRowID.length];
        Vector lVec_Temp = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        String strSql = "select B.cupsourcebillrowid from sc_order A,sc_order_b B where A.corderid = B.corderid and A.dr = 0 ";

        try {
            nc.bs.scm.pub.TempTableDMO tmpTblDmo = new nc.bs.scm.pub.TempTableDMO();

            int iLen = aStrAry_PrayBillRowID.length;
            ArrayList listIds = new ArrayList();
            for (int i = 0; i < iLen; i++) {
                if (!listIds.contains(aStrAry_PrayBillRowID[i])) {
                    listIds.add(aStrAry_PrayBillRowID[i]);
                }
            }
            String strIdSet = tmpTblDmo.insertTempTable(listIds, nc.vo.scm.pub.TempTableVO.TEMPTABLE_SC2, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_PU);
            if (strIdSet == null || strIdSet.trim().length() == 0) {
                throw new SQLException("创建临时表时未返回主键串集合或子查询串，直接返加NULL!");
            }
            strSql += "and B.cupsourcebillrowid in " + strIdSet;
            //
            con = getConnection();
            stmt = con.prepareStatement(strSql);
            //
            rs = stmt.executeQuery();

            while (rs.next()) {
                String s = rs.getString(1);
                if (s != null && s.trim().length() > 0) {
                    lVec_Temp.addElement(s);
                }
            }

            if (rs != null)
                rs.close();

            for (int i = 0; i < aStrAry_PrayBillRowID.length; i++) {
                if (lVec_Temp.contains(aStrAry_PrayBillRowID[i])) {
                    lUFBAry_Return[i] = new UFBoolean(true);
                } else {
                    lUFBAry_Return[i] = new UFBoolean(false);
                }
            }
        } catch (Exception e) {
            //throw new SQLException(e.getMessage());
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.query.OrderDMO", "queryIfExecPray", new Object[] { aStrAry_PrayBillRowID });
        /*************************************************************/
        return lUFBAry_Return;
    }

    /**
     * 根据主键在数据库中删除一个VO对象。
     *
     * 创建日期：(2001-6-23)
     * @param key nc.vo.pub.oid.OID
     * @exception java.sql.SQLException 异常说明。
     */
    public void deleteHeader(OrderHeaderVO vo) throws java.sql.SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "deleteHeader", new Object[] { vo });
        /*************************************************************/

        //String sql = "delete from sc_order where corderid = ?";
        String sql = "update  sc_order set dr=1 where corderid = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, vo.getPrimaryKey());
            stmt.executeUpdate();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "deleteHeader", new Object[] { vo });
        /*************************************************************/
    }

    /**
     * 根据主键在数据库中删除一个VO对象。
     *
     * 创建日期：(2001-6-23)
     * @param key nc.vo.pub.oid.OID
     * @exception java.sql.SQLException 异常说明。
     */
    public void deleteItem(OrderItemVO vo) throws java.sql.SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "deleteItem", new Object[] { vo });
        /*************************************************************/

        //String sql = "delete from sc_order_b where corder_bid = ?";
        String sql = "update sc_order_b set dr=1 where corder_bid = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, vo.getPrimaryKey());
            stmt.executeUpdate();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "deleteItem", new Object[] { vo });
        /*************************************************************/
    }

    /**
     * 根据主键在数据库中删除一个VO对象。
     *
     * 创建日期：(2001-6-23)
     * @param key nc.vo.pub.oid.OID
     * @exception java.sql.SQLException 异常说明。
     */
    public void deleteItemsForHeader(String headerKey) throws java.sql.SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "deleteItemsForHeader", new Object[] { headerKey });
        /*************************************************************/

        String sql = "update sc_order_b set dr=1 where corderid = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, headerKey);
            stmt.executeUpdate();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "deleteItemsForHeader", new Object[] { headerKey });
        /*************************************************************/
    }

    /**
     * 用一个VO对象的属性更新数据库中的值。
     *
     * 创建日期：(2001-6-23)
     * @param orderHeader nc.vo.sc.order.OrderHeaderVO
     * @exception java.sql.SQLException 异常说明。
     */
    public void updateHeader(OrderHeaderVO orderHeader) throws java.sql.SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "updateHeader", new Object[] { orderHeader });
        /*************************************************************/

        String sql = "update sc_order set vordercode = ?, pk_corp = ?, cpurorganization = ?, cwareid = ?, dorderdate = ?, cvendorid = ?, caccountbankid = ?, cdeptid = ?, cemployeeid = ?, cbiztype = ?, creciever = ?, cgiveinvoicevendor = ?, ctransmodeid = ?, ctermProtocolid = ?, ibillstatus = ?, vmemo = ?, caccountyear = ?, coperator = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vdef7 = ?, vdef8 = ?, vdef9 = ?, vdef10 = ?, vdef11 = ?, vdef12 = ?, vdef13 = ?, vdef14 = ?, vdef15 = ?, vdef16 = ?, vdef17 = ?, vdef18 = ?, vdef19 = ?, vdef20 = ?, pk_defdoc1 = ?, pk_defdoc2 = ?, pk_defdoc3 = ?, pk_defdoc4 = ?, pk_defdoc5 = ?, pk_defdoc6 = ?, pk_defdoc7 = ?, pk_defdoc8 = ?, pk_defdoc9 = ?, pk_defdoc10 = ?, pk_defdoc11 = ?, pk_defdoc12 = ?, pk_defdoc13 = ?, pk_defdoc14 = ?, pk_defdoc15 = ?, pk_defdoc16 = ?, pk_defdoc17 = ?, pk_defdoc18 = ?, pk_defdoc19 = ?, pk_defdoc20 = ?, cvendormangid = ?, cauditpsn = ?, dauditdate = ?, tlastmaketime = ?  where corderid = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            // update non PK fields:
            if (orderHeader.getVordercode() == null) {
                stmt.setNull(1, Types.CHAR);
            } else {
                stmt.setString(1, orderHeader.getVordercode());
            }
            if (orderHeader.getPk_corp() == null) {
                stmt.setNull(2, Types.CHAR);
            } else {
                stmt.setString(2, orderHeader.getPk_corp());
            }
            if (orderHeader.getCpurorganization() == null) {
                stmt.setNull(3, Types.CHAR);
            } else {
                stmt.setString(3, orderHeader.getCpurorganization());
            }
            if (orderHeader.getCwareid() == null) {
                stmt.setNull(4, Types.CHAR);
            } else {
                stmt.setString(4, orderHeader.getCwareid());
            }
            if (orderHeader.getDorderdate() == null) {
                stmt.setNull(5, Types.CHAR);
            } else {
                stmt.setString(5, orderHeader.getDorderdate().toString());
            }
            if (orderHeader.getCvendorid() == null) {
                stmt.setNull(6, Types.CHAR);
            } else {
                stmt.setString(6, orderHeader.getCvendorid());
            }
            if (orderHeader.getCaccountbankid() == null) {
                stmt.setNull(7, Types.CHAR);
            } else {
                stmt.setString(7, orderHeader.getCaccountbankid());
            }
            if (orderHeader.getCdeptid() == null) {
                stmt.setNull(8, Types.CHAR);
            } else {
                stmt.setString(8, orderHeader.getCdeptid());
            }
            if (orderHeader.getCemployeeid() == null) {
                stmt.setNull(9, Types.CHAR);
            } else {
                stmt.setString(9, orderHeader.getCemployeeid());
            }
            if (orderHeader.getCbiztype() == null) {
                stmt.setNull(10, Types.CHAR);
            } else {
                stmt.setString(10, orderHeader.getCbiztype());
            }
            if (orderHeader.getCreciever() == null) {
                stmt.setNull(11, Types.CHAR);
            } else {
                stmt.setString(11, orderHeader.getCreciever());
            }
            if (orderHeader.getCgiveinvoicevendor() == null) {
                stmt.setNull(12, Types.CHAR);
            } else {
                stmt.setString(12, orderHeader.getCgiveinvoicevendor());
            }
            if (orderHeader.getCtransmodeid() == null) {
                stmt.setNull(13, Types.CHAR);
            } else {
                stmt.setString(13, orderHeader.getCtransmodeid());
            }
            if (orderHeader.getCtermProtocolid() == null) {
                stmt.setNull(14, Types.CHAR);
            } else {
                stmt.setString(14, orderHeader.getCtermProtocolid());
            }
            if (orderHeader.getIbillstatus() == null) {
                stmt.setNull(15, Types.INTEGER);
            } else {
                stmt.setInt(15, orderHeader.getIbillstatus().intValue());
            }
            if (orderHeader.getVmemo() == null) {
                stmt.setNull(16, Types.CHAR);
            } else {
                stmt.setString(16, orderHeader.getVmemo());
            }
            if (orderHeader.getCaccountyear() == null) {
                stmt.setNull(17, Types.CHAR);
            } else {
                stmt.setString(17, orderHeader.getCaccountyear());
            }
            if (orderHeader.getCoperator() == null) {
                stmt.setNull(18, Types.CHAR);
            } else {
                stmt.setString(18, orderHeader.getCoperator());
            }
            if (orderHeader.getVdef1() == null) {
                stmt.setNull(19, Types.CHAR);
            } else {
                stmt.setString(19, orderHeader.getVdef1());
            }
            if (orderHeader.getVdef2() == null) {
                stmt.setNull(20, Types.CHAR);
            } else {
                stmt.setString(20, orderHeader.getVdef2());
            }
            if (orderHeader.getVdef3() == null) {
                stmt.setNull(21, Types.CHAR);
            } else {
                stmt.setString(21, orderHeader.getVdef3());
            }
            if (orderHeader.getVdef4() == null) {
                stmt.setNull(22, Types.CHAR);
            } else {
                stmt.setString(22, orderHeader.getVdef4());
            }
            if (orderHeader.getVdef5() == null) {
                stmt.setNull(23, Types.CHAR);
            } else {
                stmt.setString(23, orderHeader.getVdef5());
            }
            if (orderHeader.getVdef6() == null) {
                stmt.setNull(24, Types.CHAR);
            } else {
                stmt.setString(24, orderHeader.getVdef6());
            }
            if (orderHeader.getVdef7() == null) {
                stmt.setNull(25, Types.CHAR);
            } else {
                stmt.setString(25, orderHeader.getVdef7());
            }
            if (orderHeader.getVdef8() == null) {
                stmt.setNull(26, Types.CHAR);
            } else {
                stmt.setString(26, orderHeader.getVdef8());
            }
            if (orderHeader.getVdef9() == null) {
                stmt.setNull(27, Types.CHAR);
            } else {
                stmt.setString(27, orderHeader.getVdef9());
            }
            if (orderHeader.getVdef10() == null) {
                stmt.setNull(28, Types.CHAR);
            } else {
                stmt.setString(28, orderHeader.getVdef10());
            }
            //
            if (orderHeader.getVdef11() == null) {
                stmt.setNull(29, Types.CHAR);
            } else {
                stmt.setString(29, orderHeader.getVdef11());
            }
            if (orderHeader.getVdef12() == null) {
                stmt.setNull(30, Types.CHAR);
            } else {
                stmt.setString(30, orderHeader.getVdef12());
            }
            if (orderHeader.getVdef13() == null) {
                stmt.setNull(31, Types.CHAR);
            } else {
                stmt.setString(31, orderHeader.getVdef13());
            }
            if (orderHeader.getVdef14() == null) {
                stmt.setNull(32, Types.CHAR);
            } else {
                stmt.setString(32, orderHeader.getVdef14());
            }
            if (orderHeader.getVdef15() == null) {
                stmt.setNull(33, Types.CHAR);
            } else {
                stmt.setString(33, orderHeader.getVdef15());
            }
            if (orderHeader.getVdef16() == null) {
                stmt.setNull(34, Types.CHAR);
            } else {
                stmt.setString(34, orderHeader.getVdef16());
            }
            if (orderHeader.getVdef17() == null) {
                stmt.setNull(35, Types.CHAR);
            } else {
                stmt.setString(35, orderHeader.getVdef17());
            }
            if (orderHeader.getVdef18() == null) {
                stmt.setNull(36, Types.CHAR);
            } else {
                stmt.setString(36, orderHeader.getVdef18());
            }
            if (orderHeader.getVdef19() == null) {
                stmt.setNull(37, Types.CHAR);
            } else {
                stmt.setString(37, orderHeader.getVdef19());
            }
            if (orderHeader.getVdef20() == null) {
                stmt.setNull(38, Types.CHAR);
            } else {
                stmt.setString(38, orderHeader.getVdef20());
            }
            if (orderHeader.getPKDefDoc1() == null) {
                stmt.setNull(39, Types.CHAR);
            } else {
                stmt.setString(39, orderHeader.getPKDefDoc1());
            }
            if (orderHeader.getPKDefDoc2() == null) {
                stmt.setNull(40, Types.CHAR);
            } else {
                stmt.setString(40, orderHeader.getPKDefDoc2());
            }
            if (orderHeader.getPKDefDoc3() == null) {
                stmt.setNull(41, Types.CHAR);
            } else {
                stmt.setString(41, orderHeader.getPKDefDoc3());
            }
            if (orderHeader.getPKDefDoc4() == null) {
                stmt.setNull(42, Types.CHAR);
            } else {
                stmt.setString(42, orderHeader.getPKDefDoc4());
            }
            if (orderHeader.getPKDefDoc5() == null) {
                stmt.setNull(43, Types.CHAR);
            } else {
                stmt.setString(43, orderHeader.getPKDefDoc5());
            }
            if (orderHeader.getPKDefDoc6() == null) {
                stmt.setNull(44, Types.CHAR);
            } else {
                stmt.setString(44, orderHeader.getPKDefDoc6());
            }
            if (orderHeader.getPKDefDoc7() == null) {
                stmt.setNull(45, Types.CHAR);
            } else {
                stmt.setString(45, orderHeader.getPKDefDoc7());
            }
            if (orderHeader.getPKDefDoc8() == null) {
                stmt.setNull(46, Types.CHAR);
            } else {
                stmt.setString(46, orderHeader.getPKDefDoc8());
            }
            if (orderHeader.getPKDefDoc9() == null) {
                stmt.setNull(47, Types.CHAR);
            } else {
                stmt.setString(47, orderHeader.getPKDefDoc9());
            }
            if (orderHeader.getPKDefDoc10() == null) {
                stmt.setNull(48, Types.CHAR);
            } else {
                stmt.setString(48, orderHeader.getPKDefDoc10());
            }
            if (orderHeader.getPKDefDoc11() == null) {
                stmt.setNull(49, Types.CHAR);
            } else {
                stmt.setString(49, orderHeader.getPKDefDoc11());
            }
            if (orderHeader.getPKDefDoc12() == null) {
                stmt.setNull(50, Types.CHAR);
            } else {
                stmt.setString(50, orderHeader.getPKDefDoc12());
            }
            if (orderHeader.getPKDefDoc13() == null) {
                stmt.setNull(51, Types.CHAR);
            } else {
                stmt.setString(51, orderHeader.getPKDefDoc13());
            }
            if (orderHeader.getPKDefDoc14() == null) {
                stmt.setNull(52, Types.CHAR);
            } else {
                stmt.setString(52, orderHeader.getPKDefDoc14());
            }
            if (orderHeader.getPKDefDoc15() == null) {
                stmt.setNull(53, Types.CHAR);
            } else {
                stmt.setString(53, orderHeader.getPKDefDoc15());
            }
            if (orderHeader.getPKDefDoc16() == null) {
                stmt.setNull(54, Types.CHAR);
            } else {
                stmt.setString(54, orderHeader.getPKDefDoc16());
            }
            if (orderHeader.getPKDefDoc17() == null) {
                stmt.setNull(55, Types.CHAR);
            } else {
                stmt.setString(55, orderHeader.getPKDefDoc17());
            }
            if (orderHeader.getPKDefDoc18() == null) {
                stmt.setNull(56, Types.CHAR);
            } else {
                stmt.setString(56, orderHeader.getPKDefDoc18());
            }
            if (orderHeader.getPKDefDoc19() == null) {
                stmt.setNull(57, Types.CHAR);
            } else {
                stmt.setString(57, orderHeader.getPKDefDoc19());
            }
            if (orderHeader.getPKDefDoc20() == null) {
                stmt.setNull(58, Types.CHAR);
            } else {
                stmt.setString(58, orderHeader.getPKDefDoc20());
            }

            //
            if (orderHeader.getCvendormangid() == null) {
                stmt.setNull(59, Types.CHAR);
            } else {
                stmt.setString(59, orderHeader.getCvendormangid());
            }

            if (orderHeader.getCauditpsn() == null) {
                stmt.setNull(60, Types.CHAR);
            } else {
                stmt.setString(60, orderHeader.getCauditpsn());
            }

            if (orderHeader.getDauditdate() == null) {
                stmt.setNull(61, Types.CHAR);
            } else {
                stmt.setString(61, orderHeader.getDauditdate().toString());
            }
            if (orderHeader.getTlastmaketime() == null) {
                stmt.setNull(62, Types.CHAR);
            } else {
                stmt.setString(62, orderHeader.getTlastmaketime().toString());
            }

            // find record by PK fields:
            stmt.setString(63, orderHeader.getPrimaryKey());
            //
            stmt.executeUpdate();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "updateHeader", new Object[] { orderHeader });
        /*************************************************************/
    }

    /**
     * 用一个VO对象的属性更新数据库中的值。
     *
     * 创建日期：(2001-6-23)
     * @param orderItem nc.vo.sc.order.OrderItemVO
     * @exception java.sql.SQLException 异常说明。
     */
    public void updateItem(OrderItemVO orderItem) throws java.sql.SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "updateItem", new Object[] { orderItem });
        /*************************************************************/

        String sql = "update sc_order_b set corderid = ?, pk_corp = ?, cmangid = ?, cbaseid = ?, nordernum = ?, cassistunit = ?, nassistnum = ?, ndiscountrate = ?, idiscounttaxtype = ?, ntaxrate = ?, ccurrencytypeid = ?, noriginalnetprice = ?, noriginalcurprice = ?, noriginalcurmny = ?, noriginaltaxmny = ?, noriginalsummny = ?, nexchangeotobrate = ?, ntaxmny = ?, nmoney = ?, nsummny = ?, naccumarrvnum = ?, naccumstorenum = ?, naccuminvoicenum = ?, naccumwastnum = ?, dplanarrvdate = ?, cwarehouseid = ?, creceiveaddress = ?, cprojectid = ?, cprojectphaseid = ?, coperator = ?, forderrowstatus = ?, bisactive = ?, cordersource = ?, csourcebillid = ?, csourcebillrow = ?, cupsourcebilltype = ?, cupsourcebillid = ?, cupsourcebillrowid = ?, vmemo = ?, vfree1 = ?, vfree2 = ?, vfree3 = ?, vfree4 = ?, vfree5 = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vdef7 = ?, vdef8 = ?, vdef9 = ?, vdef10 = ?, vdef11 = ?, vdef12 = ?, vdef13 = ?, vdef14 = ?, vdef15 = ?, vdef16 = ?, vdef17 = ?, vdef18 = ?, vdef19 = ?, vdef20 = ?, pk_defdoc1 = ?, pk_defdoc2 = ?, pk_defdoc3 = ?, pk_defdoc4 = ?, pk_defdoc5 = ?, pk_defdoc6 = ?, pk_defdoc7 = ?, pk_defdoc8 = ?, pk_defdoc9 = ?, pk_defdoc10 = ?, pk_defdoc11 = ?, pk_defdoc12 = ?, pk_defdoc13 = ?, pk_defdoc14 = ?, pk_defdoc15 = ?, pk_defdoc16 = ?, pk_defdoc17 = ?, pk_defdoc18 = ?, pk_defdoc19 = ?, pk_defdoc20 = ?, crowno = ?, norgtaxprice = ?, norgnettaxprice = ?, vproducenum = ?, ccontractid = ?, ccontractrowid = ?, ccontractrcode = ?, vpriceauditcode = ?, cpriceauditid = ?, cpriceaudit_bid = ?, cpriceaudit_bb1id = ? where corder_bid = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            // update non PK fields:
            if (orderItem.getCorderid() == null) {
                stmt.setNull(1, Types.CHAR);
            } else {
                stmt.setString(1, orderItem.getCorderid());
            }
            if (orderItem.getPk_corp() == null) {
                stmt.setNull(2, Types.CHAR);
            } else {
                stmt.setString(2, orderItem.getPk_corp());
            }
            if (orderItem.getCmangid() == null) {
                stmt.setNull(3, Types.CHAR);
            } else {
                stmt.setString(3, orderItem.getCmangid());
            }
            if (orderItem.getCbaseid() == null) {
                stmt.setNull(4, Types.CHAR);
            } else {
                stmt.setString(4, orderItem.getCbaseid());
            }
            if (orderItem.getNordernum() == null) {
                stmt.setNull(5, Types.INTEGER);
            } else {
                stmt.setBigDecimal(5, orderItem.getNordernum().toBigDecimal());
            }
            if (orderItem.getCassistunit() == null) {
                stmt.setNull(6, Types.CHAR);
            } else {
                stmt.setString(6, orderItem.getCassistunit());
            }
            if (orderItem.getNassistnum() == null) {
                stmt.setNull(7, Types.INTEGER);
            } else {
                stmt.setBigDecimal(7, orderItem.getNassistnum().toBigDecimal());
            }
            if (orderItem.getNdiscountrate() == null) {
                stmt.setNull(8, Types.INTEGER);
            } else {
                stmt.setBigDecimal(8, orderItem.getNdiscountrate().toBigDecimal());
            }
            if (orderItem.getIdiscounttaxtype() == null) {
                stmt.setNull(9, Types.INTEGER);
            } else {
                stmt.setInt(9, orderItem.getIdiscounttaxtype().intValue());
            }
            if (orderItem.getNtaxrate() == null) {
                stmt.setNull(10, Types.INTEGER);
            } else {
                stmt.setBigDecimal(10, orderItem.getNtaxrate().toBigDecimal());
            }
            if (orderItem.getCcurrencytypeid() == null) {
                stmt.setNull(11, Types.CHAR);
            } else {
                stmt.setString(11, orderItem.getCcurrencytypeid());
            }
            if (orderItem.getNoriginalnetprice() == null) {
                stmt.setNull(12, Types.INTEGER);
            } else {
                stmt.setBigDecimal(12, orderItem.getNoriginalnetprice().toBigDecimal());
            }
            if (orderItem.getNoriginalcurprice() == null) {
                stmt.setNull(13, Types.INTEGER);
            } else {
                stmt.setBigDecimal(13, orderItem.getNoriginalcurprice().toBigDecimal());
            }
            if (orderItem.getNoriginalcurmny() == null) {
                stmt.setNull(14, Types.INTEGER);
            } else {
                stmt.setBigDecimal(14, orderItem.getNoriginalcurmny().toBigDecimal());
            }
            if (orderItem.getNoriginaltaxmny() == null) {
                stmt.setNull(15, Types.INTEGER);
            } else {
                stmt.setBigDecimal(15, orderItem.getNoriginaltaxmny().toBigDecimal());
            }
            if (orderItem.getNoriginalsummny() == null) {
                stmt.setNull(16, Types.INTEGER);
            } else {
                stmt.setBigDecimal(16, orderItem.getNoriginalsummny().toBigDecimal());
            }
            if (orderItem.getNexchangeotobrate() == null) {
                stmt.setNull(17, Types.INTEGER);
            } else {
                stmt.setBigDecimal(17, orderItem.getNexchangeotobrate().toBigDecimal());
            }
            if (orderItem.getNtaxmny() == null) {
                stmt.setNull(18, Types.INTEGER);
            } else {
                stmt.setBigDecimal(18, orderItem.getNtaxmny().toBigDecimal());
            }
            if (orderItem.getNmoney() == null) {
                stmt.setNull(19, Types.INTEGER);
            } else {
                stmt.setBigDecimal(19, orderItem.getNmoney().toBigDecimal());
            }
            if (orderItem.getNsummny() == null) {
                stmt.setNull(20, Types.INTEGER);
            } else {
                stmt.setBigDecimal(20, orderItem.getNsummny().toBigDecimal());
            }
            if (orderItem.getNaccumarrvnum() == null) {
                stmt.setNull(21, Types.INTEGER);
            } else {
                stmt.setBigDecimal(21, orderItem.getNaccumarrvnum().toBigDecimal());
            }
            if (orderItem.getNaccumstorenum() == null) {
                stmt.setNull(22, Types.INTEGER);
            } else {
                stmt.setBigDecimal(22, orderItem.getNaccumstorenum().toBigDecimal());
            }
            if (orderItem.getNaccuminvoicenum() == null) {
                stmt.setNull(23, Types.INTEGER);
            } else {
                stmt.setBigDecimal(23, orderItem.getNaccuminvoicenum().toBigDecimal());
            }
            if (orderItem.getNaccumwastnum() == null) {
                stmt.setNull(24, Types.INTEGER);
            } else {
                stmt.setBigDecimal(24, orderItem.getNaccumwastnum().toBigDecimal());
            }
            if (orderItem.getDplanarrvdate() == null) {
                stmt.setNull(25, Types.CHAR);
            } else {
                stmt.setString(25, orderItem.getDplanarrvdate().toString());
            }
            if (orderItem.getCwarehouseid() == null) {
                stmt.setNull(26, Types.CHAR);
            } else {
                stmt.setString(26, orderItem.getCwarehouseid());
            }
            if (orderItem.getCreceiveaddress() == null) {
                stmt.setNull(27, Types.CHAR);
            } else {
                stmt.setString(27, orderItem.getCreceiveaddress());
            }
            if (orderItem.getCprojectid() == null) {
                stmt.setNull(28, Types.CHAR);
            } else {
                stmt.setString(28, orderItem.getCprojectid());
            }
            if (orderItem.getCprojectphaseid() == null) {
                stmt.setNull(29, Types.CHAR);
            } else {
                stmt.setString(29, orderItem.getCprojectphaseid());
            }
            if (orderItem.getCoperator() == null) {
                stmt.setNull(30, Types.CHAR);
            } else {
                stmt.setString(30, orderItem.getCoperator());
            }
            if (orderItem.getForderrowstatus() == null) {
                stmt.setNull(31, Types.INTEGER);
            } else {
                stmt.setInt(31, orderItem.getForderrowstatus().intValue());
            }
            if (orderItem.getBisactive() == null) {
                stmt.setNull(32, Types.CHAR);
            } else {
                stmt.setString(32, orderItem.getBisactive().booleanValue() ? "0" : "1");
            }
            if (orderItem.getCordersource() == null) {
                stmt.setNull(33, Types.CHAR);
            } else {
                stmt.setString(33, orderItem.getCordersource());
            }
            if (orderItem.getCsourcebillid() == null) {
                stmt.setNull(34, Types.CHAR);
            } else {
                stmt.setString(34, orderItem.getCsourcebillid());
            }
            if (orderItem.getCsourcebillrow() == null) {
                stmt.setNull(35, Types.CHAR);
            } else {
                stmt.setString(35, orderItem.getCsourcebillrow());
            }
            if (orderItem.getCupsourcebilltype() == null) {
                stmt.setNull(36, Types.CHAR);
            } else {
                stmt.setString(36, orderItem.getCupsourcebilltype());
            }
            if (orderItem.getCupsourcebillid() == null) {
                stmt.setNull(37, Types.CHAR);
            } else {
                stmt.setString(37, orderItem.getCupsourcebillid());
            }
            if (orderItem.getCupsourcebillrowid() == null) {
                stmt.setNull(38, Types.CHAR);
            } else {
                stmt.setString(38, orderItem.getCupsourcebillrowid());
            }
            if (orderItem.getVmemo() == null) {
                stmt.setNull(39, Types.CHAR);
            } else {
                stmt.setString(39, orderItem.getVmemo());
            }
            if (orderItem.getVfree1() == null) {
                stmt.setNull(40, Types.CHAR);
            } else {
                stmt.setString(40, orderItem.getVfree1());
            }
            if (orderItem.getVfree2() == null) {
                stmt.setNull(41, Types.CHAR);
            } else {
                stmt.setString(41, orderItem.getVfree2());
            }
            if (orderItem.getVfree3() == null) {
                stmt.setNull(42, Types.CHAR);
            } else {
                stmt.setString(42, orderItem.getVfree3());
            }
            if (orderItem.getVfree4() == null) {
                stmt.setNull(43, Types.CHAR);
            } else {
                stmt.setString(43, orderItem.getVfree4());
            }
            if (orderItem.getVfree5() == null) {
                stmt.setNull(44, Types.CHAR);
            } else {
                stmt.setString(44, orderItem.getVfree5());
            }
            if (orderItem.getVdef1() == null) {
                stmt.setNull(45, Types.CHAR);
            } else {
                stmt.setString(45, orderItem.getVdef1());
            }
            if (orderItem.getVdef2() == null) {
                stmt.setNull(46, Types.CHAR);
            } else {
                stmt.setString(46, orderItem.getVdef2());
            }
            if (orderItem.getVdef3() == null) {
                stmt.setNull(47, Types.CHAR);
            } else {
                stmt.setString(47, orderItem.getVdef3());
            }
            if (orderItem.getVdef4() == null) {
                stmt.setNull(48, Types.CHAR);
            } else {
                stmt.setString(48, orderItem.getVdef4());
            }
            if (orderItem.getVdef5() == null) {
                stmt.setNull(49, Types.CHAR);
            } else {
                stmt.setString(49, orderItem.getVdef5());
            }
            if (orderItem.getVdef6() == null) {
                stmt.setNull(50, Types.CHAR);
            } else {
                stmt.setString(50, orderItem.getVdef6());
            }
            if (orderItem.getVdef7() == null) {
                stmt.setNull(51, Types.CHAR);
            } else {

                stmt.setString(51, orderItem.getVdef7());
            }
            if (orderItem.getVdef8() == null) {
                stmt.setNull(52, Types.CHAR);
            } else {

                stmt.setString(52, orderItem.getVdef8());
            }
            if (orderItem.getVdef9() == null) {
                stmt.setNull(53, Types.CHAR);
            } else {

                stmt.setString(53, orderItem.getVdef9());
            }
            if (orderItem.getVdef10() == null) {
                stmt.setNull(54, Types.CHAR);
            } else {

                stmt.setString(54, orderItem.getVdef10());
            }
            if (orderItem.getVdef11() == null) {
                stmt.setNull(55, Types.CHAR);
            } else {
                stmt.setString(55, orderItem.getVdef11());
            }
            if (orderItem.getVdef12() == null) {
                stmt.setNull(56, Types.CHAR);
            } else {
                stmt.setString(56, orderItem.getVdef12());
            }
            if (orderItem.getVdef13() == null) {
                stmt.setNull(57, Types.CHAR);
            } else {
                stmt.setString(57, orderItem.getVdef13());
            }
            if (orderItem.getVdef14() == null) {
                stmt.setNull(58, Types.CHAR);
            } else {
                stmt.setString(58, orderItem.getVdef14());
            }
            if (orderItem.getVdef15() == null) {
                stmt.setNull(59, Types.CHAR);
            } else {
                stmt.setString(59, orderItem.getVdef15());
            }
            if (orderItem.getVdef16() == null) {
                stmt.setNull(60, Types.CHAR);
            } else {
                stmt.setString(60, orderItem.getVdef16());
            }
            if (orderItem.getVdef17() == null) {
                stmt.setNull(61, Types.CHAR);
            } else {
                stmt.setString(61, orderItem.getVdef17());
            }
            if (orderItem.getVdef18() == null) {
                stmt.setNull(62, Types.CHAR);
            } else {
                stmt.setString(62, orderItem.getVdef18());
            }
            if (orderItem.getVdef19() == null) {
                stmt.setNull(63, Types.CHAR);
            } else {
                stmt.setString(63, orderItem.getVdef19());
            }
            if (orderItem.getVdef20() == null) {
                stmt.setNull(64, Types.CHAR);
            } else {
                stmt.setString(64, orderItem.getVdef20());
            }
            if (orderItem.getPKDefDoc1() == null) {
                stmt.setNull(65, Types.CHAR);
            } else {
                stmt.setString(65, orderItem.getPKDefDoc1());
            }
            if (orderItem.getPKDefDoc2() == null) {
                stmt.setNull(66, Types.CHAR);
            } else {
                stmt.setString(66, orderItem.getPKDefDoc2());
            }
            if (orderItem.getPKDefDoc3() == null) {
                stmt.setNull(67, Types.CHAR);
            } else {
                stmt.setString(67, orderItem.getPKDefDoc3());
            }
            if (orderItem.getPKDefDoc4() == null) {
                stmt.setNull(68, Types.CHAR);
            } else {
                stmt.setString(68, orderItem.getPKDefDoc4());
            }
            if (orderItem.getPKDefDoc5() == null) {
                stmt.setNull(69, Types.CHAR);
            } else {
                stmt.setString(69, orderItem.getPKDefDoc5());
            }
            if (orderItem.getPKDefDoc6() == null) {
                stmt.setNull(70, Types.CHAR);
            } else {
                stmt.setString(70, orderItem.getPKDefDoc6());
            }
            if (orderItem.getPKDefDoc7() == null) {
                stmt.setNull(71, Types.CHAR);
            } else {
                stmt.setString(71, orderItem.getPKDefDoc7());
            }
            if (orderItem.getPKDefDoc8() == null) {
                stmt.setNull(72, Types.CHAR);
            } else {
                stmt.setString(72, orderItem.getPKDefDoc8());
            }
            if (orderItem.getPKDefDoc9() == null) {
                stmt.setNull(73, Types.CHAR);
            } else {
                stmt.setString(73, orderItem.getPKDefDoc9());
            }
            if (orderItem.getPKDefDoc10() == null) {
                stmt.setNull(74, Types.CHAR);
            } else {
                stmt.setString(74, orderItem.getPKDefDoc10());
            }
            if (orderItem.getPKDefDoc11() == null) {
                stmt.setNull(75, Types.CHAR);
            } else {
                stmt.setString(75, orderItem.getPKDefDoc11());
            }
            if (orderItem.getPKDefDoc12() == null) {
                stmt.setNull(76, Types.CHAR);
            } else {
                stmt.setString(76, orderItem.getPKDefDoc12());
            }
            if (orderItem.getPKDefDoc13() == null) {
                stmt.setNull(77, Types.CHAR);
            } else {
                stmt.setString(77, orderItem.getPKDefDoc13());
            }
            if (orderItem.getPKDefDoc14() == null) {
                stmt.setNull(78, Types.CHAR);
            } else {
                stmt.setString(78, orderItem.getPKDefDoc14());
            }
            if (orderItem.getPKDefDoc15() == null) {
                stmt.setNull(79, Types.CHAR);
            } else {
                stmt.setString(79, orderItem.getPKDefDoc15());
            }
            if (orderItem.getPKDefDoc16() == null) {
                stmt.setNull(80, Types.CHAR);
            } else {
                stmt.setString(80, orderItem.getPKDefDoc16());
            }
            if (orderItem.getPKDefDoc17() == null) {
                stmt.setNull(81, Types.CHAR);
            } else {
                stmt.setString(81, orderItem.getPKDefDoc17());
            }
            if (orderItem.getPKDefDoc18() == null) {
                stmt.setNull(82, Types.CHAR);
            } else {
                stmt.setString(82, orderItem.getPKDefDoc18());
            }
            if (orderItem.getPKDefDoc19() == null) {
                stmt.setNull(83, Types.CHAR);
            } else {
                stmt.setString(83, orderItem.getPKDefDoc19());
            }
            if (orderItem.getPKDefDoc20() == null) {
                stmt.setNull(84, Types.CHAR);
            } else {
                stmt.setString(84, orderItem.getPKDefDoc20());
            }

            if (orderItem.getCrowno() == null) {
                stmt.setNull(85, Types.CHAR);
            } else {
                stmt.setString(85, orderItem.getCrowno());
            }
            if (orderItem.getNorgtaxprice() == null) {
                stmt.setNull(86, Types.INTEGER);
            } else {
                stmt.setBigDecimal(86, orderItem.getNorgtaxprice().toBigDecimal());
            }
            if (orderItem.getNorgnettaxprice() == null) {
                stmt.setNull(87, Types.INTEGER);
            } else {
                stmt.setBigDecimal(87, orderItem.getNorgnettaxprice().toBigDecimal());
            }
            //
            if (orderItem.getVproducenum() == null) {
                stmt.setNull(88, Types.CHAR);
            } else {
                stmt.setString(88, orderItem.getVproducenum());
            }
            //
            if (orderItem.getCcontractid() == null) {
                stmt.setNull(89, Types.CHAR);
            } else {
                stmt.setString(89, orderItem.getCcontractid());
            }

            if (orderItem.getCcontractrowid() == null) {
                stmt.setNull(90, Types.CHAR);
            } else {
                stmt.setString(90, orderItem.getCcontractrowid());
            }

            if (orderItem.getCcontractrcode() == null) {
                stmt.setNull(91, Types.CHAR);
            } else {
                stmt.setString(91, orderItem.getCcontractrcode());
            }
            
            if (orderItem.getVpriceauditcode() == null) {
                stmt.setNull(92, Types.CHAR);
            } else {
                stmt.setString(92, orderItem.getVpriceauditcode());
            }
            
            if (orderItem.getCpriceauditid() == null) {
                stmt.setNull(93, Types.CHAR);
            } else {
                stmt.setString(93, orderItem.getCpriceauditid());
            }
            
            if (orderItem.getCpriceaudit_bid() == null) {
                stmt.setNull(94, Types.CHAR);
            } else {
                stmt.setString(94, orderItem.getCpriceaudit_bid());
            }
            
            if (orderItem.getCpriceaudit_bb1id() == null) {
                stmt.setNull(95, Types.CHAR);
            } else {
                stmt.setString(95, orderItem.getCpriceaudit_bb1id());
            }
            //

            // find record by PK fields:
            stmt.setString(96, orderItem.getPrimaryKey());
            //
            stmt.executeUpdate();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "updateItem", new Object[] { orderItem });
        /*************************************************************/
    }

    /**
     * 此处插入方法说明。
     * 创建日期：(01-6-20 15:10:07)
     * @return nc.vo.pub.CircularlyAccessibleValueObject
     * @param bbVO nc.vo.pub.CircularlyAccessibleValueObject
     */
    public OrderItemVO bbToBVO(OrderBbVO bbVO) {

        OrderItemVO itemVO = new OrderItemVO();

        itemVO.setCorderid(bbVO.getCorderid());
        itemVO.setPk_corp(bbVO.getPk_corp());

        itemVO.setCmangid(bbVO.getCmangid());
        itemVO.setCbaseid(bbVO.getCbaseid());

        itemVO.setNordernum(bbVO.getNmaterialnum());
        itemVO.setCassistunit(bbVO.getCassistunit());
        itemVO.setNassistnum(bbVO.getNassistnum());
        itemVO.setNoriginalcurprice(bbVO.getNprice());
        itemVO.setNoriginalcurmny(bbVO.getNmoney());
        itemVO.setDplanarrvdate(bbVO.getDdeliverydate());
        itemVO.setCwarehouseid(bbVO.getCdeliverywarehouse());
        itemVO.setCreceiveaddress(bbVO.getVdeliveryaddress());

        itemVO.setCbbid(bbVO.getCorder_bbid());

        itemVO.setVmemo(bbVO.getVmemo());
        itemVO.setStatus(bbVO.getStatus());
        itemVO.setVdef1(bbVO.getVdef1());
        itemVO.setVdef2(bbVO.getVdef2());
        itemVO.setVdef3(bbVO.getVdef3());
        itemVO.setVdef4(bbVO.getVdef4());
        itemVO.setVdef5(bbVO.getVdef5());
        itemVO.setVdef6(bbVO.getVdef6());
        itemVO.setVfree1(bbVO.getVfree1());
        itemVO.setVfree2(bbVO.getVfree2());
        itemVO.setVfree3(bbVO.getVfree3());
        itemVO.setVfree4(bbVO.getVfree4());
        itemVO.setVfree5(bbVO.getVfree5());

        itemVO.setCinvshow("");
        return itemVO;
    }

    /**
     * 此处插入方法说明。
     * 创建日期：(01-6-20 15:10:07)
     * @return nc.vo.pub.CircularlyAccessibleValueObject
     * @param itemVO nc.vo.pub.CircularlyAccessibleValueObject
     */
    public OrderBbVO bToBbVO(OrderItemVO itemVO) {

        OrderBbVO bbVO = new OrderBbVO();

        bbVO.setCorderid(itemVO.getCorderid());
        bbVO.setCorder_bid(itemVO.getCorder_bid());
        bbVO.setPk_corp(itemVO.getPk_corp());

        bbVO.setCbaseid(itemVO.getCbaseid());
        bbVO.setCmangid(itemVO.getCmangid());

        bbVO.setNmaterialnum(itemVO.getNordernum());
        bbVO.setCassistunit(itemVO.getCassistunit());
        bbVO.setNassistnum(itemVO.getNassistnum());
        bbVO.setNprice(itemVO.getNoriginalcurprice());
        bbVO.setNmoney(itemVO.getNoriginalcurmny());
        bbVO.setDdeliverydate(itemVO.getDplanarrvdate());

        bbVO.setCdeliverywarehouse(itemVO.getCwarehouseid());
        bbVO.setVdeliveryaddress(itemVO.getCreceiveaddress());

        bbVO.setVmemo(itemVO.getVmemo());
        bbVO.setStatus(itemVO.getStatus());
        bbVO.setVdef1(itemVO.getVdef1());
        bbVO.setVdef2(itemVO.getVdef2());
        bbVO.setVdef3(itemVO.getVdef3());
        bbVO.setVdef4(itemVO.getVdef4());
        bbVO.setVdef5(itemVO.getVdef5());
        bbVO.setVdef6(itemVO.getVdef6());
        bbVO.setVfree1(itemVO.getVfree1());
        bbVO.setVfree2(itemVO.getVfree2());
        bbVO.setVfree3(itemVO.getVfree3());
        bbVO.setVfree4(itemVO.getVfree4());
        bbVO.setVfree5(itemVO.getVfree5());

        bbVO.setPrimaryKey(itemVO.getCbbid());

        return bbVO;
    }

    public boolean checkGoing(String billId, String ApproveId, String ApproveDate, String checkNote) throws SQLException {
        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "checkGoing", new Object[] { billId, ApproveId, ApproveDate, checkNote });
        /*************************************************************/

        String sql = "update sc_order set  cauditpsn = ? ,dauditdate = ? , ibillstatus = 2, taudittime = ? where corderid = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            // update
            if (ApproveId == null) {
                stmt.setNull(1, Types.CHAR);
            } else {
                stmt.setString(1, ApproveId);
            }
            if (ApproveDate == null) {
                stmt.setNull(2, Types.CHAR);
            } else {
                stmt.setString(2, ApproveDate);
            }
            stmt.setString(3, (new UFDateTime(new Date())).toString());
            //
            if (billId == null) {
                stmt.setNull(4, Types.CHAR);
            } else {
                stmt.setString(4, billId);
            }
            //
            stmt.executeUpdate();
        } catch (Exception e) {
            throw new SQLException(e.getMessage());
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "checkGoing", new Object[] { billId, ApproveId, ApproveDate, checkNote });
        /*************************************************************/
        return true;

    }
    /**
     * <p>审批流函数
     * 
     * <p>2006-04-14,czp,V5,增加可用量统一处理 
     */
    public boolean checkNoPass(String billId, String ApproveId, String ApproveDate, String checkNote) throws SQLException, BusinessException {
        //
        OrderVO vo = findByPrimaryKey(billId);//
        SCATP atp = new SCATP();
		//since v55, Atp算法重构后的调整，此调用必须在所的VO数据设置完成，保存、修改数据之前
		ArrayList<ATPVO> listRetFromBefore = atp.modifyATPBefore(vo);
        //
        String sql = "update sc_order set  cauditpsn = '"+ApproveId+"' ,dauditdate = '"+ApproveDate+"' , ibillstatus = 4, taudittime = '"+(new UFDateTime(new Date())).toString()+"' where corderid = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            if (billId == null) {
                stmt.setNull(1, Types.CHAR);
            } else {
                stmt.setString(1, billId);
            }
            //
            stmt.executeUpdate();
            
        } catch (Exception e) {
            throw new SQLException(e.getMessage());
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        //since v55, Atp算法重构后的调整，此调用必须在所的VO数据更新完成之后
        atp.modifyATPAfter(vo, listRetFromBefore);
        //
        return true;
    }

    public boolean checkPass(String billId, String ApproveId, String ApproveDate, String checkNote) throws BusinessException, SQLException {
        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "checkPass", new Object[] { billId, ApproveId, ApproveDate, checkNote });
        /*************************************************************/

        try {
            String status = getOrderState(null, billId);
            if (status == null || status.equals("1"))
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000061")/*@res "该单据已被作废,无法审核"*/);
            if (status.equals("3"))
                throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000062")/*@res "该单据已被审核,无法再次审核"*/);
            //if (status.equals("2"))
            //throw new Exception("该单据正在审核中，无法操作！");
        } catch (Exception r) {
            if (r instanceof SQLException)
                throw (SQLException) r;
            else
                throw new BusinessException(r.getMessage());
        }
        String sql = "update sc_order set  cauditpsn = ? ,dauditdate = ? , ibillstatus = 3, taudittime = ? where corderid = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            // update
            if (ApproveId == null) {
                stmt.setNull(1, Types.CHAR);
            } else {
                stmt.setString(1, ApproveId);
            }
            //
            if (ApproveDate == null) {
                stmt.setNull(2, Types.CHAR);
            } else {
                stmt.setString(2, ApproveDate);
            }
            //
            stmt.setString(3, (new UFDateTime(new Date())).toString());
            if (billId == null) {
                stmt.setNull(4, Types.CHAR);
            } else {
                stmt.setString(4, billId);
            }
            //

            stmt.executeUpdate();
        } catch (Exception e) {
            throw new SQLException(e.getMessage());
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "checkPass", new Object[] { billId, ApproveId, ApproveDate, checkNote });
        /*************************************************************/
        return true;

    }

    /**
     * 订单参照请购单
     * 功能描述:检查仓库是否属于库存组织
     * 输入参数:委外订单VO
     * 返回值:不匹配,返回信息;匹配,返回空
     * 异常处理:无
     */
    public String checkWarehouse(OrderVO VO) throws SQLException {
        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "checkWarehouse", new Object[] { VO });
        /*************************************************************/

        String sql = "select pk_calbody from bd_stordoc where dr = 0 and pk_stordoc in ";
        OrderItemVO bodyVO[] = (OrderItemVO[]) VO.getChildrenVO();
        if (bodyVO == null || bodyVO.length == 0)
            return null;

        Vector vTemp = new Vector();
        vTemp.addElement(bodyVO[0].getCwarehouseid());
        for (int i = 1; i < bodyVO.length; i++) {
            if (!vTemp.contains(bodyVO[i].getCwarehouseid()))
                vTemp.addElement(bodyVO[i].getCwarehouseid());
        }

        /*
         for(int i = 0; i < vTemp.size() - 1; i++) sql += vTemp.elementAt(i) + "','";
         sql += vTemp.elementAt(vTemp.size() - 1) + "')";
         */

        //modify by yye begin 解决“IN (‘ID1’，‘ID2’，......)”的用法 ， 在ID*数据量超过1000时在ORACLE上必出现SQL异常!
        String sTemp[] = new String[vTemp.size()];
        vTemp.copyInto(sTemp);
        //临时表
        String strSetId = null;
        try {
            nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
            strSetId = dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_SC_00, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_SC);
        } catch (Exception e) {
            throw new SQLException(e.getMessage());
        }

        sql = sql + strSetId;

        //modify by yye end

        vTemp = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                String s = rs.getString(1);
                if (s != null && !vTemp.contains(s))
                    vTemp.addElement(s);
            }
            if (rs != null)
                rs.close();

        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "checkWarehouse", new Object[] { VO });
        /*************************************************************/

        String pk_calbody = ((OrderHeaderVO) VO.getParentVO()).getCwareid();
        if (vTemp.size() == 0)
            return null;
        if (vTemp.contains(pk_calbody) && vTemp.size() == 1)
            return null;

        return nc.bs.ml.NCLangResOnserver.getInstance().getStrByID("40120001", "UPP40120001-000063")/*@res "库存组织、仓库不匹配"*/;
    }

    /**
     * 根据主键在数据库中删除一个VO对象。
     *
     * 创建日期：(2001-6-20)
     * @param key nc.vo.pub.oid.OID
     * @exception java.sql.SQLException 异常说明。
     */
    public void deleteMaterialItem(OrderBbVO vo) throws java.sql.SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderBbDMO", "deleteMaterialItem", new Object[] { vo });
        /*************************************************************/

        String sql = "update sc_order_bb set dr=1 where corder_bbid = ? ";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, vo.getPrimaryKey());
            stmt.executeUpdate();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderBbDMO", "deleteMaterialItem", new Object[] { vo });
        /*************************************************************/
    }

    /**
     * 用一个VO对象的属性更新数据库中的值。
     *
     * 创建日期：(2001-6-23)
     * @param orderHeader nc.vo.sc.order.OrderHeaderVO
     * @exception java.sql.SQLException 异常说明。
     */
    public void discardBill(String key) throws java.sql.SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "discardBill", new Object[] { key });
        /*************************************************************/

        String sql = "update sc_order set  dr = 1,ibillstatus = 1   where corderid = ? ";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            //

            stmt.setString(1, key);

            //
            stmt.executeUpdate();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        String sql1 = " update sc_order_b set  dr = 1   where corderid = '" + key + "' ";
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql1);
            //
            stmt.executeUpdate();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        //gc
        String sql2 = " update sc_order_ddlb set  dr = 1   where corderid = '" + key + "' ";
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql2);
            //
            stmt.executeUpdate();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        //gc-end
        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "discardBill", new Object[] { key });
        /*************************************************************/
    }

    /**
     * 订单子表(关联名称项,包括已作废表体)
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderItemVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderItemVO[] findAllItemsAllForHeader(String key) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findItemsAllForHeader", new Object[] { key });
        /*************************************************************/
        String patch = "";
        //加工品
        patch += " left join bd_invbasdoc on sc_order_b.cbaseid=bd_invbasdoc.pk_invbasdoc \n";
        //主计量单位
        patch += " left join bd_measdoc measdo1 on bd_invbasdoc.pk_measdoc=measdo1.pk_measdoc   \n";
        //辅计量单位
        patch += " left join bd_measdoc measdo2 on sc_order_b.cassistunit=measdo2.pk_measdoc  \n";
        //仓库
        patch += " left join bd_stordoc on sc_order_b.cwarehouseid=bd_stordoc.pk_stordoc  \n";
        //项目
        patch += " left join bd_jobmngfil on sc_order_b.cprojectid=bd_jobmngfil.pk_jobmngfil  \n";
        patch += " left join bd_jobbasfil on bd_jobbasfil.pk_jobbasfil=bd_jobmngfil.pk_jobbasfil \n ";
        //项目阶段
        patch += " left join bd_jobobjpha on sc_order_b.cprojectphaseid=bd_jobobjpha.pk_jobobjpha  \n";
        patch += " left join bd_jobphase on bd_jobobjpha.pk_jobphase = bd_jobphase.pk_jobphase  \n";
        //币种
        patch += " left join bd_currtype on sc_order_b.ccurrencytypeid = bd_currtype.pk_currtype \n";

        //select table sql
        String select = " \n select corder_bid, corderid, sc_order_b.pk_corp, cmangid, cbaseid, nordernum, \n";
        select += " cassistunit, nassistnum, ndiscountrate, idiscounttaxtype, ntaxrate, \n";
        select += " ccurrencytypeid, noriginalnetprice, noriginalcurprice, noriginalcurmny, \n";
        select += "  noriginaltaxmny, noriginalsummny, nexchangeotobrate, ntaxmny, nmoney, \n";
        select += " nsummny, \n";
        select += " naccumarrvnum, naccumstorenum, naccuminvoicenum, naccumwastnum, \n";
        select += " dplanarrvdate, cwarehouseid, creceiveaddress, cprojectid,  \n";
        select += " cprojectphaseid, coperator, forderrowstatus, bisactive, cordersource, \n";
        select += " csourcebillid, csourcebillrow, cupsourcebilltype, cupsourcebillid, \n";
        select += " cupsourcebillrowid, vmemo, vfree1, vfree2, vfree3, vfree4, vfree5, \n";
        select += " vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10, pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20, crowno, norgtaxprice, norgnettaxprice, nbackarrvnum,nbackstorenum,ccontractid,ccontractrowid,ccontractrcode,vpriceauditcode,cpriceauditid,cpriceaudit_bid,cpriceaudit_bb1id  \n";

        //select name
        StringBuffer strbuf = new StringBuffer();
        //加工品编码、名称、规格、型号
        strbuf.append(" ,invcode,invname,invspec,invtype\n ");
        //单位
        strbuf.append(" ,measdo1.measname\n ");
        //辅单位
        strbuf.append(" ,measdo2.measname\n ");
        //仓库
        strbuf.append(" ,bd_stordoc.storname\n ");
        //项目
        strbuf.append(" ,bd_jobbasfil.jobname\n ");
        //项目阶段
        strbuf.append(" ,bd_jobphase.jobphasename\n ");
        //币种
        strbuf.append(" , bd_currtype.currtypename \n ");

        String sql = select + strbuf.toString() + " from sc_order_b " + patch + " where sc_order_b.dr=0 and corderid = ? order by sc_order_b.crowno";

        OrderItemVO[] orderItems = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, key);
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                OrderItemVO orderItem = new OrderItemVO();
                //
                String corder_bid = rs.getString("corder_bid");
                orderItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
                //
                String corderid = rs.getString("corderid");
                orderItem.setCorderid(corderid == null ? null : corderid.trim());
                //
                String pk_corp = rs.getString("pk_corp");
                orderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                //
                String cmangid = rs.getString("cmangid");
                orderItem.setCmangid(cmangid == null ? null : cmangid.trim());
                //
                String cbaseid = rs.getString("cbaseid");
                orderItem.setCbaseid(cbaseid == null ? null : cbaseid.trim());
                //
                BigDecimal nordernum = rs.getBigDecimal("nordernum");
                orderItem.setNordernum(nordernum == null ? null : new UFDouble(nordernum));
                orderItem.setNoldnum(nordernum == null ? null : new UFDouble(nordernum));
                //
                String cassistunit = rs.getString("cassistunit");
                orderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
                //
                BigDecimal nassistnum = rs.getBigDecimal("nassistnum");
                orderItem.setNassistnum(nassistnum == null ? null : new UFDouble(nassistnum));
                //
                BigDecimal ndiscountrate = rs.getBigDecimal("ndiscountrate");
                orderItem.setNdiscountrate(ndiscountrate == null ? null : new UFDouble(ndiscountrate));
                //
                Integer idiscounttaxtype = (Integer) rs.getObject("idiscounttaxtype");
                orderItem.setIdiscounttaxtype(idiscounttaxtype == null ? null : idiscounttaxtype);
                //
                BigDecimal ntaxrate = rs.getBigDecimal("ntaxrate");
                orderItem.setNtaxrate(ntaxrate == null ? null : new UFDouble(ntaxrate));
                //
                String ccurrencytypeid = rs.getString("ccurrencytypeid");
                orderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
                //
                BigDecimal noriginalnetprice = rs.getBigDecimal("noriginalnetprice");
                orderItem.setNoriginalnetprice(noriginalnetprice == null ? null : new UFDouble(noriginalnetprice));
                //
                BigDecimal noriginalcurprice = rs.getBigDecimal("noriginalcurprice");
                orderItem.setNoriginalcurprice(noriginalcurprice == null ? null : new UFDouble(noriginalcurprice));
                //
                BigDecimal noriginalcurmny = rs.getBigDecimal("noriginalcurmny");
                orderItem.setNoriginalcurmny(noriginalcurmny == null ? null : new UFDouble(noriginalcurmny));
                //
                BigDecimal noriginaltaxmny = rs.getBigDecimal("noriginaltaxmny");
                orderItem.setNoriginaltaxmny(noriginaltaxmny == null ? null : new UFDouble(noriginaltaxmny));
                //
                BigDecimal noriginalsummny = rs.getBigDecimal("noriginalsummny");
                orderItem.setNoriginalsummny(noriginalsummny == null ? null : new UFDouble(noriginalsummny));
                //
                BigDecimal nexchangeotobrate = rs.getBigDecimal("nexchangeotobrate");
                orderItem.setNexchangeotobrate(nexchangeotobrate == null ? null : new UFDouble(nexchangeotobrate));
                //
                BigDecimal ntaxmny = rs.getBigDecimal("ntaxmny");
                orderItem.setNtaxmny(ntaxmny == null ? null : new UFDouble(ntaxmny));
                //
                BigDecimal nmoney = rs.getBigDecimal("nmoney");
                orderItem.setNmoney(nmoney == null ? null : new UFDouble(nmoney));
                //
                BigDecimal nsummny = rs.getBigDecimal("nsummny");
                orderItem.setNsummny(nsummny == null ? null : new UFDouble(nsummny));
                //
                BigDecimal naccumarrvnum = rs.getBigDecimal("naccumarrvnum");
                orderItem.setNaccumarrvnum(naccumarrvnum == null ? null : new UFDouble(naccumarrvnum));
                //
                BigDecimal naccumstorenum = rs.getBigDecimal("naccumstorenum");
                orderItem.setNaccumstorenum(naccumstorenum == null ? null : new UFDouble(naccumstorenum));
                //
                BigDecimal naccuminvoicenum = rs.getBigDecimal("naccuminvoicenum");
                orderItem.setNaccuminvoicenum(naccuminvoicenum == null ? null : new UFDouble(naccuminvoicenum));
                //
                BigDecimal naccumwastnum = rs.getBigDecimal("naccumwastnum");
                orderItem.setNaccumwastnum(naccumwastnum == null ? null : new UFDouble(naccumwastnum));
                //
                String dplanarrvdate = rs.getString("dplanarrvdate");
                orderItem.setDplanarrvdate(dplanarrvdate == null ? null : new UFDate(dplanarrvdate.trim(), false));
                //
                String cwarehouseid = rs.getString("cwarehouseid");
                orderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
                //
                String creceiveaddress = rs.getString("creceiveaddress");
                orderItem.setCreceiveaddress(creceiveaddress == null ? null : creceiveaddress.trim());
                //
                String cprojectid = rs.getString("cprojectid");
                orderItem.setCprojectid(cprojectid == null ? null : cprojectid.trim());
                //
                String cprojectphaseid = rs.getString("cprojectphaseid");
                orderItem.setCprojectphaseid(cprojectphaseid == null ? null : cprojectphaseid.trim());
                //
                String coperator = rs.getString("coperator");
                orderItem.setCoperator(coperator == null ? null : coperator.trim());
                //
                Integer forderrowstatus = (Integer) rs.getObject("forderrowstatus");
                orderItem.setForderrowstatus(forderrowstatus == null ? null : forderrowstatus);
                //
                String bisactive = rs.getString("bisactive");
                if (bisactive == null)
                    orderItem.setBisactive(null);
                else if (bisactive.trim().equals("1"))
                    orderItem.setBisactive(new UFBoolean(false));
                else
                    orderItem.setBisactive(new UFBoolean(true));
                //orderItem.setBisactive(bisactive == null ? null : new UFBoolean(bisactive.trim()));
                //
                String cordersource = rs.getString("cordersource");
                orderItem.setCordersource(cordersource == null ? null : cordersource.trim());
                //
                String csourcebillid = rs.getString("csourcebillid");
                orderItem.setCsourcebillid(csourcebillid == null ? null : csourcebillid.trim());
                //
                String csourcebillrow = rs.getString("csourcebillrow");
                orderItem.setCsourcebillrow(csourcebillrow == null ? null : csourcebillrow.trim());
                //
                String cupsourcebilltype = rs.getString("cupsourcebilltype");
                orderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
                //
                String cupsourcebillid = rs.getString("cupsourcebillid");
                orderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
                //
                String cupsourcebillrowid = rs.getString("cupsourcebillrowid");
                orderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
                //
                String vmemo = rs.getString("vmemo");
                orderItem.setVmemo(vmemo == null ? null : vmemo.trim());
                //
                String vfree1 = rs.getString("vfree1");
                orderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
                //
                String vfree2 = rs.getString("vfree2");
                orderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
                //
                String vfree3 = rs.getString("vfree3");
                orderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
                //
                String vfree4 = rs.getString("vfree4");
                orderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
                //
                String vfree5 = rs.getString("vfree5");
                orderItem.setVfree5(vfree5 == null ? null : vfree5.trim());
                //
                String vdef1 = rs.getString("vdef1");
                orderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
                //
                String vdef2 = rs.getString("vdef2");
                orderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
                //
                String vdef3 = rs.getString("vdef3");
                orderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
                //
                String vdef4 = rs.getString("vdef4");
                orderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
                //
                String vdef5 = rs.getString("vdef5");
                orderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
                //
                String vdef6 = rs.getString("vdef6");
                orderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
                //
                String vdef7 = rs.getString("vdef7");
                orderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
                //
                String vdef8 = rs.getString("vdef8");
                orderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
                //
                String vdef9 = rs.getString("vdef9");
                orderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
                //
                String vdef10 = rs.getString("vdef10");
                orderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
                //
                String vdef11 = rs.getString("vdef11");
                orderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
                //
                String vdef12 = rs.getString("vdef12");
                orderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
                //
                String vdef13 = rs.getString("vdef13");
                orderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
                //
                String vdef14 = rs.getString("vdef14");
                orderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
                //
                String vdef15 = rs.getString("vdef15");
                orderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
                //
                String vdef16 = rs.getString("vdef16");
                orderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
                //
                String vdef17 = rs.getString("vdef17");
                orderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
                //
                String vdef18 = rs.getString("vdef18");
                orderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
                //
                String vdef19 = rs.getString("vdef19");
                orderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
                //
                String vdef20 = rs.getString("vdef20");
                orderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
                //
                String pk_defdoc1 = rs.getString("pk_defdoc1");
                orderItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
                //
                String pk_defdoc2 = rs.getString("pk_defdoc2");
                orderItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
                //
                String pk_defdoc3 = rs.getString("pk_defdoc3");
                orderItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
                //
                String pk_defdoc4 = rs.getString("pk_defdoc4");
                orderItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
                //
                String pk_defdoc5 = rs.getString("pk_defdoc5");
                orderItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
                //
                String pk_defdoc6 = rs.getString("pk_defdoc6");
                orderItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
                //
                String pk_defdoc7 = rs.getString("pk_defdoc7");
                orderItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
                //
                String pk_defdoc8 = rs.getString("pk_defdoc8");
                orderItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
                //
                String pk_defdoc9 = rs.getString("pk_defdoc9");
                orderItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
                //
                String pk_defdoc10 = rs.getString("pk_defdoc10");
                orderItem.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
                //
                String pk_defdoc11 = rs.getString("pk_defdoc11");
                orderItem.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
                //
                String pk_defdoc12 = rs.getString("pk_defdoc12");
                orderItem.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
                //
                String pk_defdoc13 = rs.getString("pk_defdoc13");
                orderItem.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
                //
                String pk_defdoc14 = rs.getString("pk_defdoc14");
                orderItem.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
                //
                String pk_defdoc15 = rs.getString("pk_defdoc15");
                orderItem.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
                //
                String pk_defdoc16 = rs.getString("pk_defdoc16");
                orderItem.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
                //
                String pk_defdoc17 = rs.getString("pk_defdoc17");
                orderItem.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
                //
                String pk_defdoc18 = rs.getString("pk_defdoc18");
                orderItem.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
                //
                String pk_defdoc19 = rs.getString("pk_defdoc19");
                orderItem.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
                //
                String pk_defdoc20 = rs.getString("pk_defdoc20");
                orderItem.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());

                //add name
                String invcode = rs.getString("invcode");
                orderItem.setVinvcode(invcode == null ? null : invcode.trim());
                //
                String invname = rs.getString("invname");
                orderItem.setVinvname(invname == null ? null : invname.trim());
                //
                String invspec = rs.getString("invspec");
                orderItem.setVinvspec(invspec == null ? null : invspec.trim());
                //
                String invtype = rs.getString("invtype");
                orderItem.setVinvtype(invtype == null ? null : invtype.trim());
                //
                String crowno = rs.getString("crowno");
                orderItem.setCrowno(crowno == null ? null : crowno.trim());
                //
                BigDecimal norgtaxprice = rs.getBigDecimal("norgtaxprice");
                orderItem.setNorgtaxprice(norgtaxprice == null ? null : new UFDouble(norgtaxprice));
                //
                BigDecimal norgnettaxprice = rs.getBigDecimal("norgnettaxprice");
                orderItem.setNorgnettaxprice(norgnettaxprice == null ? null : new UFDouble(norgnettaxprice));
                //
                BigDecimal nbackarrvnum = rs.getBigDecimal("nbackarrvnum");
                orderItem.setNbackarrvnum(nbackarrvnum == null ? null : new UFDouble(nbackarrvnum));
                //
                BigDecimal nbackstorenum = rs.getBigDecimal("nbackstorenum");
                orderItem.setNbackstorenum(nbackstorenum == null ? null : new UFDouble(nbackstorenum));
                //
                //
                String ccontractid = rs.getString("ccontractid");
                orderItem.setCcontractid(ccontractid == null ? null : ccontractid.trim());
                //
                //
                String ccontractrowid = rs.getString("ccontractrowid");
                orderItem.setCcontractrowid(ccontractrowid == null ? null : ccontractrowid.trim());
                //
                //
                String ccontractrcode = rs.getString("ccontractrcode");
                orderItem.setCcontractrcode(ccontractrcode == null ? null : ccontractrcode.trim());
                
                String vpriceauditcode = rs.getString("vpriceauditcode");
                orderItem.setVpriceauditcode(vpriceauditcode == null ? null : vpriceauditcode.trim());
                
                String cpriceauditid = rs.getString("cpriceauditid");
                orderItem.setCpriceauditid(cpriceauditid == null ? null : cpriceauditid.trim());
                
                String cpriceaudit_bid = rs.getString("cpriceaudit_bid");
                orderItem.setCpriceaudit_bid(cpriceaudit_bid == null ? null : cpriceaudit_bid.trim());
                
                String cpriceaudit_bb1id = rs.getString("cpriceaudit_bb1id");
                orderItem.setCpriceaudit_bb1id(cpriceaudit_bb1id == null ? null : cpriceaudit_bb1id.trim());
                //
                int index = 106;
                String measdocname = rs.getString(index++);
                orderItem.setVmeasdocname(measdocname == null ? null : measdocname.trim());
                //
                String assunitname = rs.getString(index++);
                orderItem.setVassunitname(assunitname == null ? null : assunitname.trim());
                //
                String storename = rs.getString(index++);
                orderItem.setVwarehousename(storename == null ? null : storename.trim());
                //
                String projectname = rs.getString(index++);
                orderItem.setVprojectname(projectname == null ? null : projectname.trim());
                //
                String projectphasename = rs.getString(index++);
                orderItem.setVprojectphasename(projectphasename == null ? null : projectphasename.trim());
                //
                String currencyname = rs.getString(index++);
                orderItem.setVcurrencyname(currencyname == null ? null : currencyname.trim());
                //

                v.addElement(orderItem);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        orderItems = new OrderItemVO[v.size()];
        if (v.size() > 0) {
            v.copyInto(orderItems);
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findItemsAllForHeader", new Object[] { key });
        /*************************************************************/

        return orderItems;
    }

    /**
     * 计量单位换算信息
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderHeaderVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public BD_ConvertVO[] findBd_Converts(String pk_invbasdoc[], String pk_measdoc[]) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findBd_Converts", new Object[] { pk_invbasdoc, pk_measdoc });
        /*************************************************************/
        if (pk_invbasdoc == null || pk_invbasdoc.length == 0)
            return null;
        if (pk_measdoc == null || pk_measdoc.length == 0)
            return null;

        String sTemp1 = null;
        String sTemp2 = null;
        java.util.ArrayList list1 = new java.util.ArrayList();
        java.util.ArrayList list2 = new java.util.ArrayList();
        java.util.ArrayList listTmp = null;
        for (int i = 0; i < pk_invbasdoc.length; i++) {
            listTmp = new java.util.ArrayList();
            listTmp.add(new Integer(i));
            listTmp.add(pk_invbasdoc[i]);
            list1.add(listTmp);
            listTmp = new java.util.ArrayList();
            listTmp.add(new Integer(i));
            listTmp.add(pk_measdoc[i]);
            list2.add(listTmp);
        }
        try {
            nc.bs.scm.pub.TempTableDMO dmo = new nc.bs.scm.pub.TempTableDMO();
            sTemp1 = dmo.getTempStringTable(nc.vo.scm.pub.TempTableVO.TEMPTABLE_SC_01, new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_SC, "id1" }, new String[] { "int", "char(20)" }, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_SC, list1);
            sTemp2 = dmo.getTempStringTable(nc.vo.scm.pub.TempTableVO.TEMPTABLE_SC_02, new String[] { nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_SC, "id2" }, new String[] { "int", "char(20)" }, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_SC, list2);
        } catch (Exception e) {
            throw new SQLException(e.getMessage());
        }

        String sql = "select a.pk_invbasdoc, a.pk_measdoc, a.fixedflag, a.mainmeasrate ";
        sql += "from bd_convert a, " + sTemp1 + " as b, " + sTemp2 + " as c ";
        sql += "where a.dr = 0 and a.pk_invbasdoc = b.id1 and a.pk_measdoc = c.id2 and b." + nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_SC + " = c." + nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_SC;

        Connection con = null;
        PreparedStatement stmt = null;
        Hashtable t = new Hashtable();
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                String s1 = rs.getString(1);
                String s2 = rs.getString(2);
                // fixedflag :
                String s3 = rs.getString(3);
                // mainmeasrate :
                Object o = rs.getObject(4);

                BD_ConvertVO VO = new BD_ConvertVO();
                if (s3 != null)
                    VO.setBfixedflag(new UFBoolean(s3));
                else
                    VO.setBfixedflag(null);
                if (o != null)
                    VO.setNmainmeasrate(new UFDouble(o.toString()));
                else
                    VO.setNmainmeasrate(null);

                t.put(s1 + s2, VO);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findBd_Converts", new Object[] { pk_invbasdoc, pk_measdoc });
        /*************************************************************/

        BD_ConvertVO VOs[] = new BD_ConvertVO[pk_invbasdoc.length];
        for (int i = 0; i < VOs.length; i++) {
            VOs[i] = new BD_ConvertVO();
            Object o = t.get(pk_invbasdoc[i] + pk_measdoc[i]);
            if (o != null)
                VOs[i] = (BD_ConvertVO) o;
        }

        return VOs;
    }

    /**
     * <p>单据号校验
     * <p>
     * 创建日期：(2001-6-23)
     * @param billcode
     * @exception java.sql.SQLException 异常说明。
     */
    public boolean findBillCode(String billcode) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findBillCode", new Object[] { billcode });
        /*************************************************************/
        String sql = "select vordercode  from sc_order where vordercode = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, billcode);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                return true;
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findBillCode", new Object[] { billcode });
        /*************************************************************/

        return false;
    }

    /**
     * 订单子表(关联名称项)
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderItemVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderItemVO[] findItemsAllForHeader(String key) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findItemsAllForHeader", new Object[] { key });
        /*************************************************************/
        String patch = "";
        //加工品
        patch += " left join bd_invbasdoc on sc_order_b.cbaseid=bd_invbasdoc.pk_invbasdoc  ";
        //主计量单位
        patch += " left join bd_measdoc measdo1 on bd_invbasdoc.pk_measdoc=measdo1.pk_measdoc    ";
        //辅计量单位
        patch += " left join bd_measdoc measdo2 on sc_order_b.cassistunit=measdo2.pk_measdoc   ";
        //仓库
        patch += " left join bd_stordoc on sc_order_b.cwarehouseid=bd_stordoc.pk_stordoc   ";
        //项目
        patch += " left join bd_jobmngfil on sc_order_b.cprojectid=bd_jobmngfil.pk_jobmngfil   ";
        patch += " left join bd_jobbasfil on bd_jobbasfil.pk_jobbasfil=bd_jobmngfil.pk_jobbasfil   ";
        //项目阶段
        patch += " left join bd_jobobjpha on sc_order_b.cprojectphaseid=bd_jobobjpha.pk_jobobjpha   ";
        patch += " left join bd_jobphase on bd_jobobjpha.pk_jobphase = bd_jobphase.pk_jobphase   ";
        //币种
        patch += " left join bd_currtype on sc_order_b.ccurrencytypeid = bd_currtype.pk_currtype  ";

        //select table sql
        String select = "   select corder_bid, corderid, sc_order_b.pk_corp, cmangid, cbaseid, nordernum,  ";
        select += " cassistunit, nassistnum, ndiscountrate, idiscounttaxtype, ntaxrate,  ";
        select += " ccurrencytypeid, noriginalnetprice, noriginalcurprice, noriginalcurmny,  ";
        select += "  noriginaltaxmny, noriginalsummny, nexchangeotobrate, ntaxmny, nmoney,  ";
        select += " nsummny,  ";
        select += " naccumarrvnum, naccumstorenum, naccuminvoicenum, naccumwastnum,  ";
        select += " dplanarrvdate, cwarehouseid, creceiveaddress, cprojectid,   ";
        select += " cprojectphaseid, coperator, forderrowstatus, bisactive, cordersource,  ";
        select += " csourcebillid, csourcebillrow, cupsourcebilltype, cupsourcebillid,  ";
        select += " cupsourcebillrowid, vmemo, vfree1, vfree2, vfree3, vfree4, vfree5,  ";
        select += " vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10" +
            ", vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20" +
            ", pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7" +
            ", pk_defdoc8, pk_defdoc9, pk_defdoc10, pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14" +
            ", pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20" +
            ", crowno, norgtaxprice, norgnettaxprice, vproducenum,ccontractid,ccontractrowid,ccontractrcode" +
            ",vpriceauditcode,cpriceauditid,cpriceaudit_bid,cpriceaudit_bb1id   ";

        //select name
        StringBuffer strbuf = new StringBuffer();
        //加工品编码、名称、规格、型号
        strbuf.append(" ,invcode,invname,invspec,invtype  ");
        //单位
        strbuf.append(" ,measdo1.measname  ");
        //辅单位
        strbuf.append(" ,measdo2.measname  ");
        //仓库
        strbuf.append(" ,bd_stordoc.storname  ");
        //项目
        strbuf.append(" ,bd_jobbasfil.jobname  ");
        //项目阶段
        strbuf.append(" ,bd_jobphase.jobphasename  ");
        //币种
        strbuf.append(" , bd_currtype.currtypename   ");
        //ts
        strbuf.append(" , sc_order_b.ts");
        //
        strbuf.append(" , sc_order_b.nbackarrvnum");
        //
        strbuf.append(" , sc_order_b.nbackstorenum, sc_order_b.csourcebillcode, sc_order_b.csourcebillrowno");

        String sql = select + strbuf.toString() + " from sc_order_b " + patch + " where sc_order_b.dr=0 and corderid = ? order by sc_order_b.crowno";

        OrderItemVO[] orderItems = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, key);
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                OrderItemVO orderItem = new OrderItemVO();
                //
                String corder_bid = rs.getString("corder_bid");
                orderItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
                //
                String corderid = rs.getString("corderid");
                orderItem.setCorderid(corderid == null ? null : corderid.trim());
                //
                String pk_corp = rs.getString("pk_corp");
                orderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                //
                String cmangid = rs.getString("cmangid");
                orderItem.setCmangid(cmangid == null ? null : cmangid.trim());
                //
                String cbaseid = rs.getString("cbaseid");
                orderItem.setCbaseid(cbaseid == null ? null : cbaseid.trim());
                //
                BigDecimal nordernum = rs.getBigDecimal("nordernum");
                orderItem.setNordernum(nordernum == null ? null : new UFDouble(nordernum));
                orderItem.setNoldnum(nordernum == null ? null : new UFDouble(nordernum));
                //
                String cassistunit = rs.getString("cassistunit");
                orderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
                //
                BigDecimal nassistnum = (BigDecimal)rs.getObject("nassistnum");
                orderItem.setNassistnum(nassistnum == null ? null : new UFDouble(nassistnum));
                //
                BigDecimal ndiscountrate = (BigDecimal)rs.getObject("ndiscountrate");
                orderItem.setNdiscountrate(ndiscountrate == null ? null : new UFDouble(ndiscountrate));
                //
                Integer idiscounttaxtype = (Integer) rs.getObject("idiscounttaxtype");
                orderItem.setIdiscounttaxtype(idiscounttaxtype == null ? null : idiscounttaxtype);
                //
                BigDecimal ntaxrate = (BigDecimal)rs.getObject("ntaxrate");
                orderItem.setNtaxrate(ntaxrate == null ? null : new UFDouble(ntaxrate));
                //
                String ccurrencytypeid = rs.getString("ccurrencytypeid");
                orderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
                //
                BigDecimal noriginalnetprice = (BigDecimal)rs.getObject("noriginalnetprice");
                orderItem.setNoriginalnetprice(noriginalnetprice == null ? null : new UFDouble(noriginalnetprice));
                //
                BigDecimal noriginalcurprice = (BigDecimal)rs.getObject("noriginalcurprice");
                orderItem.setNoriginalcurprice(noriginalcurprice == null ? null : new UFDouble(noriginalcurprice));
                //
                BigDecimal noriginalcurmny = (BigDecimal)rs.getObject("noriginalcurmny");
                orderItem.setNoriginalcurmny(noriginalcurmny == null ? null : new UFDouble(noriginalcurmny));
                //
                BigDecimal noriginaltaxmny = (BigDecimal)rs.getObject("noriginaltaxmny");
                orderItem.setNoriginaltaxmny(noriginaltaxmny == null ? null : new UFDouble(noriginaltaxmny));
                //
                BigDecimal noriginalsummny = (BigDecimal)rs.getObject("noriginalsummny");
                orderItem.setNoriginalsummny(noriginalsummny == null ? null : new UFDouble(noriginalsummny));
                //
                BigDecimal nexchangeotobrate = (BigDecimal)rs.getObject("nexchangeotobrate");
                orderItem.setNexchangeotobrate(nexchangeotobrate == null ? null : new UFDouble(nexchangeotobrate));
                //
                BigDecimal ntaxmny = (BigDecimal)rs.getObject("ntaxmny");
                orderItem.setNtaxmny(ntaxmny == null ? null : new UFDouble(ntaxmny));
                //
                BigDecimal nmoney = (BigDecimal)rs.getObject("nmoney");
                orderItem.setNmoney(nmoney == null ? null : new UFDouble(nmoney));
                //
                BigDecimal nsummny = (BigDecimal)rs.getObject("nsummny");
                orderItem.setNsummny(nsummny == null ? null : new UFDouble(nsummny));
                //
                BigDecimal naccumarrvnum = (BigDecimal)rs.getObject("naccumarrvnum");
                orderItem.setNaccumarrvnum(naccumarrvnum == null ? null : new UFDouble(naccumarrvnum));
                //
                BigDecimal naccumstorenum = (BigDecimal)rs.getObject("naccumstorenum");
                orderItem.setNaccumstorenum(naccumstorenum == null ? null : new UFDouble(naccumstorenum));
                //
                BigDecimal naccuminvoicenum = (BigDecimal)rs.getObject("naccuminvoicenum");
                orderItem.setNaccuminvoicenum(naccuminvoicenum == null ? null : new UFDouble(naccuminvoicenum));
                //
                BigDecimal naccumwastnum = (BigDecimal)rs.getObject("naccumwastnum");
                orderItem.setNaccumwastnum(naccumwastnum == null ? null : new UFDouble(naccumwastnum));
                //
                String dplanarrvdate = rs.getString("dplanarrvdate");
                orderItem.setDplanarrvdate(dplanarrvdate == null ? null : new UFDate(dplanarrvdate.trim(), false));
                //
                String cwarehouseid = rs.getString("cwarehouseid");
                orderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
                //
                String creceiveaddress = rs.getString("creceiveaddress");
                orderItem.setCreceiveaddress(creceiveaddress == null ? null : creceiveaddress.trim());
                //
                String cprojectid = rs.getString("cprojectid");
                orderItem.setCprojectid(cprojectid == null ? null : cprojectid.trim());
                //
                String cprojectphaseid = rs.getString("cprojectphaseid");
                orderItem.setCprojectphaseid(cprojectphaseid == null ? null : cprojectphaseid.trim());
                //
                String coperator = rs.getString("coperator");
                orderItem.setCoperator(coperator == null ? null : coperator.trim());
                //
                Integer forderrowstatus = (Integer) rs.getObject("forderrowstatus");
                orderItem.setForderrowstatus(forderrowstatus == null ? null : forderrowstatus);
                //
                String bisactive = rs.getString("bisactive");
                if (bisactive == null)
                    orderItem.setBisactive(null);
                else if (bisactive.trim().equals("1"))
                    orderItem.setBisactive(new UFBoolean(false));
                else
                    orderItem.setBisactive(new UFBoolean(true));
                //orderItem.setBisactive(bisactive == null ? null : new UFBoolean(bisactive.trim()));
                //
                String cordersource = rs.getString("cordersource");
                orderItem.setCordersource(cordersource == null ? null : cordersource.trim());
                //
                String csourcebillid = rs.getString("csourcebillid");
                orderItem.setCsourcebillid(csourcebillid == null ? null : csourcebillid.trim());
                //
                String csourcebillrow = rs.getString("csourcebillrow");
                orderItem.setCsourcebillrow(csourcebillrow == null ? null : csourcebillrow.trim());
                //
                String cupsourcebilltype = rs.getString("cupsourcebilltype");
                orderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
                //
                String cupsourcebillid = rs.getString("cupsourcebillid");
                orderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
                //
                String cupsourcebillrowid = rs.getString("cupsourcebillrowid");
                orderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
                //
                String vmemo = rs.getString("vmemo");
                orderItem.setVmemo(vmemo == null ? null : vmemo.trim());
                //
                String vfree1 = rs.getString("vfree1");
                orderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
                //
                String vfree2 = rs.getString("vfree2");
                orderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
                //
                String vfree3 = rs.getString("vfree3");
                orderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
                //
                String vfree4 = rs.getString("vfree4");
                orderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
                //
                String vfree5 = rs.getString("vfree5");
                orderItem.setVfree5(vfree5 == null ? null : vfree5.trim());
                //
                String vdef1 = rs.getString("vdef1");
                orderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
                //
                String vdef2 = rs.getString("vdef2");
                orderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
                //
                String vdef3 = rs.getString("vdef3");
                orderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
                //
                String vdef4 = rs.getString("vdef4");
                orderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
                //
                String vdef5 = rs.getString("vdef5");
                orderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
                //
                String vdef6 = rs.getString("vdef6");
                orderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
                //
                String vdef7 = rs.getString("vdef7");
                orderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
                //
                String vdef8 = rs.getString("vdef8");
                orderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
                //
                String vdef9 = rs.getString("vdef9");
                orderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
                //
                String vdef10 = rs.getString("vdef10");
                orderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
                //
                String vdef11 = rs.getString("vdef11");
                orderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
                //
                String vdef12 = rs.getString("vdef12");
                orderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
                //
                String vdef13 = rs.getString("vdef13");
                orderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
                //
                String vdef14 = rs.getString("vdef14");
                orderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
                //
                String vdef15 = rs.getString("vdef15");
                orderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
                //
                String vdef16 = rs.getString("vdef16");
                orderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
                //
                String vdef17 = rs.getString("vdef17");
                orderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
                //
                String vdef18 = rs.getString("vdef18");
                orderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
                //
                String vdef19 = rs.getString("vdef19");
                orderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
                //
                String vdef20 = rs.getString("vdef20");
                orderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
                //
                String pk_defdoc1 = rs.getString("pk_defdoc1");
                orderItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
                //
                String pk_defdoc2 = rs.getString("pk_defdoc2");
                orderItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
                //
                String pk_defdoc3 = rs.getString("pk_defdoc3");
                orderItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
                //
                String pk_defdoc4 = rs.getString("pk_defdoc4");
                orderItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
                //
                String pk_defdoc5 = rs.getString("pk_defdoc5");
                orderItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
                //
                String pk_defdoc6 = rs.getString("pk_defdoc6");
                orderItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
                //
                String pk_defdoc7 = rs.getString("pk_defdoc7");
                orderItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
                //
                String pk_defdoc8 = rs.getString("pk_defdoc8");
                orderItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
                //
                String pk_defdoc9 = rs.getString("pk_defdoc9");
                orderItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
                //
                String pk_defdoc10 = rs.getString("pk_defdoc10");
                orderItem.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
                //
                String pk_defdoc11 = rs.getString("pk_defdoc11");
                orderItem.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
                //
                String pk_defdoc12 = rs.getString("pk_defdoc12");
                orderItem.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
                //
                String pk_defdoc13 = rs.getString("pk_defdoc13");
                orderItem.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
                //
                String pk_defdoc14 = rs.getString("pk_defdoc14");
                orderItem.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
                //
                String pk_defdoc15 = rs.getString("pk_defdoc15");
                orderItem.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
                //
                String pk_defdoc16 = rs.getString("pk_defdoc16");
                orderItem.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
                //
                String pk_defdoc17 = rs.getString("pk_defdoc17");
                orderItem.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
                //
                String pk_defdoc18 = rs.getString("pk_defdoc18");
                orderItem.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
                //
                String pk_defdoc19 = rs.getString("pk_defdoc19");
                orderItem.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
                //
                String pk_defdoc20 = rs.getString("pk_defdoc20");
                orderItem.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
                //
                String crowno = rs.getString("crowno");
                orderItem.setCrowno(crowno == null ? null : crowno.trim());
                //
                BigDecimal norgtaxprice = (BigDecimal)rs.getObject("norgtaxprice");
                orderItem.setNorgtaxprice(norgtaxprice == null ? null : new UFDouble(norgtaxprice));
                //
                BigDecimal norgnettaxprice = (BigDecimal)rs.getObject("norgnettaxprice");
                orderItem.setNorgnettaxprice(norgnettaxprice == null ? null : new UFDouble(norgnettaxprice));
                //
                //vproducenum：
                String vproducenum = rs.getString("vproducenum");
                orderItem.setVproducenum(vproducenum == null ? null : vproducenum.trim());

                //
                String ccontractid = rs.getString("ccontractid");
                orderItem.setCcontractid(ccontractid == null ? null : ccontractid.trim());
                //
                //
                String ccontractrowid = rs.getString("ccontractrowid");
                orderItem.setCcontractrowid(ccontractrowid == null ? null : ccontractrowid.trim());
                //
                //
                String ccontractrcode = rs.getString("ccontractrcode");
                orderItem.setCcontractrcode(ccontractrcode == null ? null : ccontractrcode.trim());
                //
                
                String vpriceauditcode = rs.getString("vpriceauditcode");
                orderItem.setVpriceauditcode(vpriceauditcode == null ? null : vpriceauditcode.trim());
                
                String cpriceauditid = rs.getString("cpriceauditid");
                orderItem.setCpriceauditid(cpriceauditid == null ? null : cpriceauditid.trim());
                
                String cpriceaudit_bid = rs.getString("cpriceaudit_bid");
                orderItem.setCpriceaudit_bid(cpriceaudit_bid == null ? null : cpriceaudit_bid.trim());
                
                String cpriceaudit_bb1id = rs.getString("cpriceaudit_bb1id");
                orderItem.setCpriceaudit_bb1id(cpriceaudit_bb1id == null ? null : cpriceaudit_bb1id.trim());

                //add name
                String invcode = rs.getString("invcode");
                orderItem.setVinvcode(invcode == null ? null : invcode.trim());
                //
                String invname = rs.getString("invname");
                orderItem.setVinvname(invname == null ? null : invname.trim());
                //
                String invspec = rs.getString("invspec");
                orderItem.setVinvspec(invspec == null ? null : invspec.trim());
                //
                String invtype = rs.getString("invtype");
                orderItem.setVinvtype(invtype == null ? null : invtype.trim());
                //
                int index = 101;
                String measdocname = rs.getString(index++);
                orderItem.setVmeasdocname(measdocname == null ? null : measdocname.trim());
                //
                String assunitname = rs.getString(index++);
                orderItem.setVassunitname(assunitname == null ? null : assunitname.trim());
                //
                String storename = rs.getString(index++);
                orderItem.setVwarehousename(storename == null ? null : storename.trim());
                //
                String projectname = rs.getString(index++);
                orderItem.setVprojectname(projectname == null ? null : projectname.trim());
                //
                String projectphasename = rs.getString(index++);
                orderItem.setVprojectphasename(projectphasename == null ? null : projectphasename.trim());
                //
                String currencyname = rs.getString(index++);
                orderItem.setVcurrencyname(currencyname == null ? null : currencyname.trim());
                //
                String ts = rs.getString(index++);
                orderItem.setTs(ts == null ? null : ts.trim());
                //nbackarrvnum
                BigDecimal nbackarrvnum = (BigDecimal)rs.getObject(index++);
                orderItem.setNbackarrvnum(nbackarrvnum == null ? null : new UFDouble(nbackarrvnum));
                //nbackstorenum
                BigDecimal nbackstorenum = (BigDecimal)rs.getObject(index++);
                orderItem.setNbackstorenum(nbackstorenum == null ? null : new UFDouble(nbackstorenum));
                String csourcebillcode = rs.getString("csourcebillcode");
                orderItem.setCsourcebillcode(csourcebillcode == null ? null : csourcebillcode.trim());
                String csourcebillrowno = rs.getString("csourcebillrowno");
                orderItem.setCsourcebillrowno(csourcebillrowno == null ? null : csourcebillrowno.trim());

                v.addElement(orderItem);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        orderItems = new OrderItemVO[v.size()];
        if (v.size() > 0) {
            v.copyInto(orderItems);
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findItemsAllForHeader", new Object[] { key });
        /*************************************************************/

        return orderItems;
    }

    /**
     * 其它单据参照用
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderItemVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderItemVO[] findItemsForHeader(String key, String whereString) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findItemsForHeader", new Object[] { key });
        /*************************************************************/
        StringBuffer strbuf = new StringBuffer();
        strbuf.append(" select sc_order_b.corder_bid, sc_order_b.corderid, sc_order_b.pk_corp, sc_order_b.cmangid, sc_order_b.cbaseid, sc_order_b.nordernum,\n ");
        strbuf.append(" sc_order_b.cassistunit, sc_order_b.nassistnum, sc_order_b.ndiscountrate, sc_order_b.idiscounttaxtype, sc_order_b.ntaxrate, sc_order_b.\n ");
        strbuf.append(" ccurrencytypeid, sc_order_b.noriginalnetprice, sc_order_b.noriginalcurprice, sc_order_b.noriginalcurmny, sc_order_b.\n ");
        strbuf.append(" noriginaltaxmny, sc_order_b.noriginalsummny, sc_order_b.nexchangeotobrate, sc_order_b.ntaxmny, sc_order_b.nmoney, sc_order_b.\n ");
        strbuf.append(" nsummny, sc_order_b.\n ");
        strbuf.append(" naccumarrvnum, sc_order_b.naccumstorenum, sc_order_b.naccuminvoicenum, sc_order_b.naccumwastnum, sc_order_b.\n ");
        strbuf.append(" dplanarrvdate, sc_order_b.cwarehouseid, sc_order_b.creceiveaddress, sc_order_b.cprojectid, sc_order_b.\n ");
        strbuf.append(" cprojectphaseid, sc_order_b.coperator, sc_order_b.forderrowstatus, sc_order_b.bisactive, sc_order_b.cordersource, sc_order_b.\n ");
        strbuf.append(" csourcebillid, sc_order_b.csourcebillrow, sc_order_b.cupsourcebilltype, sc_order_b.cupsourcebillid, sc_order_b.\n ");
        strbuf.append(" cupsourcebillrowid, sc_order_b.vmemo, sc_order_b.\n ");
        strbuf.append(" vfree1, sc_order_b.vfree2, sc_order_b.vfree3, sc_order_b.vfree4, sc_order_b.vfree5, sc_order_b.\n ");
        strbuf.append(" vdef1, sc_order_b.vdef2, sc_order_b.vdef3, sc_order_b.vdef4, sc_order_b.vdef5, sc_order_b.vdef6, sc_order_b.vdef7, sc_order_b.vdef8, sc_order_b.vdef9, sc_order_b.vdef10, sc_order_b.vdef11, sc_order_b.vdef12, sc_order_b.vdef13, sc_order_b.vdef14, sc_order_b.vdef15, sc_order_b.vdef16, sc_order_b.vdef17, sc_order_b.vdef18, sc_order_b.vdef19, sc_order_b.vdef20, sc_order_b.pk_defdoc1, sc_order_b.pk_defdoc2, sc_order_b.pk_defdoc3, sc_order_b.pk_defdoc4, sc_order_b.pk_defdoc5, sc_order_b.pk_defdoc6, sc_order_b.pk_defdoc7, sc_order_b.pk_defdoc8, sc_order_b.pk_defdoc9, sc_order_b.pk_defdoc10, sc_order_b.pk_defdoc11, sc_order_b.pk_defdoc12, sc_order_b.pk_defdoc13, sc_order_b.pk_defdoc14, sc_order_b.pk_defdoc15, sc_order_b.pk_defdoc16, sc_order_b.pk_defdoc17, sc_order_b.pk_defdoc18, sc_order_b.pk_defdoc19, sc_order_b.pk_defdoc20 , sc_order_b.ts, sc_order_b.crowno, sc_order_b.norgtaxprice, sc_order_b.norgnettaxprice, sc_order_b.nbackarrvnum,sc_order_b.nbackstorenum, sc_order_b.vproducenum,sc_order_b.ccontractid,sc_order_b.ccontractrowid,sc_order_b.ccontractrcode,sc_order_b.vpriceauditcode,sc_order_b.cpriceauditid,sc_order_b.cpriceaudit_bid,sc_order_b.cpriceaudit_bb1id \n ");
        strbuf.append(" from sc_order_b  \n ");

        //设置过滤表体左连接,注意whereString形式：表名.列名 added by lxd 20070201
        String 
        patch = " inner join sc_order on sc_order.corderid = sc_order_b.corderid  \n";
        patch += " left join bd_cubasdoc on sc_order.cvendorid=bd_cubasdoc.pk_cubasdoc \n";
        patch += " left join bd_psndoc on sc_order.cemployeeid=bd_psndoc.pk_psndoc \n";
        patch += " left join bd_deptdoc on sc_order.cdeptid=bd_deptdoc.pk_deptdoc \n";
        patch += " left join bd_invbasdoc on bd_invbasdoc.pk_invbasdoc = sc_order_b.cbaseid \n";

        strbuf.append(patch);
        strbuf.append(" where sc_order_b.bisactive = '0' and sc_order_b.dr=0 \n ");
        strbuf.append("  and sc_order_b.corderid = ?  \n ");

        if (whereString != null && !whereString.trim().equals(""))
            strbuf.append(" and " + whereString + " \n ");
        strbuf.append(" order by sc_order_b.crowno \n");
        String sql = strbuf.toString();

        OrderItemVO[] orderItems = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, key);
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                OrderItemVO orderItem = new OrderItemVO();
                //
                String corder_bid = rs.getString("corder_bid");
                orderItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
                //
                String corderid = rs.getString("corderid");
                orderItem.setCorderid(corderid == null ? null : corderid.trim());
                //
                String pk_corp = rs.getString("pk_corp");
                orderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                //
                String cmangid = rs.getString("cmangid");
                orderItem.setCmangid(cmangid == null ? null : cmangid.trim());
                //
                String cbaseid = rs.getString("cbaseid");
                orderItem.setCbaseid(cbaseid == null ? null : cbaseid.trim());
                //
                BigDecimal nordernum = rs.getBigDecimal("nordernum");
                orderItem.setNordernum(nordernum == null ? null : new UFDouble(nordernum));
                orderItem.setNoldnum(nordernum == null ? null : new UFDouble(nordernum));
                //
                String cassistunit = rs.getString("cassistunit");
                orderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
                //
                BigDecimal nassistnum = rs.getBigDecimal("nassistnum");
                orderItem.setNassistnum(nassistnum == null ? null : new UFDouble(nassistnum));
                //
                BigDecimal ndiscountrate = rs.getBigDecimal("ndiscountrate");
                orderItem.setNdiscountrate(ndiscountrate == null ? null : new UFDouble(ndiscountrate));
                //
                Integer idiscounttaxtype = (Integer) rs.getObject("idiscounttaxtype");
                orderItem.setIdiscounttaxtype(idiscounttaxtype == null ? null : idiscounttaxtype);
                //
                BigDecimal ntaxrate = rs.getBigDecimal("ntaxrate");
                orderItem.setNtaxrate(ntaxrate == null ? null : new UFDouble(ntaxrate));
                //
                String ccurrencytypeid = rs.getString("ccurrencytypeid");
                orderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
                //
                BigDecimal noriginalnetprice = rs.getBigDecimal("noriginalnetprice");
                orderItem.setNoriginalnetprice(noriginalnetprice == null ? null : new UFDouble(noriginalnetprice));
                //
                BigDecimal noriginalcurprice = rs.getBigDecimal("noriginalcurprice");
                orderItem.setNoriginalcurprice(noriginalcurprice == null ? null : new UFDouble(noriginalcurprice));
                //
                BigDecimal noriginalcurmny = rs.getBigDecimal("noriginalcurmny");
                orderItem.setNoriginalcurmny(noriginalcurmny == null ? null : new UFDouble(noriginalcurmny));
                //
                BigDecimal noriginaltaxmny = rs.getBigDecimal("noriginaltaxmny");
                orderItem.setNoriginaltaxmny(noriginaltaxmny == null ? null : new UFDouble(noriginaltaxmny));
                //
                BigDecimal noriginalsummny = rs.getBigDecimal("noriginalsummny");
                orderItem.setNoriginalsummny(noriginalsummny == null ? null : new UFDouble(noriginalsummny));
                //
                BigDecimal nexchangeotobrate = rs.getBigDecimal("nexchangeotobrate");
                orderItem.setNexchangeotobrate(nexchangeotobrate == null ? null : new UFDouble(nexchangeotobrate));
                //
                BigDecimal ntaxmny = rs.getBigDecimal("ntaxmny");
                orderItem.setNtaxmny(ntaxmny == null ? null : new UFDouble(ntaxmny));
                //
                BigDecimal nmoney = rs.getBigDecimal("nmoney");
                orderItem.setNmoney(nmoney == null ? null : new UFDouble(nmoney));
                //
                BigDecimal nsummny = rs.getBigDecimal("nsummny");
                orderItem.setNsummny(nsummny == null ? null : new UFDouble(nsummny));
                //
                BigDecimal naccumarrvnum = rs.getBigDecimal("naccumarrvnum");
                orderItem.setNaccumarrvnum(naccumarrvnum == null ? null : new UFDouble(naccumarrvnum));
                //
                BigDecimal naccumstorenum = rs.getBigDecimal("naccumstorenum");
                orderItem.setNaccumstorenum(naccumstorenum == null ? null : new UFDouble(naccumstorenum));
                //
                BigDecimal naccuminvoicenum = rs.getBigDecimal("naccuminvoicenum");
                orderItem.setNaccuminvoicenum(naccuminvoicenum == null ? null : new UFDouble(naccuminvoicenum));
                //
                BigDecimal naccumwastnum = rs.getBigDecimal("naccumwastnum");
                orderItem.setNaccumwastnum(naccumwastnum == null ? null : new UFDouble(naccumwastnum));
                //
                String dplanarrvdate = rs.getString("dplanarrvdate");
                orderItem.setDplanarrvdate(dplanarrvdate == null ? null : new UFDate(dplanarrvdate.trim(), false));
                //
                String cwarehouseid = rs.getString("cwarehouseid");
                orderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
                //
                String creceiveaddress = rs.getString("creceiveaddress");
                orderItem.setCreceiveaddress(creceiveaddress == null ? null : creceiveaddress.trim());
                //
                String cprojectid = rs.getString("cprojectid");
                orderItem.setCprojectid(cprojectid == null ? null : cprojectid.trim());
                //
                String cprojectphaseid = rs.getString("cprojectphaseid");
                orderItem.setCprojectphaseid(cprojectphaseid == null ? null : cprojectphaseid.trim());
                //
                String coperator = rs.getString("coperator");
                orderItem.setCoperator(coperator == null ? null : coperator.trim());
                //
                Integer forderrowstatus = (Integer) rs.getObject("forderrowstatus");
                orderItem.setForderrowstatus(forderrowstatus == null ? null : forderrowstatus);
                //
                String bisactive = rs.getString("bisactive");
                if (bisactive == null)
                    orderItem.setBisactive(null);
                else if (bisactive.trim().equals("1"))
                    orderItem.setBisactive(new UFBoolean(false));
                else
                    orderItem.setBisactive(new UFBoolean(true));
                //orderItem.setBisactive(bisactive == null ? null : new UFBoolean(bisactive.trim()));
                //
                String cordersource = rs.getString("cordersource");
                orderItem.setCordersource(cordersource == null ? null : cordersource.trim());
                //
                String csourcebillid = rs.getString("csourcebillid");
                orderItem.setCsourcebillid(csourcebillid == null ? null : csourcebillid.trim());
                //
                String csourcebillrow = rs.getString("csourcebillrow");
                orderItem.setCsourcebillrow(csourcebillrow == null ? null : csourcebillrow.trim());
                //
                String cupsourcebilltype = rs.getString("cupsourcebilltype");
                orderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
                //
                String cupsourcebillid = rs.getString("cupsourcebillid");
                orderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
                //
                String cupsourcebillrowid = rs.getString("cupsourcebillrowid");
                orderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
                //
                String vmemo = rs.getString("vmemo");
                orderItem.setVmemo(vmemo == null ? null : vmemo.trim());
                //
                String vfree1 = rs.getString("vfree1");
                orderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
                //
                String vfree2 = rs.getString("vfree2");
                orderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
                //
                String vfree3 = rs.getString("vfree3");
                orderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
                //
                String vfree4 = rs.getString("vfree4");
                orderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
                //
                String vfree5 = rs.getString("vfree5");
                orderItem.setVfree5(vfree5 == null ? null : vfree5.trim());
                //
                String vdef1 = rs.getString("vdef1");
                orderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
                //
                String vdef2 = rs.getString("vdef2");
                orderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
                //
                String vdef3 = rs.getString("vdef3");
                orderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
                //
                String vdef4 = rs.getString("vdef4");
                orderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
                //
                String vdef5 = rs.getString("vdef5");
                orderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
                //
                String vdef6 = rs.getString("vdef6");
                orderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
                //
                String vdef7 = rs.getString("vdef7");
                orderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
                //
                String vdef8 = rs.getString("vdef8");
                orderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
                //
                String vdef9 = rs.getString("vdef9");
                orderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
                //
                String vdef10 = rs.getString("vdef10");
                orderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
                //
                String vdef11 = rs.getString("vdef11");
                orderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
                //
                String vdef12 = rs.getString("vdef12");
                orderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
                //
                String vdef13 = rs.getString("vdef13");
                orderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
                //
                String vdef14 = rs.getString("vdef14");
                orderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
                //
                String vdef15 = rs.getString("vdef15");
                orderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
                //
                String vdef16 = rs.getString("vdef16");
                orderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
                //
                String vdef17 = rs.getString("vdef17");
                orderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
                //
                String vdef18 = rs.getString("vdef18");
                orderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
                //
                String vdef19 = rs.getString("vdef19");
                orderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
                //
                String vdef20 = rs.getString("vdef20");
                orderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
                //
                String pk_defdoc1 = rs.getString("pk_defdoc1");
                orderItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
                //
                String pk_defdoc2 = rs.getString("pk_defdoc2");
                orderItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
                //
                String pk_defdoc3 = rs.getString("pk_defdoc3");
                orderItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
                //
                String pk_defdoc4 = rs.getString("pk_defdoc4");
                orderItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
                //
                String pk_defdoc5 = rs.getString("pk_defdoc5");
                orderItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
                //
                String pk_defdoc6 = rs.getString("pk_defdoc6");
                orderItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
                //
                String pk_defdoc7 = rs.getString("pk_defdoc7");
                orderItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
                //
                String pk_defdoc8 = rs.getString("pk_defdoc8");
                orderItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
                //
                String pk_defdoc9 = rs.getString("pk_defdoc9");
                orderItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
                //
                String pk_defdoc10 = rs.getString("pk_defdoc10");
                orderItem.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
                //
                String pk_defdoc11 = rs.getString("pk_defdoc11");
                orderItem.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
                //
                String pk_defdoc12 = rs.getString("pk_defdoc12");
                orderItem.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
                //
                String pk_defdoc13 = rs.getString("pk_defdoc13");
                orderItem.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
                //
                String pk_defdoc14 = rs.getString("pk_defdoc14");
                orderItem.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
                //
                String pk_defdoc15 = rs.getString("pk_defdoc15");
                orderItem.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
                //
                String pk_defdoc16 = rs.getString("pk_defdoc16");
                orderItem.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
                //
                String pk_defdoc17 = rs.getString("pk_defdoc17");
                orderItem.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
                //
                String pk_defdoc18 = rs.getString("pk_defdoc18");
                orderItem.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
                //
                String pk_defdoc19 = rs.getString("pk_defdoc19");
                orderItem.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
                //
                String pk_defdoc20 = rs.getString("pk_defdoc20");
                orderItem.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
                // modifid by czp 2002-04-13 11:07
                String ts = rs.getString("ts");
                orderItem.setTs(ts == null ? null : ts.trim());
                String crowno = rs.getString("crowno");
                orderItem.setCrowno(crowno == null ? null : crowno.trim());
                //
                BigDecimal norgtaxprice = rs.getBigDecimal("norgtaxprice");
                orderItem.setNorgtaxprice(norgtaxprice == null ? null : new UFDouble(norgtaxprice));
                //
                BigDecimal norgnettaxprice = rs.getBigDecimal("norgnettaxprice");
                orderItem.setNorgnettaxprice(norgnettaxprice == null ? null : new UFDouble(norgnettaxprice));
                //
                BigDecimal nbackarrvnum = rs.getBigDecimal("nbackarrvnum");
                orderItem.setNbackarrvnum(nbackarrvnum == null ? null : new UFDouble(nbackarrvnum));
                //
                BigDecimal nbackstorenum = rs.getBigDecimal("nbackstorenum");
                orderItem.setNbackstorenum(nbackstorenum == null ? null : new UFDouble(nbackstorenum));
                //vproducenum：
                String vproducenum = rs.getString("vproducenum");
                orderItem.setVproducenum(vproducenum == null ? null : vproducenum.trim());

                //
                String ccontractid = rs.getString("ccontractid");
                orderItem.setCcontractid(ccontractid == null ? null : ccontractid.trim());
                //
                //
                String ccontractrowid = rs.getString("ccontractrowid");
                orderItem.setCcontractrowid(ccontractrowid == null ? null : ccontractrowid.trim());
                //
                //
                String ccontractrcode = rs.getString("ccontractrcode");
                orderItem.setCcontractrcode(ccontractrcode == null ? null : ccontractrcode.trim());
                //
                String vpriceauditcode = rs.getString("vpriceauditcode");
                orderItem.setVpriceauditcode(vpriceauditcode == null ? null : vpriceauditcode.trim());
                
                String cpriceauditid = rs.getString("cpriceauditid");
                orderItem.setCpriceauditid(cpriceauditid == null ? null : cpriceauditid.trim());
                
                String cpriceaudit_bid = rs.getString("cpriceaudit_bid");
                orderItem.setCpriceaudit_bid(cpriceaudit_bid == null ? null : cpriceaudit_bid.trim());
                
                String cpriceaudit_bb1id = rs.getString("cpriceaudit_bb1id");
                orderItem.setCpriceaudit_bb1id(cpriceaudit_bb1id == null ? null : cpriceaudit_bb1id.trim());
                
                

                v.addElement(orderItem);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        orderItems = new OrderItemVO[v.size()];
        if (v.size() > 0) {
            v.copyInto(orderItems);
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findItemsForHeader", new Object[] { key });
        /*************************************************************/

        return orderItems;
    }

    /**
     * 通过主键查找一个VO对象。
     *
     * 创建日期：(2001-6-20)
     * @return nc.vo.sc.order.OrderBbVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderBbVO findMateItemByPrimaryKey(String key) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderBbDMO", "findMateItemByPrimaryKey", new Object[] { key });
        /*************************************************************/

        String sql = "select corder_bbid, corderid, corder_bid, pk_corp, cmangid, cbaseid, nmaterialnum, cassistunit, nassistnum, nprice, nmoney, ddeliverydate, ntotalnum, cdeliverywarehouse, vdeliveryaddress, vmemo, vfree1, vfree2, vfree3, vfree4, vfree5, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6  from sc_order_bb where  corder_bbid = ?";

        OrderBbVO orderBb = null;
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, key);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                orderBb = new OrderBbVO(key);
                //
                String corder_bbid = rs.getString(1);
                orderBb.setCorder_bbid(corder_bbid == null ? null : corder_bbid.trim());
                //
                String corderid = rs.getString(2);
                orderBb.setCorderid(corderid == null ? null : corderid.trim());
                //
                String corder_bid = rs.getString(3);
                orderBb.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
                //
                String pk_corp = rs.getString(4);
                orderBb.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                //
                String cmangid = rs.getString(5);
                orderBb.setCmangid(cmangid == null ? null : cmangid.trim());
                //
                String cbaseid = rs.getString(6);
                orderBb.setCbaseid(cbaseid == null ? null : cbaseid.trim());
                //
                BigDecimal nmaterialnum = rs.getBigDecimal(7);
                orderBb.setNmaterialnum(nmaterialnum == null ? null : new UFDouble(nmaterialnum));
                //
                String cassistunit = rs.getString(8);
                orderBb.setCassistunit(cassistunit == null ? null : cassistunit.trim());
                //
                BigDecimal nassistnum = rs.getBigDecimal(9);
                orderBb.setNassistnum(nassistnum == null ? null : new UFDouble(nassistnum));
                //
                BigDecimal nprice = rs.getBigDecimal(10);
                orderBb.setNprice(nprice == null ? null : new UFDouble(nprice));
                //
                BigDecimal nmoney = rs.getBigDecimal(11);
                orderBb.setNmoney(nmoney == null ? null : new UFDouble(nmoney));
                //
                String ddeliverydate = rs.getString(12);
                orderBb.setDdeliverydate(ddeliverydate == null ? null : new UFDate(ddeliverydate.trim(), false));
                //
                BigDecimal ntotalnum = rs.getBigDecimal(13);
                orderBb.setNtotalnum(ntotalnum == null ? null : new UFDouble(ntotalnum));
                //
                String cdeliverywarehouse = rs.getString(14);
                orderBb.setCdeliverywarehouse(cdeliverywarehouse == null ? null : cdeliverywarehouse.trim());
                //
                String vdeliveryaddress = rs.getString(15);
                orderBb.setVdeliveryaddress(vdeliveryaddress == null ? null : vdeliveryaddress.trim());
                //
                String vmemo = rs.getString(16);
                orderBb.setVmemo(vmemo == null ? null : vmemo.trim());
                //
                String vfree1 = rs.getString(17);
                orderBb.setVfree1(vfree1 == null ? null : vfree1.trim());
                //
                String vfree2 = rs.getString(18);
                orderBb.setVfree2(vfree2 == null ? null : vfree2.trim());
                //
                String vfree3 = rs.getString(19);
                orderBb.setVfree3(vfree3 == null ? null : vfree3.trim());
                //
                String vfree4 = rs.getString(20);
                orderBb.setVfree4(vfree4 == null ? null : vfree4.trim());
                //
                String vfree5 = rs.getString(21);
                orderBb.setVfree5(vfree5 == null ? null : vfree5.trim());
                //
                String vdef1 = rs.getString(22);
                orderBb.setVdef1(vdef1 == null ? null : vdef1.trim());
                //
                String vdef2 = rs.getString(23);
                orderBb.setVdef2(vdef2 == null ? null : vdef2.trim());
                //
                String vdef3 = rs.getString(24);
                orderBb.setVdef3(vdef3 == null ? null : vdef3.trim());
                //
                String vdef4 = rs.getString(25);
                orderBb.setVdef4(vdef4 == null ? null : vdef4.trim());
                //
                String vdef5 = rs.getString(26);
                orderBb.setVdef5(vdef5 == null ? null : vdef5.trim());
                //
                String vdef6 = rs.getString(27);
                orderBb.setVdef6(vdef6 == null ? null : vdef6.trim());
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderBbDMO", "findMateItemByPrimaryKey", new Object[] { key });
        /*************************************************************/

        return orderBb;
    }

    /**
     * 通过主键查找一个VO对象。
     *
     * 创建日期：(2001-6-20)
     * @return nc.vo.sc.order.OrderBbVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderBbVO[] findMateItemForPreItem(String headKey, String itemKey) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderBbDMO", "findMateItemByPrimaryKey", new Object[] { headKey, itemKey });
        /*************************************************************/

        String sql = "select corder_bbid, corderid, corder_bid, pk_corp, cmangid, cbaseid, nmaterialnum, cassistunit, nassistnum, nprice, nmoney, ddeliverydate, ntotalnum, cdeliverywarehouse, vdeliveryaddress, vmemo, vfree1, vfree2, vfree3, vfree4, vfree5, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6   from sc_order_bb  ";
        sql += " where dr=0 ";
        if (headKey != null) {
            sql += "and corderid=? ";

        }
        if (itemKey != null)
            sql += " and corder_bid = ?";

        OrderBbVO orderBbs[] = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            if (headKey != null) {
                stmt.setString(1, headKey);
                if (itemKey != null)
                    stmt.setString(2, itemKey);
            } else if (itemKey != null) {
                stmt.setString(1, itemKey);
            }
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                OrderBbVO orderBb = new OrderBbVO();
                //
                String corder_bbid = rs.getString(1);
                orderBb.setCorder_bbid(corder_bbid == null ? null : corder_bbid.trim());
                //
                String corderid = rs.getString(2);
                orderBb.setCorderid(corderid == null ? null : corderid.trim());
                //
                String corder_bid = rs.getString(3);
                orderBb.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
                //
                String pk_corp = rs.getString(4);
                orderBb.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                //
                String cmangid = rs.getString(5);
                orderBb.setCmangid(cmangid == null ? null : cmangid.trim());
                //
                String cbaseid = rs.getString(6);
                orderBb.setCbaseid(cbaseid == null ? null : cbaseid.trim());
                //
                BigDecimal nmaterialnum = rs.getBigDecimal(7);
                orderBb.setNmaterialnum(nmaterialnum == null ? null : new UFDouble(nmaterialnum));
                //
                String cassistunit = rs.getString(8);
                orderBb.setCassistunit(cassistunit == null ? null : cassistunit.trim());
                //
                BigDecimal nassistnum = rs.getBigDecimal(9);
                orderBb.setNassistnum(nassistnum == null ? null : new UFDouble(nassistnum));
                //
                BigDecimal nprice = rs.getBigDecimal(10);
                orderBb.setNprice(nprice == null ? null : new UFDouble(nprice));
                //
                BigDecimal nmoney = rs.getBigDecimal(11);
                orderBb.setNmoney(nmoney == null ? null : new UFDouble(nmoney));
                //
                String ddeliverydate = rs.getString(12);
                orderBb.setDdeliverydate(ddeliverydate == null ? null : new UFDate(ddeliverydate.trim(), false));
                //
                BigDecimal ntotalnum = rs.getBigDecimal(13);
                orderBb.setNtotalnum(ntotalnum == null ? null : new UFDouble(ntotalnum));
                //
                String cdeliverywarehouse = rs.getString(14);
                orderBb.setCdeliverywarehouse(cdeliverywarehouse == null ? null : cdeliverywarehouse.trim());
                //
                String vdeliveryaddress = rs.getString(15);
                orderBb.setVdeliveryaddress(vdeliveryaddress == null ? null : vdeliveryaddress.trim());
                //
                String vmemo = rs.getString(16);
                orderBb.setVmemo(vmemo == null ? null : vmemo.trim());
                //
                String vfree1 = rs.getString(17);
                orderBb.setVfree1(vfree1 == null ? null : vfree1.trim());
                //
                String vfree2 = rs.getString(18);
                orderBb.setVfree2(vfree2 == null ? null : vfree2.trim());
                //
                String vfree3 = rs.getString(19);
                orderBb.setVfree3(vfree3 == null ? null : vfree3.trim());
                //
                String vfree4 = rs.getString(20);
                orderBb.setVfree4(vfree4 == null ? null : vfree4.trim());
                //
                String vfree5 = rs.getString(21);
                orderBb.setVfree5(vfree5 == null ? null : vfree5.trim());
                //
                String vdef1 = rs.getString(22);
                orderBb.setVdef1(vdef1 == null ? null : vdef1.trim());
                //
                String vdef2 = rs.getString(23);
                orderBb.setVdef2(vdef2 == null ? null : vdef2.trim());
                //
                String vdef3 = rs.getString(24);
                orderBb.setVdef3(vdef3 == null ? null : vdef3.trim());
                //
                String vdef4 = rs.getString(25);
                orderBb.setVdef4(vdef4 == null ? null : vdef4.trim());
                //
                String vdef5 = rs.getString(26);
                orderBb.setVdef5(vdef5 == null ? null : vdef5.trim());
                //
                String vdef6 = rs.getString(27);
                orderBb.setVdef6(vdef6 == null ? null : vdef6.trim());

                v.addElement(orderBb);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        orderBbs = new OrderBbVO[v.size()];
        if (v.size() > 0) {
            v.copyInto(orderBbs);
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderBbDMO", "findMateItemByPrimaryKey", new Object[] { headKey, itemKey });
        /*************************************************************/

        return orderBbs;
    }

    /**
     * <p>查找订单的后续单据（到货单）
     * <p>
     * 创建日期：(2001-6-23)
     * @param billcode
     * @exception java.sql.SQLException 异常说明。
     */
    public String findNextArrBill(String corderid) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findNextArrBill", new Object[] { corderid });
        /*************************************************************/
        String sql = "select carriveorder_bid from po_arriveorder_b where dr=0 and csourcebilltype ='61' and csourcebillid = ? ";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, corderid);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                return rs.getString(1);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findNextArrBill", new Object[] { corderid });
        /*************************************************************/

        return null;
    }

    /**
     * <p>查找订单的后续单据
     * <p>
     * 创建日期：(2001-6-23)
     * @param billcode
     * @exception java.sql.SQLException 异常说明。
     */
    public String findNextBill(String corderid) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findNextBill", new Object[] { corderid });
        /*************************************************************/
        String sql = "select vordercode  from sc_order where vordercode = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, corderid);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                rs.getString(1);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findNextBill", new Object[] { corderid });
        /*************************************************************/

        return null;
    }

    /**
     * <p>查找订单的后续单据(发票)
     * <p>
     * 创建日期：(2001-6-23)
     * @param billcode
     * @exception java.sql.SQLException 异常说明。
     */
    public String findNextInvoiceBill(String corderid) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findNextInvoiceBill", new Object[] { corderid });
        /*************************************************************/
        String sql = "select cinvoice_bid from po_invoice_b where dr=0 and csourcebilltype ='61' and csourcebillid = ? ";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, corderid);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                return rs.getString(1);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findNextInvoiceBill", new Object[] { corderid });
        /*************************************************************/

        return null;
    }

    /**
     * <p>查找订单的后续单据（委外加工入库单）
     * <p>
     * 创建日期：(2001-6-23)
     * @param billcode
     * @exception java.sql.SQLException 异常说明。
     */
    public String findNextWareBill(String corderid) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findNextBill", new Object[] { corderid });
        /*************************************************************/
        String sql = "select cgeneralbid from ic_general_b where dr=0 and csourcetype ='61' and csourcebillhid = ? ";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, corderid);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                return rs.getString(1);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findNextBill", new Object[] { corderid });
        /*************************************************************/

        return null;
    }

    /**
     * 由委外订单头[]查询委外订单VO[]
     * 创建日期：(2003-9-10)
     * @return nc.vo.sc.order.OrderVO[]
     * @param nc.vo.sc.order.OrderHeaderVO[]
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderVO[] findVOsBack(OrderHeaderVO[] headers, String strSQL) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "findItemsForHeader", new Object[] { headers });
        /*************************************************************/

        //select sql
        StringBuffer sb = new StringBuffer("select sc_order_b.corder_bid, sc_order_b.corderid, sc_order_b.pk_corp, sc_order_b.cmangid, sc_order_b.cbaseid, sc_order_b.nordernum,");
        sb.append("sc_order_b.cassistunit, sc_order_b.nassistnum, sc_order_b.ndiscountrate, sc_order_b.idiscounttaxtype, sc_order_b.ntaxrate,");
        sb.append("sc_order_b.ccurrencytypeid, sc_order_b.noriginalnetprice, sc_order_b.noriginalcurprice, sc_order_b.noriginalcurmny,");
        sb.append("sc_order_b.noriginaltaxmny, sc_order_b.noriginalsummny, sc_order_b.nexchangeotobrate, sc_order_b.ntaxmny, sc_order_b.nmoney,");
        sb.append("sc_order_b.nsummny,");
        sb.append("sc_order_b.naccumarrvnum, sc_order_b.naccumstorenum, sc_order_b.naccuminvoicenum, sc_order_b.naccumwastnum,");
        sb.append("sc_order_b.dplanarrvdate, sc_order_b.cwarehouseid, sc_order_b.creceiveaddress, sc_order_b.cprojectid, ");
        sb.append("sc_order_b.cprojectphaseid, sc_order_b.coperator, sc_order_b.forderrowstatus, sc_order_b.bisactive, sc_order_b.cordersource,");
        sb.append("sc_order_b.csourcebillid, sc_order_b.csourcebillrow, sc_order_b.cupsourcebilltype, sc_order_b.cupsourcebillid,");
        sb.append("sc_order_b.cupsourcebillrowid, sc_order_b.vmemo, sc_order_b.vfree1, sc_order_b.vfree2, sc_order_b.vfree3, sc_order_b.vfree4, sc_order_b.vfree5,");
        sb.append("sc_order_b.vdef1, sc_order_b.vdef2, sc_order_b.vdef3, sc_order_b.vdef4, sc_order_b.vdef5, sc_order_b.vdef6, sc_order_b.vdef7, sc_order_b.vdef8, sc_order_b.vdef9, sc_order_b.vdef10, sc_order_b.vdef11, sc_order_b.vdef12, sc_order_b.vdef13, sc_order_b.vdef14, sc_order_b.vdef15, sc_order_b.vdef16, sc_order_b.vdef17, sc_order_b.vdef18, sc_order_b.vdef19, sc_order_b.vdef20, sc_order_b.pk_defdoc1, sc_order_b.pk_defdoc2, sc_order_b.pk_defdoc3, sc_order_b.pk_defdoc4, sc_order_b.pk_defdoc5, sc_order_b.pk_defdoc6, sc_order_b.pk_defdoc7, sc_order_b.pk_defdoc8, sc_order_b.pk_defdoc9, sc_order_b.pk_defdoc10, sc_order_b.pk_defdoc11, sc_order_b.pk_defdoc12, sc_order_b.pk_defdoc13, sc_order_b.pk_defdoc14, sc_order_b.pk_defdoc15, sc_order_b.pk_defdoc16, sc_order_b.pk_defdoc17, sc_order_b.pk_defdoc18, sc_order_b.pk_defdoc19, sc_order_b.pk_defdoc20, sc_order_b.ts, sc_order_b.crowno, sc_order_b.norgtaxprice, sc_order_b.norgnettaxprice, sc_order_b.vproducenum, sc_order_b.ccontractid, sc_order_b.ccontractrowid, sc_order_b.ccontractrcode, sc_order_b.vpriceauditcode, sc_order_b.cpriceauditid, sc_order_b.cpriceaudit_bid, sc_order_b.cpriceaudit_bb1id,");
        sb.append("sc_order_b.nbackarrvnum, sc_order_b.nbackstorenum ");
        sb.append("from sc_order_b ");
        //设置过滤表体左连接,注意whereString形式：表名.列名 added by lxd 20070201
        String 
        patch = " inner join sc_order on sc_order.corderid = sc_order_b.corderid  \n";
        patch += " left join bd_cubasdoc on sc_order.cvendorid=bd_cubasdoc.pk_cubasdoc \n";
        patch += " left join bd_psndoc on sc_order.cemployeeid=bd_psndoc.pk_psndoc \n";
        patch += " left join bd_deptdoc on sc_order.cdeptid=bd_deptdoc.pk_deptdoc \n";
        patch += " left join bd_invbasdoc on bd_invbasdoc.pk_invbasdoc = sc_order_b.cbaseid \n";
        //存货分类
        patch += " left join bd_invcl on bd_invbasdoc.pk_invcl = bd_invcl.pk_invcl ";

        sb.append(patch);
        sb.append(" where sc_order_b.dr=0 ");
        if(PuPubVO.getString_TrimZeroLenAsNull(strSQL) !=null){
        	sb.append(" and (" + strSQL + ") ");
        }
        sb.append(" and (");
        for (int i = 0; i < headers.length; i++) {
            if (headers[i].getPrimaryKey() == null)
                continue;
            if(i == 0 ){
            	sb.append("sc_order_b.corderid ='");
            }else{
            	sb.append("or sc_order_b.corderid ='");
            }
            sb.append(headers[i].getPrimaryKey());
            sb.append("' ");
        }
        sb.append(") ");
        OrderVO[] rsltVos = null;
        OrderItemVO orderItem = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sb.toString());
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                orderItem = new OrderItemVO();
                //
                String corder_bid = rs.getString("corder_bid");
                orderItem.setCorder_bid(corder_bid == null ? null : corder_bid.trim());
                //
                String corderid = rs.getString("corderid");
                orderItem.setCorderid(corderid == null ? null : corderid.trim());
                //
                String pk_corp = rs.getString("pk_corp");
                orderItem.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                //
                String cmangid = rs.getString("cmangid");
                orderItem.setCmangid(cmangid == null ? null : cmangid.trim());
                //
                String cbaseid = rs.getString("cbaseid");
                orderItem.setCbaseid(cbaseid == null ? null : cbaseid.trim());
                //
                BigDecimal nordernum = rs.getBigDecimal("nordernum");
                orderItem.setNordernum(nordernum == null ? null : new UFDouble(nordernum));
                orderItem.setNoldnum(nordernum == null ? null : new UFDouble(nordernum));
                //
                String cassistunit = rs.getString("cassistunit");
                orderItem.setCassistunit(cassistunit == null ? null : cassistunit.trim());
                //
                BigDecimal nassistnum = rs.getBigDecimal("nassistnum");
                orderItem.setNassistnum(nassistnum == null ? null : new UFDouble(nassistnum));
                //
                BigDecimal ndiscountrate = rs.getBigDecimal("ndiscountrate");
                orderItem.setNdiscountrate(ndiscountrate == null ? null : new UFDouble(ndiscountrate));
                //
                Integer idiscounttaxtype = (Integer) rs.getObject("idiscounttaxtype");
                orderItem.setIdiscounttaxtype(idiscounttaxtype == null ? null : idiscounttaxtype);
                //
                BigDecimal ntaxrate = rs.getBigDecimal("ntaxrate");
                orderItem.setNtaxrate(ntaxrate == null ? null : new UFDouble(ntaxrate));
                //
                String ccurrencytypeid = rs.getString("ccurrencytypeid");
                orderItem.setCcurrencytypeid(ccurrencytypeid == null ? null : ccurrencytypeid.trim());
                //
                BigDecimal noriginalnetprice = rs.getBigDecimal("noriginalnetprice");
                orderItem.setNoriginalnetprice(noriginalnetprice == null ? null : new UFDouble(noriginalnetprice));
                //
                BigDecimal noriginalcurprice = rs.getBigDecimal("noriginalcurprice");
                orderItem.setNoriginalcurprice(noriginalcurprice == null ? null : new UFDouble(noriginalcurprice));
                //
                BigDecimal noriginalcurmny = rs.getBigDecimal("noriginalcurmny");
                orderItem.setNoriginalcurmny(noriginalcurmny == null ? null : new UFDouble(noriginalcurmny));
                //
                BigDecimal noriginaltaxmny = rs.getBigDecimal("noriginaltaxmny");
                orderItem.setNoriginaltaxmny(noriginaltaxmny == null ? null : new UFDouble(noriginaltaxmny));
                //
                BigDecimal noriginalsummny = rs.getBigDecimal("noriginalsummny");
                orderItem.setNoriginalsummny(noriginalsummny == null ? null : new UFDouble(noriginalsummny));
                //
                BigDecimal nexchangeotobrate = rs.getBigDecimal("nexchangeotobrate");
                orderItem.setNexchangeotobrate(nexchangeotobrate == null ? null : new UFDouble(nexchangeotobrate));
                //
                BigDecimal ntaxmny = rs.getBigDecimal("ntaxmny");
                orderItem.setNtaxmny(ntaxmny == null ? null : new UFDouble(ntaxmny));
                //
                BigDecimal nmoney = rs.getBigDecimal("nmoney");
                orderItem.setNmoney(nmoney == null ? null : new UFDouble(nmoney));
                //
                BigDecimal nsummny = rs.getBigDecimal("nsummny");
                orderItem.setNsummny(nsummny == null ? null : new UFDouble(nsummny));
                //
                BigDecimal naccumarrvnum = rs.getBigDecimal("naccumarrvnum");
                orderItem.setNaccumarrvnum(naccumarrvnum == null ? null : new UFDouble(naccumarrvnum));
                //
                BigDecimal naccumstorenum = rs.getBigDecimal("naccumstorenum");
                orderItem.setNaccumstorenum(naccumstorenum == null ? null : new UFDouble(naccumstorenum));
                //
                BigDecimal naccuminvoicenum = rs.getBigDecimal("naccuminvoicenum");
                orderItem.setNaccuminvoicenum(naccuminvoicenum == null ? null : new UFDouble(naccuminvoicenum));
                //
                BigDecimal naccumwastnum = rs.getBigDecimal("naccumwastnum");
                orderItem.setNaccumwastnum(naccumwastnum == null ? null : new UFDouble(naccumwastnum));
                //
                String dplanarrvdate = rs.getString("dplanarrvdate");
                orderItem.setDplanarrvdate(dplanarrvdate == null ? null : new UFDate(dplanarrvdate.trim(), false));
                //
                String cwarehouseid = rs.getString("cwarehouseid");
                orderItem.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
                //
                String creceiveaddress = rs.getString("creceiveaddress");
                orderItem.setCreceiveaddress(creceiveaddress == null ? null : creceiveaddress.trim());
                //
                String cprojectid = rs.getString("cprojectid");
                orderItem.setCprojectid(cprojectid == null ? null : cprojectid.trim());
                //
                String cprojectphaseid = rs.getString("cprojectphaseid");
                orderItem.setCprojectphaseid(cprojectphaseid == null ? null : cprojectphaseid.trim());
                //
                String coperator = rs.getString("coperator");
                orderItem.setCoperator(coperator == null ? null : coperator.trim());
                //
                Integer forderrowstatus = (Integer) rs.getObject("forderrowstatus");
                orderItem.setForderrowstatus(forderrowstatus == null ? null : forderrowstatus);
                //
                String bisactive = rs.getString("bisactive");
                if (bisactive == null)
                    orderItem.setBisactive(null);
                else if (bisactive.trim().equals("1"))
                    orderItem.setBisactive(new UFBoolean(false));
                else
                    orderItem.setBisactive(new UFBoolean(true));
                //orderItem.setBisactive(bisactive == null ? null : new UFBoolean(bisactive.trim()));
                //
                String cordersource = rs.getString("cordersource");
                orderItem.setCordersource(cordersource == null ? null : cordersource.trim());
                //
                String csourcebillid = rs.getString("csourcebillid");
                orderItem.setCsourcebillid(csourcebillid == null ? null : csourcebillid.trim());
                //
                String csourcebillrow = rs.getString("csourcebillrow");
                orderItem.setCsourcebillrow(csourcebillrow == null ? null : csourcebillrow.trim());
                //
                String cupsourcebilltype = rs.getString("cupsourcebilltype");
                orderItem.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
                //
                String cupsourcebillid = rs.getString("cupsourcebillid");
                orderItem.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
                //
                String cupsourcebillrowid = rs.getString("cupsourcebillrowid");
                orderItem.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
                //
                String vmemo = rs.getString("vmemo");
                orderItem.setVmemo(vmemo == null ? null : vmemo.trim());
                //
                String vfree1 = rs.getString("vfree1");
                orderItem.setVfree1(vfree1 == null ? null : vfree1.trim());
                //
                String vfree2 = rs.getString("vfree2");
                orderItem.setVfree2(vfree2 == null ? null : vfree2.trim());
                //
                String vfree3 = rs.getString("vfree3");
                orderItem.setVfree3(vfree3 == null ? null : vfree3.trim());
                //
                String vfree4 = rs.getString("vfree4");
                orderItem.setVfree4(vfree4 == null ? null : vfree4.trim());
                //
                String vfree5 = rs.getString("vfree5");
                orderItem.setVfree5(vfree5 == null ? null : vfree5.trim());
                //
                String vdef1 = rs.getString("vdef1");
                orderItem.setVdef1(vdef1 == null ? null : vdef1.trim());
                //
                String vdef2 = rs.getString("vdef2");
                orderItem.setVdef2(vdef2 == null ? null : vdef2.trim());
                //
                String vdef3 = rs.getString("vdef3");
                orderItem.setVdef3(vdef3 == null ? null : vdef3.trim());
                //
                String vdef4 = rs.getString("vdef4");
                orderItem.setVdef4(vdef4 == null ? null : vdef4.trim());
                //
                String vdef5 = rs.getString("vdef5");
                orderItem.setVdef5(vdef5 == null ? null : vdef5.trim());
                //
                String vdef6 = rs.getString("vdef6");
                orderItem.setVdef6(vdef6 == null ? null : vdef6.trim());
                //
                String vdef7 = rs.getString("vdef7");
                orderItem.setVdef7(vdef7 == null ? null : vdef7.trim());
                //
                String vdef8 = rs.getString("vdef8");
                orderItem.setVdef8(vdef8 == null ? null : vdef8.trim());
                //
                String vdef9 = rs.getString("vdef9");
                orderItem.setVdef9(vdef9 == null ? null : vdef9.trim());
                //
                String vdef10 = rs.getString("vdef10");
                orderItem.setVdef10(vdef10 == null ? null : vdef10.trim());
                //
                String vdef11 = rs.getString("vdef11");
                orderItem.setVdef11(vdef11 == null ? null : vdef11.trim());
                //
                String vdef12 = rs.getString("vdef12");
                orderItem.setVdef12(vdef12 == null ? null : vdef12.trim());
                //
                String vdef13 = rs.getString("vdef13");
                orderItem.setVdef13(vdef13 == null ? null : vdef13.trim());
                //
                String vdef14 = rs.getString("vdef14");
                orderItem.setVdef14(vdef14 == null ? null : vdef14.trim());
                //
                String vdef15 = rs.getString("vdef15");
                orderItem.setVdef15(vdef15 == null ? null : vdef15.trim());
                //
                String vdef16 = rs.getString("vdef16");
                orderItem.setVdef16(vdef16 == null ? null : vdef16.trim());
                //
                String vdef17 = rs.getString("vdef17");
                orderItem.setVdef17(vdef17 == null ? null : vdef17.trim());
                //
                String vdef18 = rs.getString("vdef18");
                orderItem.setVdef18(vdef18 == null ? null : vdef18.trim());
                //
                String vdef19 = rs.getString("vdef19");
                orderItem.setVdef19(vdef19 == null ? null : vdef19.trim());
                //
                String vdef20 = rs.getString("vdef20");
                orderItem.setVdef20(vdef20 == null ? null : vdef20.trim());
                //
                String pk_defdoc1 = rs.getString("pk_defdoc1");
                orderItem.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
                //
                String pk_defdoc2 = rs.getString("pk_defdoc2");
                orderItem.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
                //
                String pk_defdoc3 = rs.getString("pk_defdoc3");
                orderItem.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
                //
                String pk_defdoc4 = rs.getString("pk_defdoc4");
                orderItem.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
                //
                String pk_defdoc5 = rs.getString("pk_defdoc5");
                orderItem.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
                //
                String pk_defdoc6 = rs.getString("pk_defdoc6");
                orderItem.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
                //
                String pk_defdoc7 = rs.getString("pk_defdoc7");
                orderItem.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
                //
                String pk_defdoc8 = rs.getString("pk_defdoc8");
                orderItem.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
                //
                String pk_defdoc9 = rs.getString("pk_defdoc9");
                orderItem.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
                //
                String pk_defdoc10 = rs.getString("pk_defdoc10");
                orderItem.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
                //
                String pk_defdoc11 = rs.getString("pk_defdoc11");
                orderItem.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
                //
                String pk_defdoc12 = rs.getString("pk_defdoc12");
                orderItem.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
                //
                String pk_defdoc13 = rs.getString("pk_defdoc13");
                orderItem.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
                //
                String pk_defdoc14 = rs.getString("pk_defdoc14");
                orderItem.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
                //
                String pk_defdoc15 = rs.getString("pk_defdoc15");
                orderItem.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
                //
                String pk_defdoc16 = rs.getString("pk_defdoc16");
                orderItem.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
                //
                String pk_defdoc17 = rs.getString("pk_defdoc17");
                orderItem.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
                //
                String pk_defdoc18 = rs.getString("pk_defdoc18");
                orderItem.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
                //
                String pk_defdoc19 = rs.getString("pk_defdoc19");
                orderItem.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
                //
                String pk_defdoc20 = rs.getString("pk_defdoc20");
                orderItem.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
                //ts
                String ts = rs.getString("ts");
                orderItem.setTs(ts == null ? null : ts.trim());
                //crowno
                String crowno = rs.getString("crowno");
                orderItem.setCrowno(crowno == null ? null : crowno.trim());
                //
                BigDecimal norgtaxprice = rs.getBigDecimal("norgtaxprice");
                orderItem.setNorgtaxprice(norgtaxprice == null ? null : new UFDouble(norgtaxprice));
                //
                BigDecimal norgnettaxprice = rs.getBigDecimal("norgnettaxprice");
                orderItem.setNorgnettaxprice(norgnettaxprice == null ? null : new UFDouble(norgnettaxprice));
                //
                //			vproducenum：
                String vproducenum = rs.getString("vproducenum");
                orderItem.setVproducenum(vproducenum == null ? null : vproducenum.trim());
                //
                String ccontractid = rs.getString("ccontractid");
                orderItem.setCcontractid(ccontractid == null ? null : ccontractid.trim());
                //
                //
                String ccontractrowid = rs.getString("ccontractrowid");
                orderItem.setCcontractrowid(ccontractrowid == null ? null : ccontractrowid.trim());
                //
                //
                String ccontractrcode = rs.getString("ccontractrcode");
                orderItem.setCcontractrcode(ccontractrcode == null ? null : ccontractrcode.trim());
                //
                String vpriceauditcode = rs.getString("vpriceauditcode");
                orderItem.setVpriceauditcode(vpriceauditcode == null ? null : vpriceauditcode.trim());
                
                String cpriceauditid = rs.getString("cpriceauditid");
                orderItem.setCpriceauditid(cpriceauditid == null ? null : cpriceauditid.trim());
                
                String cpriceaudit_bid = rs.getString("cpriceaudit_bid");
                orderItem.setCpriceaudit_bid(cpriceaudit_bid == null ? null : cpriceaudit_bid.trim());
                
                String cpriceaudit_bb1id = rs.getString("cpriceaudit_bb1id");
                orderItem.setCpriceaudit_bb1id(cpriceaudit_bb1id == null ? null : cpriceaudit_bb1id.trim());
                //
                BigDecimal nbackarrvnum = rs.getBigDecimal("nbackarrvnum");
                orderItem.setNbackarrvnum(nbackarrvnum == null ? null : new UFDouble(nbackarrvnum));
                //
                BigDecimal nbackstorenum = rs.getBigDecimal("nbackstorenum");
                orderItem.setNbackstorenum(nbackstorenum == null ? null : new UFDouble(nbackstorenum));

                v.addElement(orderItem);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        if (v.size() > 0) {
            OrderItemVO[] orderItems = new OrderItemVO[v.size()];
            v.copyInto(orderItems);
            Hashtable hTmp = nc.bs.sc.pub.PublicDMO.getHashBodyByHeadKey(orderItems, "corderid");
            rsltVos = new OrderVO[headers.length];
            for (int i = 0; i < headers.length; i++) {
                rsltVos[i] = new OrderVO();
                rsltVos[i].setParentVO(headers[i]);
                if (headers[i].getPrimaryKey() == null)
                    continue;
                rsltVos[i].setChildrenVO((OrderItemVO[]) hTmp.get(headers[i].getPrimaryKey()));
            }
        }
        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "findItemsForHeader", new Object[] { headers });
        /*************************************************************/

        return rsltVos;
    }

    /**
     * 订单状态(审核、弃审、关闭、打开时需判断)
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderHeaderVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public String getOrderState(String pos, String id) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "isAuditState", new Object[] { pos, id });
        /*************************************************************/
        if (id == null)
            return null;

        String sql = "";
        if (pos == null || pos.trim().equals(""))
            sql = "select ibillstatus from sc_order where  corderid = ? and dr=0  ";
        else
            sql = " select ibillstatus from sc_order left join sc_order_b on sc_order.corderid = sc_order_b.corderid where sc_order_b.corder_bid = ?  ";

        Integer ibillstatus = null;
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, id);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                // ibillstatus :
                ibillstatus = (Integer) rs.getObject(1);

            }

        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "isAuditState", new Object[] { pos, id });
        /*************************************************************/
        //if (ibillstatus.intValue() == 0 || ibillstatus.intValue() == 4)
        //return new UFBoolean(false);
        //if (ibillstatus.intValue() == 3)
        //return new UFBoolean(true);
        if (ibillstatus == null)
            return null;
        else
            return ibillstatus.toString();
    }

    /**
     * 得到存货主计量ID
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderHeaderVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public String getPk_measdoc(String cbaseid) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "getPk_measdoc", new Object[] { cbaseid });
        /*************************************************************/
        if (cbaseid == null)
            return "";

        String sql = "select pk_measdoc from bd_invbasdoc where  pk_invbasdoc = ? ";

        String pk_measdoc = "";
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);

            stmt.setString(1, cbaseid);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                pk_measdoc = rs.getString(1);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "getPk_measdoc", new Object[] { cbaseid });
        /*************************************************************/

        return pk_measdoc;
    }

    /**
     * 得到生产档案主页ID，后添加取前段提前期（备料计划：计划开工日期 用）
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderHeaderVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public Object[] getPk_produce(String pk_corp, String cbaseid, String pk_calbody) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "getPk_produce", new Object[] { pk_corp, cbaseid });
        /*************************************************************/
        if (pk_corp == null || cbaseid == null)
            return new String[2];

        String sql = "select pk_produce ,prevahead from bd_produce where pk_corp = ?  and pk_invbasdoc = ? and pk_calbody =? ";

        Object[] produceInfo = new Object[2];
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, pk_corp);
            stmt.setString(2, cbaseid);
            stmt.setString(3, pk_calbody);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                produceInfo[0] = rs.getString(1);
                produceInfo[1] = rs.getObject(2);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "getPk_produce", new Object[] { pk_corp, cbaseid });
        /*************************************************************/

        return produceInfo;
    }

    /**
     * 请购单状态(订单参照请购单时判断)
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderHeaderVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public String getPrayState(String pos, String id) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "getPrayState", new Object[] { pos, id });
        /*************************************************************/
        if (id == null)
            return null;

        String sql = "";

        sql = "select ibillstatus from po_praybill where  cpraybillid = ?  and dr = 0 ";

        Integer ibillstatus = null;
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, id);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                // ibillstatus :
                ibillstatus = (Integer) rs.getObject(1);

            }

        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "getPrayState", new Object[] { pos, id });
        /*************************************************************/
        if (ibillstatus == null)
            return null;
        else
            return ibillstatus.toString();
    }

    /**
     * 此处插入方法说明。
     * 功能描述:通过上级存货分类CODE获得下级存货分类CODE
     * 输入参数:上级存货分类CODE，查询条件操作符号（=,<,>,like等等）
     * 返回值:
     * 异常处理:
     * 日期:2002/07/19
     */
    public String[] getSubInvClassCode(String cInvClassCode, String sOpera) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.ps.cost.CostanalyseDMO", "getSubInvClassCode", new Object[] { cInvClassCode, sOpera });
        /*************************************************************/

        String sql = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        String fatherCode[] = null;
        try {
            con = getConnection();

            if (sOpera.toLowerCase().trim().equals("like")) {
                sql = "select invclasscode from bd_invcl where invclasscode like '%" + cInvClassCode + "%'";
                stmt = con.prepareStatement(sql);
                rs = stmt.executeQuery();

                while (rs.next()) {
                    String s = rs.getString(1);
                    if (s != null && s.trim().length() > 0)
                        v.addElement(s);
                }
                if (stmt != null)
                    stmt.close();
                if (v.size() > 0) {
                    fatherCode = new String[v.size()];
                    v.copyInto(fatherCode);
                }
            } else {
                fatherCode = new String[1];
                fatherCode[0] = cInvClassCode;
            }

            v = new Vector();
            sql = "select invclasscode from bd_invcl where invclasslev >= (select invclasslev from bd_invcl where invclasscode = ? )";
            stmt = con.prepareStatement(sql);

            for (int i = 0; i < fatherCode.length; i++) {
                stmt.setString(1, fatherCode[i]);
                rs = stmt.executeQuery();
                //
                while (rs.next()) {
                    String s = rs.getString(1);
                    if (s != null && s.trim().length() > 0) {
                        int index = s.indexOf(fatherCode[i]);
                        if (index >= 0)
                            v.addElement(s);
                    }
                }
                if (rs != null)
                    rs.close();
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.ps.cost.CostanalyseDMO", "getSubInvClassCode", new Object[] { cInvClassCode, sOpera });
        /*************************************************************/

        if (v.size() > 0) {
            //唯一性整理
            Vector vTemp = new Vector();
            vTemp.addElement(v.elementAt(0));
            for (int i = 1; i < v.size(); i++) {
                String s = (String) v.elementAt(i);
                if (!vTemp.contains(s))
                    vTemp.addElement(s);
            }
            String s[] = new String[vTemp.size()];
            vTemp.copyInto(s);
            return s;
        }

        return null;
    }

    /**
     * 此处插入方法说明。
     * 创建日期：(01-6-21 9:34:41)
     * @return nc.vo.sc.order.OrderItemVO[]
     * @param item nc.vo.sc.order.OrderItemVO[]
     */
    public OrderItemVO[] getUnionItem(OrderItemVO[] item) throws SQLException {

        Vector v = new Vector();
        for (int i = 0; i < item.length; i++) {
            item[i].setCinvshow(ScConstants.PROCESSFLAG);

            v.addElement(item[i]);
        }
        OrderItemVO[] unionItem = new OrderItemVO[v.size()];
        if (v.size() > 0) {
            v.copyInto(unionItem);
        }
        return unionItem;

    }

    /**
     * 根据操作员ID取操作员名称(生成备料计划时用，需传入制单人、审核人名称)
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderHeaderVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public String getUserName(String pk_corp, String coperatorid) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "getUserName", new Object[] { coperatorid });
        /*************************************************************/

        String sql = "select user_name from  sm_user where   cuserid =?  ";

        String userName = null;
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, coperatorid);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {

                userName = rs.getString(1);

            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "getUserName", new Object[] { coperatorid });
        /*************************************************************/

        return userName;
    }

    /**
     * 取业务类型的核算规则
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderHeaderVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public String getVerifyRule(String cbiztype) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "getVerifyRule", new Object[] { cbiztype });
        /*************************************************************/

        String sql = "select verifyrule from bd_busitype where pk_busitype = ?  ";

        String verifyRule = null;
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, cbiztype);
            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {

                verifyRule = rs.getString(1);

            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "getVerifyRule", new Object[] { cbiztype });
        /*************************************************************/

        return verifyRule;
    }

    /**
     * 作者：晁志平
     * 功能：设置委外订单表体换算率
     * 参数：
     * OrderItemVO[] items   委外表体VO数组
     * 返回：无
     * 例外：Exception     SQL异常
     * 日期：(2003-12-13 10:39:21)
     * 修改日期，修改人，修改原因，注释标志：
     *
     */
    public OrderItemVO[] getVOsWithRate(OrderItemVO[] items) throws SQLException {
        if (items == null || items.length <= 0) {
            SCMEnv.out("传入参数为空，直接返回");
            return items;
        }
        //Hashtable hRate = new Hashtable();
        String sassistunit = null, baseid = null, fixed = null;
        Object[][] obj = null;
        UFDouble ufdMainNum = null, ufdAssNum = null, ufdRate = null;

        try {
            ScmPubDMO pubDmo = new ScmPubDMO();
            int iLen = items.length;
            for (int i = 0; i < iLen; i++) {
                if (items[i] == null)
                    continue;
                sassistunit = (String) items[i].getAttributeValue("cassistunit");
                baseid = (String) items[i].getAttributeValue("cbaseid");
                if (sassistunit == null || sassistunit.trim().equals("") || baseid == null) {
                    items[i].setAttributeValue("measrate", null);
                    continue;
                }
                obj = pubDmo.queryResultsFromAnyTable("bd_convert", new String[] { "fixedflag", "mainmeasrate", "pk_measdoc" }, " pk_measdoc = '" + sassistunit + "' and pk_invbasdoc = '" + baseid + "'");
                if (obj != null && obj[0] != null && obj[0].length == 3) {
                    fixed = obj[0][0].toString();
                    if ("Y".equalsIgnoreCase(fixed)) {
                        ufdRate = new UFDouble(obj[0][1].toString());
                    } else {
                        if (items[i].getAttributeValue("nassistnum") != null && items[i].getAttributeValue("nassistnum").toString().trim().length() > 0) {
                            ufdAssNum = new UFDouble(items[i].getAttributeValue("nassistnum").toString());
                        }
                        if (ufdAssNum.equals(new UFDouble(0.0))) {
                            SCMEnv.out("非固定换算率时 辅数量 出现零情况,越过");
                            continue;
                        }
                        if (items[i].getAttributeValue("nordernum") != null && items[i].getAttributeValue("nordernum").toString().trim().length() > 0) {
                            ufdMainNum = new UFDouble(items[i].getAttributeValue("nordernum").toString());
                            ufdRate = ufdMainNum.div(ufdAssNum);
                        } else {
                            SCMEnv.out("主数量出现零情况,换算率处理成零");
                            ufdRate = new UFDouble(0.0);
                        }
                    }
                    items[i].setAttributeValue("measrate", ufdRate);
                }
            }
        } catch (Exception e) {
            SCMEnv.out("设置委外订单表体换算率出错，明细如下：");
            SCMEnv.out(e);
            throw new SQLException(e.getMessage());
        }
        return items;
    }

    /**
     * 此处插入方法说明。
     * 功能描述:如果订单行的仓库为空，则根据库存组织+存货从物料生产档案获取仓库
     * 输入参数:
     * 返回值:
     * 异常处理:
     * 日期:2003/09/04 xhq
     */
    public AggregatedValueObject[] getWarehouseFromProduce(AggregatedValueObject[] superVO) throws BusinessException {
        OrderVO[] orderVO = (OrderVO[]) superVO;
        if (orderVO == null || orderVO.length == 0)
            return orderVO;
        String pk_corp = ((OrderHeaderVO) orderVO[0].getParentVO()).getPk_corp();

        Vector vTemp1 = new Vector();
        Vector vTemp2 = new Vector();
        Vector vTemp = new Vector();
        for (int i = 0; i < orderVO.length; i++) {
            OrderItemVO bodyVO[] = (OrderItemVO[]) orderVO[i].getChildrenVO();
            if (bodyVO == null || bodyVO.length == 0)
                continue;
            String cstoreorganization = ((OrderHeaderVO) orderVO[0].getParentVO()).getCwareid();
            for (int j = 0; j < bodyVO.length; j++) {
                String cwarehouseid = bodyVO[j].getCwarehouseid();
                if (cwarehouseid != null && cwarehouseid.trim().length() > 0)
                    continue;
                String cbaseid = bodyVO[j].getCbaseid();
                if (!vTemp.contains(cstoreorganization + cbaseid)) {
                    vTemp.addElement(cstoreorganization + cbaseid);
                    vTemp1.addElement(cstoreorganization);
                    vTemp2.addElement(cbaseid);
                }
            }
        }
        if (vTemp.size() == 0)
            return orderVO;

        //根据库存组织和存货基础ID从物料生产档案获取仓库ID
        String sql = "select pk_calbody, pk_invbasdoc, pk_stordoc from bd_produce where dr = 0 and pk_corp = '" + pk_corp + "' and (";
        for (int i = 0; i < vTemp.size() - 1; i++)
            sql += "(pk_calbody = '" + vTemp1.elementAt(i) + "' and pk_invbasdoc = '" + vTemp2.elementAt(i) + "') or ";
        sql += "(pk_calbody = '" + vTemp1.elementAt(vTemp.size() - 1) + "' and pk_invbasdoc = '" + vTemp2.elementAt(vTemp.size() - 1) + "'))";

        Connection con = null;
        PreparedStatement stmt = null;
        Hashtable t = new Hashtable();

        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                String s1 = rs.getString(1);
                String s2 = rs.getString(2);
                String s3 = rs.getString(3);
                if (s1 != null && s2 != null && s3 != null)
                    t.put(s1 + s2, s3);
            }
            //关闭结果集,即时释放资源
            if (rs != null)
                rs.close();
        } catch (SQLException e) {
			// TODO 自动生成 catch 块
			SCMEnv.out(e);
		} finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        //返回
        for (int i = 0; i < orderVO.length; i++) {
            OrderItemVO bodyVO[] = (OrderItemVO[]) orderVO[i].getChildrenVO();
            if (bodyVO == null || bodyVO.length == 0)
                continue;
            String cstoreorganization = ((OrderHeaderVO) orderVO[0].getParentVO()).getCwareid();
            for (int j = 0; j < bodyVO.length; j++) {
                String cwarehouseid = bodyVO[j].getCwarehouseid();
                if (cwarehouseid != null && cwarehouseid.trim().length() > 0)
                    continue;
                String cbaseid = bodyVO[j].getCbaseid();
                Object o = t.get(cstoreorganization + cbaseid);
                if (o != null)
                    bodyVO[j].setCwarehouseid(o.toString());
            }
        }

        return orderVO;
    }

    /**
     * <p>将VO插入母子表。
     * <p>
     * 创建日期：(2001-6-23)
     * @param vo nc.vo.sc.order.OrderVO
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderVO insert(OrderVO vo) throws BusinessException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "insert", new Object[] { vo });
        /*************************************************************/

        OrderVO returnVO = null;
        try {
            //          批次号处理begin
            nc.bs.sc.pub.BatchCodeDMO batchCodeDmo = new nc.bs.sc.pub.BatchCodeDMO();
            HashMap hBatchCodes = batchCodeDmo.getBatchCode(vo);
            OrderItemVO[] batchItems = (OrderItemVO[]) vo.getChildrenVO();
            if (hBatchCodes != null && hBatchCodes.size() > 0) {
                for (int i = 0; i < batchItems.length; i++) {
                    if (batchItems[i].getVproducenum() == null || batchItems[i].getVproducenum().trim().length() == 0)
                        batchItems[i].setVproducenum((String) hBatchCodes.get(batchItems[i].getCmangid()));
                }
            }
            //批次号处理end
            //gc
//          批次号处理begin
            nc.bs.sc.pub.BatchCodeDMO batchCodeDmo2 = new nc.bs.sc.pub.BatchCodeDMO();
            HashMap hBatchCodes2 = batchCodeDmo2.getBatchCode(vo);
            OrderDdlbVO[] batchItems2 = (OrderDdlbVO[]) vo.getDdlbvos();
            if (hBatchCodes2 != null && hBatchCodes2.size() > 0) {
                for (int i = 0; i < batchItems2.length; i++) {
                    if (batchItems2[i].getVproducenum() == null || batchItems2[i].getVproducenum().trim().length() == 0)
                        batchItems2[i].setVproducenum((String) hBatchCodes2.get(batchItems2[i].getCmangid()));
                }
            }
            //批次号处理end
            //gc--end
            String key = null;
            //库存组织/仓库匹配检查
            //String sErr = checkWarehouse(vo);
            //if(sErr != null && sErr.length() > 0) throw new nc.vo.pub.BusinessException(sErr);

            //取得单据号
//            nc.bs.sc.pub.PublicDMO dmo = new nc.bs.sc.pub.PublicDMO();
//            dmo.getBillCode(vo);
            
            //V501修改时修改单据号
            //V502 重购
            IGetSysBillCode getSysBillCode = (IGetSysBillCode) NCLocator.getInstance().lookup(IGetSysBillCode.class.getName());
            getSysBillCode.setBillNoWhenModify(vo, vo.getM_voOld(), "vordercode");
            /*
             nc.bs.pu.pub.GetSysBillCode l_GetSysBillCode = new nc.bs.pu.pub.GetSysBillCode();
             String lStr_BillCode = l_GetSysBillCode.getSysBillNO(vo);
             ((OrderHeaderVO) vo.getParentVO()).setVordercode(lStr_BillCode);
             */
            // 插入表头：
            key = insertHeader((OrderHeaderVO) vo.getParentVO());
            //V5可用量统一调整
            vo.getParentVO().setPrimaryKey(key);

            // 插入表体各项 new begin(效率优化 yye)：
            OrderItemVO[] items = (OrderItemVO[]) vo.getChildrenVO();

            for (int i = 0; i < items.length; i++) {
                items[i].setCorderid(key);
            }
            insertItems(items);

            // 插入表体各项 new end
            
            // gc 插入表体：
            OrderDdlbVO[] ddlbs = (OrderDdlbVO[]) vo.getDdlbvos();
            if(ddlbs != null){
	            for (int i = 0; i < ddlbs.length; i++) {
	            	ddlbs[i].setCorderid(key);
	            }
	            BaseDAO dao = new BaseDAO();
	            dao.insertVOArray(ddlbs);
            }
            // 插入表体各项 new end

            //刷新单据
            if (key != null && key.trim().length() > 0) {
                returnVO = findByPrimaryKey(key);
            }
        } catch (Exception e) {
            if (e instanceof BusinessException)
                throw (BusinessException) e;
            else
                throw new BusinessException(e.getMessage());
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "insert", new Object[] { vo });
        /*************************************************************/

        return returnVO;
    }

    /**
     * 向数据库插入一个VO对象。
     *
     * 创建日期：(2001-6-20)
     * @param node nc.vo.sc.order.OrderBbVO
     * @exception java.sql.SQLException 异常说明。
     */
    public String insertMaterialItem(OrderBbVO orderBb) throws java.sql.SQLException, nc.bs.pub.SystemException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderBbDMO", "insert", new Object[] { orderBb });
        /*************************************************************/

        String sql = "insert into sc_order_bb(corder_bbid, corderid, corder_bid, pk_corp, cmangid, cbaseid, nmaterialnum, cassistunit, nassistnum, nprice, nmoney, ddeliverydate, ntotalnum, cdeliverywarehouse, vdeliveryaddress, vmemo, vfree1, vfree2, vfree3, vfree4, vfree5, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

        String key = null;
        Connection con = null;
        PreparedStatement stmt = null;
        String pk_corp = orderBb.getPk_corp();
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            // set PK fields:
            key = getOID(pk_corp);
            stmt.setString(1, key);
            // set non PK fields:
            if (orderBb.getCorderid() == null) {
                stmt.setNull(2, Types.CHAR);
            } else {
                stmt.setString(2, orderBb.getCorderid());
            }
            if (orderBb.getCorder_bid() == null) {
                stmt.setNull(3, Types.CHAR);
            } else {
                stmt.setString(3, orderBb.getCorder_bid());
            }
            if (orderBb.getPk_corp() == null) {
                stmt.setNull(4, Types.CHAR);
            } else {
                stmt.setString(4, orderBb.getPk_corp());
            }
            if (orderBb.getCmangid() == null) {
                stmt.setNull(5, Types.CHAR);
            } else {
                stmt.setString(5, orderBb.getCmangid());
            }
            if (orderBb.getCbaseid() == null) {
                stmt.setNull(6, Types.CHAR);
            } else {
                stmt.setString(6, orderBb.getCbaseid());
            }
            if (orderBb.getNmaterialnum() == null) {
                stmt.setNull(7, Types.INTEGER);
            } else {
                stmt.setBigDecimal(7, orderBb.getNmaterialnum().toBigDecimal());
            }
            if (orderBb.getCassistunit() == null) {
                stmt.setNull(8, Types.CHAR);
            } else {
                stmt.setString(8, orderBb.getCassistunit());
            }
            if (orderBb.getNassistnum() == null) {
                stmt.setNull(9, Types.INTEGER);
            } else {
                stmt.setBigDecimal(9, orderBb.getNassistnum().toBigDecimal());
            }
            if (orderBb.getNprice() == null) {
                stmt.setNull(10, Types.INTEGER);
            } else {
                stmt.setBigDecimal(10, orderBb.getNprice().toBigDecimal());
            }
            if (orderBb.getNmoney() == null) {
                stmt.setNull(11, Types.INTEGER);
            } else {
                stmt.setBigDecimal(11, orderBb.getNmoney().toBigDecimal());
            }
            if (orderBb.getDdeliverydate() == null) {
                stmt.setNull(12, Types.CHAR);
            } else {
                stmt.setString(12, orderBb.getDdeliverydate().toString());
            }
            if (orderBb.getNtotalnum() == null) {
                stmt.setNull(13, Types.INTEGER);
            } else {
                stmt.setBigDecimal(13, orderBb.getNtotalnum().toBigDecimal());
            }
            if (orderBb.getCdeliverywarehouse() == null) {
                stmt.setNull(14, Types.CHAR);
            } else {
                stmt.setString(14, orderBb.getCdeliverywarehouse());
            }
            if (orderBb.getVdeliveryaddress() == null) {
                stmt.setNull(15, Types.CHAR);
            } else {
                stmt.setString(15, orderBb.getVdeliveryaddress());
            }
            if (orderBb.getVmemo() == null) {
                stmt.setNull(16, Types.CHAR);
            } else {
                stmt.setString(16, orderBb.getVmemo());
            }
            if (orderBb.getVfree1() == null) {
                stmt.setNull(17, Types.CHAR);
            } else {
                stmt.setString(17, orderBb.getVfree1());
            }
            if (orderBb.getVfree2() == null) {
                stmt.setNull(18, Types.CHAR);
            } else {
                stmt.setString(18, orderBb.getVfree2());
            }
            if (orderBb.getVfree3() == null) {
                stmt.setNull(19, Types.CHAR);
            } else {
                stmt.setString(19, orderBb.getVfree3());
            }
            if (orderBb.getVfree4() == null) {
                stmt.setNull(20, Types.CHAR);
            } else {
                stmt.setString(20, orderBb.getVfree4());
            }
            if (orderBb.getVfree5() == null) {
                stmt.setNull(21, Types.CHAR);
            } else {
                stmt.setString(21, orderBb.getVfree5());
            }
            if (orderBb.getVdef1() == null) {
                stmt.setNull(22, Types.CHAR);
            } else {
                stmt.setString(22, orderBb.getVdef1());
            }
            if (orderBb.getVdef2() == null) {
                stmt.setNull(23, Types.CHAR);
            } else {
                stmt.setString(23, orderBb.getVdef2());
            }
            if (orderBb.getVdef3() == null) {
                stmt.setNull(24, Types.CHAR);
            } else {
                stmt.setString(24, orderBb.getVdef3());
            }
            if (orderBb.getVdef4() == null) {
                stmt.setNull(25, Types.CHAR);
            } else {
                stmt.setString(25, orderBb.getVdef4());
            }
            if (orderBb.getVdef5() == null) {
                stmt.setNull(26, Types.CHAR);
            } else {
                stmt.setString(26, orderBb.getVdef5());
            }
            if (orderBb.getVdef6() == null) {
                stmt.setNull(27, Types.CHAR);
            } else {
                stmt.setString(27, orderBb.getVdef6());
            }
            //
            stmt.executeUpdate();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderBbDMO", "insert", new Object[] { orderBb });
        /*************************************************************/

        return key;
    }

    /**
     * 向数据库插入一个VO对象。
     *
     * 创建日期：(2001-6-20)
     * @param node nc.vo.sc.order.OrderBbVO
     * @exception java.sql.SQLException 异常说明。
     */
    public String insertMaterialItem(OrderBbVO orderBb, String corderid, String corder_bid) throws java.sql.SQLException, nc.bs.pub.SystemException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "insertMaterialItem", new Object[] { orderBb, corderid, corder_bid });
        /*************************************************************/

        orderBb.setCorderid(corderid);
        orderBb.setCorder_bid(corder_bid);
        String key = insertMaterialItem(orderBb);

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "insertMaterialItem", new Object[] { orderBb, corderid, corder_bid });
        /*************************************************************/

        return key;
    }

    /**
     * 父类方法重写
     * 
     * @see nc.bs.pub.pf.IQueryData#queryAllBodyData(java.lang.String)
     */
    public CircularlyAccessibleValueObject[] queryAllBodyData(String key) throws BusinessException {
        OrderItemVO[] items = null;
        try {
            /*查询
             *采购到货(nc.bs.rc.receive.ArriveorderImpl)参照查询委外订单过滤表体,约定参数key=前20位为ID+strSQL
             * */
            if (key.indexOf("FORARR") < 0) {//物料类型为带料委外"OB"的可生成备料计划，而对入库和到货环节则不限制。
              items = findItemsForHeader(key.substring(0, 20),key.substring(20, key.length()));
              items = filterItemVOByOuttype(items);
            }else{
              items = findItemsForHeader(key.substring(0, 20),key.substring(20, key.length()-"FORARR".length()));
            }
            
            /*置换算率*/
            items = getVOsWithRate(items);
        } catch (SQLException ex) {
            SCMEnv.out("委外实现平台 IQueryData2 接口方法出错");
            SCMEnv.out(ex.getMessage());;
            throw new BusinessException(ex.getMessage());
        }
        return items;
    }

    /**
     * 父类方法重写：库存委托加工入库退货，委外查询对话框调用。
     * 
     * @see nc.bs.pub.pf.IQueryData2#queryAllBodyData(java.lang.String, java.lang.String)
     */
    public CircularlyAccessibleValueObject[] queryAllBodyData(String key, String whereString) throws BusinessException {
        OrderItemVO[] items = null;
        try {
            /*查询*/
            items = findItemsForHeader(key, whereString);
            /*置换算率*/
            items = getVOsWithRate(items);
        } catch (SQLException ex) {
            SCMEnv.out("委外实现平台 IQueryData2 接口方法出错");
            SCMEnv.out(ex.getMessage());
            throw new BusinessException(ex.getMessage());
        }
        return items;
    }

    /**
     * 通过单位编码返回指定公司所有记录VO数组。如果单位编码为空返回所有记录。
     *
     * 已知问题：请注意生成的sql语句：where子句中假设公司编码字段为pk_corp。
     *			如果你要针对公司进行查询，那么应采用你的实际字段名来手工修改
     *			sql语句。
     * 创建日期：(2001-6-20)
     * @return nc.bs.sc.order.OrderDMO.OrderHeaderVO[]
     * @param unitCode int
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderHeaderVO[] queryAllHead(String unitCode) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "queryAllHead", new Object[] { unitCode });
        /*************************************************************/

        String sql = "";
        if (unitCode != null) {
            sql = "select corderid, vordercode, pk_corp, cpurorganization, cwareid, dorderdate, cvendorid, caccountbankid, cdeptid, cemployeeid, cbiztype, creciever, cgiveinvoicevendor, ctransmodeid, ctermProtocolid, ibillstatus, vmemo, caccountyear, coperator, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10, pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20, ts, iprintcount, tmaketime, taudittime, tlastmaketime from sc_order where pk_corp = ? and dr = 0 ";
        } else {
            sql = "select corderid, vordercode, pk_corp, cpurorganization, cwareid, dorderdate, cvendorid, caccountbankid, cdeptid, cemployeeid, cbiztype, creciever, cgiveinvoicevendor, ctransmodeid, ctermProtocolid, ibillstatus, vmemo, caccountyear, coperator, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10, pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20, ts, iprintcount, tmaketime, taudittime, tlastmaketime from sc_order where dr=0 ";
        }

        OrderHeaderVO orders[] = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            if (unitCode != null) {
                stmt.setString(1, unitCode);
            }
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                OrderHeaderVO order = new OrderHeaderVO();
                // corderid :
                String corderid = rs.getString(1);
                order.setCorderid(corderid == null ? null : corderid.trim());
                // vordercode :
                String vordercode = rs.getString(2);
                order.setVordercode(vordercode == null ? null : vordercode.trim());
                // pk_corp :
                String pk_corp = rs.getString(3);
                order.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                // cpurorganization :
                String cpurorganization = rs.getString(4);
                order.setCpurorganization(cpurorganization == null ? null : cpurorganization.trim());
                // cwareid :
                String cwareid = rs.getString(5);
                order.setCwareid(cwareid == null ? null : cwareid.trim());
                // dorderdate :
                String dorderdate = rs.getString(6);
                order.setDorderdate(dorderdate == null ? null : new UFDate(dorderdate.trim(), false));
                // cvendorid :
                String cvendorid = rs.getString(7);
                order.setCvendorid(cvendorid == null ? null : cvendorid.trim());
                // caccountbankid :
                String caccountbankid = rs.getString(8);
                order.setCaccountbankid(caccountbankid == null ? null : caccountbankid.trim());
                // cdeptid :
                String cdeptid = rs.getString(9);
                order.setCdeptid(cdeptid == null ? null : cdeptid.trim());
                // cemployeeid :
                String cemployeeid = rs.getString(10);
                order.setCemployeeid(cemployeeid == null ? null : cemployeeid.trim());
                // cbiztypeid :
                String cbiztypeid = rs.getString(11);
                order.setCbiztype(cbiztypeid == null ? null : cbiztypeid.trim());
                // creciever :
                String creciever = rs.getString(12);
                order.setCreciever(creciever == null ? null : creciever.trim());
                // cgiveinvoicevendor :
                String cgiveinvoicevendor = rs.getString(13);
                order.setCgiveinvoicevendor(cgiveinvoicevendor == null ? null : cgiveinvoicevendor.trim());
                // ctransmodeid :
                String ctransmodeid = rs.getString(14);
                order.setCtransmodeid(ctransmodeid == null ? null : ctransmodeid.trim());
                // ctermProtocolid :
                String ctermProtocolid = rs.getString(15);
                order.setCtermProtocolid(ctermProtocolid == null ? null : ctermProtocolid.trim());
                // ibillstatus :
                Integer ibillstatus = (Integer) rs.getObject(16);
                order.setIbillstatus(ibillstatus == null ? null : ibillstatus);
                // vmemo :
                String vmemo = rs.getString(17);
                order.setVmemo(vmemo == null ? null : vmemo.trim());
                // caccountyear :
                String caccountyear = rs.getString(18);
                order.setCaccountyear(caccountyear == null ? null : caccountyear.trim());
                // coperator :
                String coperator = rs.getString(19);
                order.setCoperator(coperator == null ? null : coperator.trim());
                // vdef1 :
                String vdef1 = rs.getString(20);
                order.setVdef1(vdef1 == null ? null : vdef1.trim());
                // vdef2 :
                String vdef2 = rs.getString(21);
                order.setVdef2(vdef2 == null ? null : vdef2.trim());
                // vdef3 :
                String vdef3 = rs.getString(22);
                order.setVdef3(vdef3 == null ? null : vdef3.trim());
                // vdef4 :
                String vdef4 = rs.getString(23);
                order.setVdef4(vdef4 == null ? null : vdef4.trim());
                // vdef5 :
                String vdef5 = rs.getString(24);
                order.setVdef5(vdef5 == null ? null : vdef5.trim());
                // vdef6 :
                String vdef6 = rs.getString(25);
                order.setVdef6(vdef6 == null ? null : vdef6.trim());
                // vdef7 :
                String vdef7 = rs.getString(26);
                order.setVdef7(vdef7 == null ? null : vdef7.trim());
                // vdef8 :
                String vdef8 = rs.getString(27);
                order.setVdef8(vdef8 == null ? null : vdef8.trim());
                // vdef9 :
                String vdef9 = rs.getString(28);
                order.setVdef9(vdef9 == null ? null : vdef9.trim());
                // vdef10 :
                String vdef10 = rs.getString(29);
                order.setVdef10(vdef10 == null ? null : vdef10.trim());
                //
                //
                String vdef11 = rs.getString(30);
                order.setVdef11(vdef11 == null ? null : vdef11.trim());
                //
                String vdef12 = rs.getString(31);
                order.setVdef12(vdef12 == null ? null : vdef12.trim());
                //
                String vdef13 = rs.getString(32);
                order.setVdef13(vdef13 == null ? null : vdef13.trim());
                //
                String vdef14 = rs.getString(33);
                order.setVdef14(vdef14 == null ? null : vdef14.trim());
                //
                String vdef15 = rs.getString(34);
                order.setVdef15(vdef15 == null ? null : vdef15.trim());
                //
                String vdef16 = rs.getString(35);
                order.setVdef16(vdef16 == null ? null : vdef16.trim());
                //
                String vdef17 = rs.getString(36);
                order.setVdef17(vdef17 == null ? null : vdef17.trim());
                //
                String vdef18 = rs.getString(37);
                order.setVdef18(vdef18 == null ? null : vdef18.trim());
                //
                String vdef19 = rs.getString(38);
                order.setVdef19(vdef19 == null ? null : vdef19.trim());
                //
                String vdef20 = rs.getString(39);
                order.setVdef20(vdef20 == null ? null : vdef20.trim());
                //
                String pk_defdoc1 = rs.getString(40);
                order.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
                //
                String pk_defdoc2 = rs.getString(41);
                order.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
                //
                String pk_defdoc3 = rs.getString(42);
                order.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
                //
                String pk_defdoc4 = rs.getString(43);
                order.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
                //
                String pk_defdoc5 = rs.getString(44);
                order.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
                //
                String pk_defdoc6 = rs.getString(45);
                order.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
                //
                String pk_defdoc7 = rs.getString(46);
                order.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
                //
                String pk_defdoc8 = rs.getString(47);
                order.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
                //
                String pk_defdoc9 = rs.getString(48);
                order.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
                //
                String pk_defdoc10 = rs.getString(49);
                order.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
                //
                String pk_defdoc11 = rs.getString(50);
                order.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
                //
                String pk_defdoc12 = rs.getString(51);
                order.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
                //
                String pk_defdoc13 = rs.getString(52);
                order.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
                //
                String pk_defdoc14 = rs.getString(53);
                order.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
                //
                String pk_defdoc15 = rs.getString(54);
                order.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
                //
                String pk_defdoc16 = rs.getString(55);
                order.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
                //
                String pk_defdoc17 = rs.getString(56);
                order.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
                //
                String pk_defdoc18 = rs.getString(57);
                order.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
                //
                String pk_defdoc19 = rs.getString(58);
                order.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
                //
                String pk_defdoc20 = rs.getString(59);
                order.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
                // ts :
                String ts = rs.getString(60);
                order.setTs(ts == null ? null : ts.trim());
                // iprintcount :
                Integer iprintcount = (Integer) rs.getObject(61);
                order.setIprintcount(iprintcount == null ? null : iprintcount);

                String tmaketime = rs.getString(62);
                order.setTmaketime(tmaketime == null ? null : tmaketime.trim());
                String taudittime = rs.getString(63);
                order.setTaudittime(taudittime == null ? null : taudittime.trim());
                String tlastmaketime = rs.getString(64);
                order.setTlastmaketime(tlastmaketime == null ? null : tlastmaketime.trim());

                v.addElement(order);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        orders = new OrderHeaderVO[v.size()];
        if (v.size() > 0) {
            v.copyInto(orders);
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "queryAllHead", new Object[] { unitCode });
        /*************************************************************/

        return orders;
    }

    /**
     * 材料出库参照订单
     * gc
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderHeaderVO[] queryRefHead(String condition) throws SQLException {
    	String sql = "select  corderid, vordercode, pk_corp, cpurorganization, cwareid, dorderdate, cvendorid, caccountbankid, cdeptid, cemployeeid, cbiztype, creciever, cgiveinvoicevendor, ctransmodeid, ctermProtocolid, ibillstatus, vmemo, caccountyear, coperator, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10, pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20, ts, iprintcount, tmaketime, taudittime, tlastmaketime  from sc_order where isnull(sc_order.dr,0)=0 " + condition;
        OrderHeaderVO orders[] = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
        	 con = getConnection();
             stmt = con.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                OrderHeaderVO order = new OrderHeaderVO();
                // corderid :
                String corderid = rs.getString(1);
                order.setCorderid(corderid == null ? null : corderid.trim());
                // vordercode :
                String vordercode = rs.getString(2);
                order.setVordercode(vordercode == null ? null : vordercode.trim());
                // pk_corp :
                String pk_corp = rs.getString(3);
                order.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                // cpurorganization :
                String cpurorganization = rs.getString(4);
                order.setCpurorganization(cpurorganization == null ? null : cpurorganization.trim());
                // cwareid :
                String cwareid = rs.getString(5);
                order.setCwareid(cwareid == null ? null : cwareid.trim());
                // dorderdate :
                String dorderdate = rs.getString(6);
                order.setDorderdate(dorderdate == null ? null : new UFDate(dorderdate.trim(), false));
                // cvendorid :
                String cvendorid = rs.getString(7);
                order.setCvendorid(cvendorid == null ? null : cvendorid.trim());
                // caccountbankid :
                String caccountbankid = rs.getString(8);
                order.setCaccountbankid(caccountbankid == null ? null : caccountbankid.trim());
                // cdeptid :
                String cdeptid = rs.getString(9);
                order.setCdeptid(cdeptid == null ? null : cdeptid.trim());
                // cemployeeid :
                String cemployeeid = rs.getString(10);
                order.setCemployeeid(cemployeeid == null ? null : cemployeeid.trim());
                // cbiztypeid :
                String cbiztypeid = rs.getString(11);
                order.setCbiztype(cbiztypeid == null ? null : cbiztypeid.trim());
                // creciever :
                String creciever = rs.getString(12);
                order.setCreciever(creciever == null ? null : creciever.trim());
                // cgiveinvoicevendor :
                String cgiveinvoicevendor = rs.getString(13);
                order.setCgiveinvoicevendor(cgiveinvoicevendor == null ? null : cgiveinvoicevendor.trim());
                // ctransmodeid :
                String ctransmodeid = rs.getString(14);
                order.setCtransmodeid(ctransmodeid == null ? null : ctransmodeid.trim());
                // ctermProtocolid :
                String ctermProtocolid = rs.getString(15);
                order.setCtermProtocolid(ctermProtocolid == null ? null : ctermProtocolid.trim());
                // ibillstatus :
                Integer ibillstatus = (Integer) rs.getObject(16);
                order.setIbillstatus(ibillstatus == null ? null : ibillstatus);
                // vmemo :
                String vmemo = rs.getString(17);
                order.setVmemo(vmemo == null ? null : vmemo.trim());
                // caccountyear :
                String caccountyear = rs.getString(18);
                order.setCaccountyear(caccountyear == null ? null : caccountyear.trim());
                // coperator :
                String coperator = rs.getString(19);
                order.setCoperator(coperator == null ? null : coperator.trim());
                // vdef1 :
                String vdef1 = rs.getString(20);
                order.setVdef1(vdef1 == null ? null : vdef1.trim());
                // vdef2 :
                String vdef2 = rs.getString(21);
                order.setVdef2(vdef2 == null ? null : vdef2.trim());
                // vdef3 :
                String vdef3 = rs.getString(22);
                order.setVdef3(vdef3 == null ? null : vdef3.trim());
                // vdef4 :
                String vdef4 = rs.getString(23);
                order.setVdef4(vdef4 == null ? null : vdef4.trim());
                // vdef5 :
                String vdef5 = rs.getString(24);
                order.setVdef5(vdef5 == null ? null : vdef5.trim());
                // vdef6 :
                String vdef6 = rs.getString(25);
                order.setVdef6(vdef6 == null ? null : vdef6.trim());
                // vdef7 :
                String vdef7 = rs.getString(26);
                order.setVdef7(vdef7 == null ? null : vdef7.trim());
                // vdef8 :
                String vdef8 = rs.getString(27);
                order.setVdef8(vdef8 == null ? null : vdef8.trim());
                // vdef9 :
                String vdef9 = rs.getString(28);
                order.setVdef9(vdef9 == null ? null : vdef9.trim());
                // vdef10 :
                String vdef10 = rs.getString(29);
                order.setVdef10(vdef10 == null ? null : vdef10.trim());
                //
                //
                String vdef11 = rs.getString(30);
                order.setVdef11(vdef11 == null ? null : vdef11.trim());
                //
                String vdef12 = rs.getString(31);
                order.setVdef12(vdef12 == null ? null : vdef12.trim());
                //
                String vdef13 = rs.getString(32);
                order.setVdef13(vdef13 == null ? null : vdef13.trim());
                //
                String vdef14 = rs.getString(33);
                order.setVdef14(vdef14 == null ? null : vdef14.trim());
                //
                String vdef15 = rs.getString(34);
                order.setVdef15(vdef15 == null ? null : vdef15.trim());
                //
                String vdef16 = rs.getString(35);
                order.setVdef16(vdef16 == null ? null : vdef16.trim());
                //
                String vdef17 = rs.getString(36);
                order.setVdef17(vdef17 == null ? null : vdef17.trim());
                //
                String vdef18 = rs.getString(37);
                order.setVdef18(vdef18 == null ? null : vdef18.trim());
                //
                String vdef19 = rs.getString(38);
                order.setVdef19(vdef19 == null ? null : vdef19.trim());
                //
                String vdef20 = rs.getString(39);
                order.setVdef20(vdef20 == null ? null : vdef20.trim());
                //
                String pk_defdoc1 = rs.getString(40);
                order.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
                //
                String pk_defdoc2 = rs.getString(41);
                order.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
                //
                String pk_defdoc3 = rs.getString(42);
                order.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
                //
                String pk_defdoc4 = rs.getString(43);
                order.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
                //
                String pk_defdoc5 = rs.getString(44);
                order.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
                //
                String pk_defdoc6 = rs.getString(45);
                order.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
                //
                String pk_defdoc7 = rs.getString(46);
                order.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
                //
                String pk_defdoc8 = rs.getString(47);
                order.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
                //
                String pk_defdoc9 = rs.getString(48);
                order.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
                //
                String pk_defdoc10 = rs.getString(49);
                order.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
                //
                String pk_defdoc11 = rs.getString(50);
                order.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
                //
                String pk_defdoc12 = rs.getString(51);
                order.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
                //
                String pk_defdoc13 = rs.getString(52);
                order.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
                //
                String pk_defdoc14 = rs.getString(53);
                order.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
                //
                String pk_defdoc15 = rs.getString(54);
                order.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
                //
                String pk_defdoc16 = rs.getString(55);
                order.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
                //
                String pk_defdoc17 = rs.getString(56);
                order.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
                //
                String pk_defdoc18 = rs.getString(57);
                order.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
                //
                String pk_defdoc19 = rs.getString(58);
                order.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
                //
                String pk_defdoc20 = rs.getString(59);
                order.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
                // ts :
                String ts = rs.getString(60);
                order.setTs(ts == null ? null : ts.trim());
                // iprintcount :
                Integer iprintcount = (Integer) rs.getObject(61);
                order.setIprintcount(iprintcount == null ? null : iprintcount);

                String tmaketime = rs.getString(62);
                order.setTmaketime(tmaketime == null ? null : tmaketime.trim());
                String taudittime = rs.getString(63);
                order.setTaudittime(taudittime == null ? null : taudittime.trim());
                String tlastmaketime = rs.getString(64);
                order.setTlastmaketime(tlastmaketime == null ? null : tlastmaketime.trim());

                v.addElement(order);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        orders = new OrderHeaderVO[v.size()];
        if (v.size() > 0) {
            v.copyInto(orders);
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "queryAllHead", new Object[] {condition });
        /*************************************************************/

        return orders;
    }
    
    /**
     * 订单维护查询
     * 订单审批查询
     * auditCondition:（已审批--1、未审批--2）
     *
     *
     * 创建日期：(2001-6-20)
     * @return nc.bs.sc.order.OrderDMO.OrderHeaderVO[]
     * @param unitCode int
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderHeaderVO[] queryAllHead(String auditCondition, String condition) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "queryAllHead", new Object[] { auditCondition, condition });
        /*************************************************************/
        String patch = "";
        //业务类型
        patch += " left join bd_busitype on sc_order.cbiztype= bd_busitype.pk_busitype   ";
        //库存组织
        patch += " left join bd_calbody on sc_order.cwareid = bd_calbody.pk_calbody   ";
        //采购组织
        patch += " left join bd_purorg on sc_order.cpurorganization=bd_purorg.pk_purorg   ";
        //供应商
        patch += " left join bd_cubasdoc on sc_order.cvendorid=bd_cubasdoc.pk_cubasdoc   ";
        //部门
        patch += " left join bd_deptdoc on sc_order.cdeptid=bd_deptdoc.pk_deptdoc   ";
        //业务员
        patch += " left join bd_psndoc on sc_order.cemployeeid=bd_psndoc.pk_psndoc   ";
        //收货方
        patch += " left join bd_cumandoc cumandoc1 on sc_order.creciever=cumandoc1.pk_cumandoc  ";
        patch += " left join bd_cubasdoc cubasdoc1 on cumandoc1.pk_cubasdoc=cubasdoc1.pk_cubasdoc  ";
        //发票方
        patch += " left join bd_cumandoc cumandoc2 on sc_order.cgiveinvoicevendor=cumandoc2.pk_cumandoc  ";
        patch += " left join bd_cubasdoc cubasdoc2 on cumandoc2.pk_cubasdoc=cubasdoc2.pk_cubasdoc  ";
        //开户银行
        patch += " left join bd_custbank on sc_order.caccountbankid = bd_custbank.pk_custbank  ";
        //运输方式
        patch += " left join bd_sendtype on sc_order.ctransmodeid =bd_sendtype.pk_sendtype  ";
        //付款协议
        patch += " left join bd_payterm on sc_order.ctermProtocolid =bd_payterm.pk_payterm  ";
        //制单人
        patch += " left join sm_user sm_user1 on sc_order.coperator = sm_user1.cuserid ";
        //审批人
        patch += " left join sm_user sm_user2 on sc_order.cauditpsn = sm_user2.cuserid ";
        //公司
        patch += " left join bd_corp on sc_order.pk_corp = bd_corp.pk_corp ";
        //子表
        patch += " left join sc_order_b on sc_order.corderid = sc_order_b.corderid  ";
        //存货
        patch += " left join bd_invbasdoc on bd_invbasdoc.pk_invbasdoc = sc_order_b.cbaseid ";
        //存货分类
        patch += " left join bd_invcl on bd_invbasdoc.pk_invcl = bd_invcl.pk_invcl ";

        StringBuffer strbuf = new StringBuffer();
        strbuf.append(" \n select distinct sc_order.corderid, vordercode, sc_order.pk_corp, cpurorganization, ");
        strbuf.append(" cwareid, dorderdate, cvendorid, caccountbankid, cdeptid, cemployeeid, ");
        strbuf.append(" cbiztype, creciever, cgiveinvoicevendor, ctransmodeid, ctermProtocolid,");
        strbuf.append(" ibillstatus, sc_order.vmemo, caccountyear, sc_order.coperator, ");
        strbuf.append(" sc_order.vdef1, sc_order.vdef2, sc_order.vdef3, ");
        strbuf.append(" sc_order.vdef4, sc_order.vdef5, sc_order.vdef6, ");
        strbuf.append(" sc_order.vdef7, sc_order.vdef8, sc_order.vdef9, sc_order.vdef10, sc_order.vdef11, sc_order.vdef12, sc_order.vdef13, sc_order.vdef14, sc_order.vdef15, sc_order.vdef16, sc_order.vdef17, sc_order.vdef18, sc_order.vdef19, sc_order.vdef20, sc_order.pk_defdoc1, sc_order.pk_defdoc2, sc_order.pk_defdoc3, sc_order.pk_defdoc4, sc_order.pk_defdoc5, sc_order.pk_defdoc6, sc_order.pk_defdoc7, sc_order.pk_defdoc8, sc_order.pk_defdoc9, sc_order.pk_defdoc10, sc_order.pk_defdoc11, sc_order.pk_defdoc12, sc_order.pk_defdoc13, sc_order.pk_defdoc14, sc_order.pk_defdoc15, sc_order.pk_defdoc16, sc_order.pk_defdoc17, sc_order.pk_defdoc18, sc_order.pk_defdoc19, sc_order.pk_defdoc20 ,");
        strbuf.append(" cvendormangid ,cauditpsn, dauditdate, sc_order.ts, sc_order.iprintcount,sc_order.tmaketime,sc_order.taudittime,sc_order.tlastmaketime   ");

        //add name
        //业务类型
        strbuf.append(" ,bd_busitype.businame  ");
        //库存组织
        strbuf.append(" ,bd_calbody.bodyname  ");
        //采购组织
        strbuf.append(" ,bd_purorg.name  ");
        //供应商
        strbuf.append(" ,bd_cubasdoc.custname ");
        //部门
        strbuf.append(" ,bd_deptdoc.deptname   ");
        //业务员
        strbuf.append(" ,bd_psndoc.psnname  ");
        //开票方
        strbuf.append(" ,cubasdoc2.custname  ");
        //收货方
        strbuf.append(" ,cubasdoc1.custname ");
        //开户银行
        strbuf.append(" ,bd_custbank.accname  ");
        //运输方式
        strbuf.append(" ,bd_sendtype.sendname ");
        //付款协议
        strbuf.append(" ,bd_payterm.termname  ");
        //制单人、审批人
        strbuf.append(" ,sm_user1.user_name, sm_user2.user_name  ");
        //公司
        strbuf.append(" ,bd_corp.unitname ");

        strbuf.append(" from  ");
        strbuf.append(" sc_order ");

        strbuf.append(patch);

        //
        String sql = strbuf.toString();

        sql += " where sc_order.dr=0 and sc_order_b.dr=0 ";

        if (auditCondition.equals("1"))
            sql += " and ibillstatus = 3 ";
        else if (auditCondition.equals("2"))
            sql += " and (ibillstatus = 0 or ibillstatus=2) ";
        else
            auditCondition = null;

        if (condition != null)
            sql = sql + (" and ") + condition;

        OrderHeaderVO orders[] = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                OrderHeaderVO order = new OrderHeaderVO();
                // corderid :
                String corderid = rs.getString(1);
                order.setCorderid(corderid == null ? null : corderid.trim());
                // vordercode :
                String vordercode = rs.getString(2);
                order.setVordercode(vordercode == null ? null : vordercode.trim());
                // pk_corp :
                String pk_corp = rs.getString(3);
                order.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                // cpurorganization :
                String cpurorganization = rs.getString(4);
                order.setCpurorganization(cpurorganization == null ? null : cpurorganization.trim());
                // cwareid :
                String cwareid = rs.getString(5);
                order.setCwareid(cwareid == null ? null : cwareid.trim());
                // dorderdate :
                String dorderdate = rs.getString(6);
                order.setDorderdate(dorderdate == null ? null : new UFDate(dorderdate.trim(), false));
                // cvendorid :
                String cvendorid = rs.getString(7);
                order.setCvendorid(cvendorid == null ? null : cvendorid.trim());
                // caccountbankid :
                String caccountbankid = rs.getString(8);
                order.setCaccountbankid(caccountbankid == null ? null : caccountbankid.trim());
                // cdeptid :
                String cdeptid = rs.getString(9);
                order.setCdeptid(cdeptid == null ? null : cdeptid.trim());
                // cemployeeid :
                String cemployeeid = rs.getString(10);
                order.setCemployeeid(cemployeeid == null ? null : cemployeeid.trim());
                // cbiztypeid :
                String cbiztypeid = rs.getString(11);
                order.setCbiztype(cbiztypeid == null ? null : cbiztypeid.trim());
                // creciever :
                String creciever = rs.getString(12);
                order.setCreciever(creciever == null ? null : creciever.trim());
                // cgiveinvoicevendor :
                String cgiveinvoicevendor = rs.getString(13);
                order.setCgiveinvoicevendor(cgiveinvoicevendor == null ? null : cgiveinvoicevendor.trim());
                // ctransmodeid :
                String ctransmodeid = rs.getString(14);
                order.setCtransmodeid(ctransmodeid == null ? null : ctransmodeid.trim());
                // ctermProtocolid :
                String ctermProtocolid = rs.getString(15);
                order.setCtermProtocolid(ctermProtocolid == null ? null : ctermProtocolid.trim());
                // ibillstatus :
                Integer ibillstatus = (Integer) rs.getObject(16);
                order.setIbillstatus(ibillstatus == null ? null : ibillstatus);
                // vmemo :
                String vmemo = rs.getString(17);
                order.setVmemo(vmemo == null ? null : vmemo.trim());
                // caccountyear :
                String caccountyear = rs.getString(18);
                order.setCaccountyear(caccountyear == null ? null : caccountyear.trim());
                // coperator :
                String coperator = rs.getString(19);
                order.setCoperator(coperator == null ? null : coperator.trim());
                // vdef1 :
                String vdef1 = rs.getString(20);
                order.setVdef1(vdef1 == null ? null : vdef1.trim());
                // vdef2 :
                String vdef2 = rs.getString(21);
                order.setVdef2(vdef2 == null ? null : vdef2.trim());
                // vdef3 :
                String vdef3 = rs.getString(22);
                order.setVdef3(vdef3 == null ? null : vdef3.trim());
                // vdef4 :
                String vdef4 = rs.getString(23);
                order.setVdef4(vdef4 == null ? null : vdef4.trim());
                // vdef5 :
                String vdef5 = rs.getString(24);
                order.setVdef5(vdef5 == null ? null : vdef5.trim());
                // vdef6 :
                String vdef6 = rs.getString(25);
                order.setVdef6(vdef6 == null ? null : vdef6.trim());
                // vdef7 :
                String vdef7 = rs.getString(26);
                order.setVdef7(vdef7 == null ? null : vdef7.trim());
                // vdef8 :
                String vdef8 = rs.getString(27);
                order.setVdef8(vdef8 == null ? null : vdef8.trim());
                // vdef9 :
                String vdef9 = rs.getString(28);
                order.setVdef9(vdef9 == null ? null : vdef9.trim());
                // vdef10 :
                String vdef10 = rs.getString(29);
                order.setVdef10(vdef10 == null ? null : vdef10.trim());
                //
                String vdef11 = rs.getString(30);
                order.setVdef11(vdef11 == null ? null : vdef11.trim());
                //
                String vdef12 = rs.getString(31);
                order.setVdef12(vdef12 == null ? null : vdef12.trim());
                //
                String vdef13 = rs.getString(32);
                order.setVdef13(vdef13 == null ? null : vdef13.trim());
                //
                String vdef14 = rs.getString(33);
                order.setVdef14(vdef14 == null ? null : vdef14.trim());
                //
                String vdef15 = rs.getString(34);
                order.setVdef15(vdef15 == null ? null : vdef15.trim());
                //
                String vdef16 = rs.getString(35);
                order.setVdef16(vdef16 == null ? null : vdef16.trim());
                //
                String vdef17 = rs.getString(36);
                order.setVdef17(vdef17 == null ? null : vdef17.trim());
                //
                String vdef18 = rs.getString(37);
                order.setVdef18(vdef18 == null ? null : vdef18.trim());
                //
                String vdef19 = rs.getString(38);
                order.setVdef19(vdef19 == null ? null : vdef19.trim());
                //
                String vdef20 = rs.getString(39);
                order.setVdef20(vdef20 == null ? null : vdef20.trim());
                //
                String pk_defdoc1 = rs.getString(40);
                order.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
                //
                String pk_defdoc2 = rs.getString(41);
                order.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
                //
                String pk_defdoc3 = rs.getString(42);
                order.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
                //
                String pk_defdoc4 = rs.getString(43);
                order.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
                //
                String pk_defdoc5 = rs.getString(44);
                order.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
                //
                String pk_defdoc6 = rs.getString(45);
                order.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
                //
                String pk_defdoc7 = rs.getString(46);
                order.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
                //
                String pk_defdoc8 = rs.getString(47);
                order.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
                //
                String pk_defdoc9 = rs.getString(48);
                order.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
                //
                String pk_defdoc10 = rs.getString(49);
                order.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
                //
                String pk_defdoc11 = rs.getString(50);
                order.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
                //
                String pk_defdoc12 = rs.getString(51);
                order.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
                //
                String pk_defdoc13 = rs.getString(52);
                order.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
                //
                String pk_defdoc14 = rs.getString(53);
                order.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
                //
                String pk_defdoc15 = rs.getString(54);
                order.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
                //
                String pk_defdoc16 = rs.getString(55);
                order.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
                //
                String pk_defdoc17 = rs.getString(56);
                order.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
                //
                String pk_defdoc18 = rs.getString(57);
                order.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
                //
                String pk_defdoc19 = rs.getString(58);
                order.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
                //
                String pk_defdoc20 = rs.getString(59);
                order.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());

                // cvendormangid :
                String cvendormangid = rs.getString(60);
                order.setCvendormangid(cvendormangid == null ? null : cvendormangid.trim());
                // cauditpsn :
                String cauditpsn = rs.getString(61);
                order.setCauditpsn(cauditpsn == null ? null : cauditpsn.trim());
                // dauditdate :
                String dauditdate = rs.getString(62);
                order.setDauditdate(dauditdate == null ? null : new UFDate(dauditdate.trim(), false));
                // ts :
                String ts = rs.getString(63);
                order.setTs(ts == null ? null : ts.trim());
                // iprintcount :
                Integer iprintcount = (Integer) rs.getObject(64);
                order.setIprintcount(iprintcount == null ? null : iprintcount);

                String tmaketime = rs.getString(65);
                order.setTmaketime(tmaketime == null ? null : tmaketime.trim());
                String taudittime = rs.getString(66);
                order.setTaudittime(taudittime == null ? null : taudittime.trim());
                String tlastmaketime = rs.getString(67);
                order.setTlastmaketime(tlastmaketime == null ? null : tlastmaketime.trim());

                //add name -------
                int index = 68;
                // biztypename :
                String biztypename = rs.getString(index++);
                order.setVbiztypename(biztypename == null ? null : biztypename.trim());
                // calbodyname :
                String calbodyname = rs.getString(index++);
                order.setVcalbodyname(calbodyname == null ? null : calbodyname.trim());
                // purname :
                String purname = rs.getString(index++);
                order.setVpurname(purname == null ? null : purname.trim());
                // custname :
                String custname = rs.getString(index++);
                order.setVcustname(custname == null ? null : custname.trim());
                // deptname :
                String deptname = rs.getString(index++);
                order.setVdeptname(deptname == null ? null : deptname.trim());
                // employeename :
                String employeename = rs.getString(index++);
                order.setVemployeename(employeename == null ? null : employeename.trim());
                // giveinvoicename :
                String giveinvoicename = rs.getString(index++);
                order.setVgiveinvoicename(giveinvoicename == null ? null : giveinvoicename.trim());
                // receivename :
                String receivename = rs.getString(index++);
                order.setVreceivename(receivename == null ? null : receivename.trim());
                // bankname :
                String bankname = rs.getString(index++);
                order.setVbankname(bankname == null ? null : bankname.trim());
                // transmodename :
                String transmodename = rs.getString(index++);
                order.setVtransmodename(transmodename == null ? null : transmodename.trim());
                // protocolname :
                String protocolname = rs.getString(index++);
                order.setVprotocolname(protocolname == null ? null : protocolname.trim());
                // operatorname :
                String operatorname = rs.getString(index++);
                order.setVoperatorname(operatorname == null ? null : operatorname.trim());
                // auditpsnname :
                String auditpsnname = rs.getString(index++);
                order.setVauditpsnname(auditpsnname == null ? null : auditpsnname.trim());

                v.addElement(order);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        orders = new OrderHeaderVO[v.size()];
        if (v.size() > 0) {
            v.copyInto(orders);
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "queryAllHead", new Object[] { auditCondition, condition });
        /*************************************************************/

        return orders;
    }

    /**
     *
     * 其它单据参照订单时用（订单行未关闭的订单）
     * auditCondition:（已审批--1、未审批--2）
     *
     *
     * 创建日期：(2001-6-20)
     * @return nc.bs.sc.order.OrderDMO.OrderHeaderVO[]
     * @param unitCode int
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderHeaderVO[] queryAllHead(String auditCondition, String condition, String usedByRef) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "queryAllHead", new Object[] { auditCondition, condition });
        /*************************************************************/
        //处理查询条件
        String key = "corderid";
        if (condition != null && !condition.trim().equals("") && condition.indexOf(key) >= 0) {
            String mid = condition;
            condition = "";
            int iIndexCarriveorderid = mid.indexOf(key);
            condition = mid.substring(0, iIndexCarriveorderid) + " ";
            condition += " sc_order." + key + " ";
            condition += mid.substring(iIndexCarriveorderid + key.length(), mid.length()) + " ";
            
            if(condition.indexOf("sc_order.  sc_order.corderid =") >= 0 || condition.indexOf("sc_order.sc_order.corderid =") >= 0){
              condition = StringUtil.replaceAllString(condition, "sc_order.  sc_order.corderid =", "sc_order.corderid =");
              condition = StringUtil.replaceAllString(condition, "sc_order.sc_order.corderid =", "sc_order.corderid =");
              auditCondition = "foruapquery";
            }
        }

        //
        String patch = " left join bd_cubasdoc on sc_order.cvendorid=bd_cubasdoc.pk_cubasdoc \n";
        patch += " left join bd_psndoc on sc_order.cemployeeid=bd_psndoc.pk_psndoc \n";
        patch += " left join bd_deptdoc on sc_order.cdeptid=bd_deptdoc.pk_deptdoc \n";
        patch += " inner join sc_order_b on sc_order.corderid = sc_order_b.corderid  \n";
        patch += " left join bd_invbasdoc on bd_invbasdoc.pk_invbasdoc = sc_order_b.cbaseid \n";
        //存货分类
        patch += " left join bd_invcl on bd_invbasdoc.pk_invcl = bd_invcl.pk_invcl ";

        StringBuffer strbuf = new StringBuffer();
        strbuf.append(" \n select distinct sc_order.corderid, vordercode, sc_order.pk_corp, cpurorganization, \n");
        strbuf.append(" cwareid, dorderdate, cvendorid, caccountbankid, cdeptid, cemployeeid, \n");
        strbuf.append(" cbiztype, creciever, cgiveinvoicevendor, ctransmodeid, ctermProtocolid,\n");
        strbuf.append(" ibillstatus, sc_order.vmemo, caccountyear, sc_order.coperator, \n");
        strbuf.append(" sc_order.vdef1, sc_order.vdef2, sc_order.vdef3, \n");
        strbuf.append(" sc_order.vdef4, sc_order.vdef5, sc_order.vdef6, \n");
        strbuf.append(" sc_order.vdef7, sc_order.vdef8, sc_order.vdef9, sc_order.vdef10 ,\n");
        strbuf.append(" sc_order.vdef11, sc_order.vdef12, sc_order.vdef13, sc_order.vdef14, sc_order.vdef15, sc_order.vdef16, sc_order.vdef17, sc_order.vdef18, sc_order.vdef19, sc_order.vdef20, sc_order.pk_defdoc1, sc_order.pk_defdoc2, sc_order.pk_defdoc3, sc_order.pk_defdoc4, sc_order.pk_defdoc5, sc_order.pk_defdoc6, sc_order.pk_defdoc7, sc_order.pk_defdoc8, sc_order.pk_defdoc9, sc_order.pk_defdoc10, sc_order.pk_defdoc11, sc_order.pk_defdoc12, sc_order.pk_defdoc13, sc_order.pk_defdoc14, sc_order.pk_defdoc15, sc_order.pk_defdoc16, sc_order.pk_defdoc17, sc_order.pk_defdoc18, sc_order.pk_defdoc19, sc_order.pk_defdoc20 ,\n");
        //wyf	modify	20002-04-30	begin
        //原因：不能分辨ts属于哪个表
        //strbuf.append(" cvendormangid ,cauditpsn, dauditdate, ts  \n ");
        strbuf.append(" cvendormangid ,cauditpsn, dauditdate, sc_order.ts, sc_order.iprintcount,sc_order.tmaketime,sc_order.taudittime,sc_order.tlastmaketime  \n ");
        //wyf	modify	20002-04-30	end
        strbuf.append(" from  \n");
        strbuf.append(" sc_order \n");

        strbuf.append(patch);

        String sql = strbuf.toString();

        if (auditCondition.equals("foruapquery")){
          sql += " where sc_order.dr = 0 and sc_order_b.dr = 0 ";
        }else{
          sql += " where sc_order_b.bisactive='0'  and sc_order.dr = 0 and sc_order_b.dr = 0 ";
        }

        if (auditCondition.equals("1"))
            sql += " and ibillstatus = 3 ";
        else if (auditCondition.equals("2"))
            sql += " and (ibillstatus = 0 or ibillstatus=4) ";
        else if (auditCondition.equals("foruapquery"))
          sql += " and (ibillstatus = 0 or ibillstatus = 2 or ibillstatus=4 or ibillstatus=3) ";
        else
            auditCondition = null;

        if (condition != null)
            sql = sql + (" and ") + condition;

        OrderHeaderVO orders[] = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            SCMEnv.out(sql);
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                OrderHeaderVO order = new OrderHeaderVO();
                // corderid :
                String corderid = rs.getString(1);
                order.setCorderid(corderid == null ? null : corderid.trim());
                // vordercode :
                String vordercode = rs.getString(2);
                order.setVordercode(vordercode == null ? null : vordercode.trim());
                // pk_corp :
                String pk_corp = rs.getString(3);
                order.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                // cpurorganization :
                String cpurorganization = rs.getString(4);
                order.setCpurorganization(cpurorganization == null ? null : cpurorganization.trim());
                // cwareid :
                String cwareid = rs.getString(5);
                order.setCwareid(cwareid == null ? null : cwareid.trim());
                // dorderdate :
                String dorderdate = rs.getString(6);
                order.setDorderdate(dorderdate == null ? null : new UFDate(dorderdate.trim(), false));
                // cvendorid :
                String cvendorid = rs.getString(7);
                order.setCvendorid(cvendorid == null ? null : cvendorid.trim());
                // caccountbankid :
                String caccountbankid = rs.getString(8);
                order.setCaccountbankid(caccountbankid == null ? null : caccountbankid.trim());
                // cdeptid :
                String cdeptid = rs.getString(9);
                order.setCdeptid(cdeptid == null ? null : cdeptid.trim());
                // cemployeeid :
                String cemployeeid = rs.getString(10);
                order.setCemployeeid(cemployeeid == null ? null : cemployeeid.trim());
                // cbiztypeid :
                String cbiztypeid = rs.getString(11);
                order.setCbiztype(cbiztypeid == null ? null : cbiztypeid.trim());
                // creciever :
                String creciever = rs.getString(12);
                order.setCreciever(creciever == null ? null : creciever.trim());
                // cgiveinvoicevendor :
                String cgiveinvoicevendor = rs.getString(13);
                order.setCgiveinvoicevendor(cgiveinvoicevendor == null ? null : cgiveinvoicevendor.trim());
                // ctransmodeid :
                String ctransmodeid = rs.getString(14);
                order.setCtransmodeid(ctransmodeid == null ? null : ctransmodeid.trim());
                // ctermProtocolid :
                String ctermProtocolid = rs.getString(15);
                order.setCtermProtocolid(ctermProtocolid == null ? null : ctermProtocolid.trim());
                // ibillstatus :
                Integer ibillstatus = (Integer) rs.getObject(16);
                order.setIbillstatus(ibillstatus == null ? null : ibillstatus);
                // vmemo :
                String vmemo = rs.getString(17);
                order.setVmemo(vmemo == null ? null : vmemo.trim());
                // caccountyear :
                String caccountyear = rs.getString(18);
                order.setCaccountyear(caccountyear == null ? null : caccountyear.trim());
                // coperator :
                String coperator = rs.getString(19);
                order.setCoperator(coperator == null ? null : coperator.trim());
                // vdef1 :
                String vdef1 = rs.getString(20);
                order.setVdef1(vdef1 == null ? null : vdef1.trim());
                // vdef2 :
                String vdef2 = rs.getString(21);
                order.setVdef2(vdef2 == null ? null : vdef2.trim());
                // vdef3 :
                String vdef3 = rs.getString(22);
                order.setVdef3(vdef3 == null ? null : vdef3.trim());
                // vdef4 :
                String vdef4 = rs.getString(23);
                order.setVdef4(vdef4 == null ? null : vdef4.trim());
                // vdef5 :
                String vdef5 = rs.getString(24);
                order.setVdef5(vdef5 == null ? null : vdef5.trim());
                // vdef6 :
                String vdef6 = rs.getString(25);
                order.setVdef6(vdef6 == null ? null : vdef6.trim());
                // vdef7 :
                String vdef7 = rs.getString(26);
                order.setVdef7(vdef7 == null ? null : vdef7.trim());
                // vdef8 :
                String vdef8 = rs.getString(27);
                order.setVdef8(vdef8 == null ? null : vdef8.trim());
                // vdef9 :
                String vdef9 = rs.getString(28);
                order.setVdef9(vdef9 == null ? null : vdef9.trim());
                // vdef10 :
                String vdef10 = rs.getString(29);
                order.setVdef10(vdef10 == null ? null : vdef10.trim());

                //
                String vdef11 = rs.getString(30);
                order.setVdef11(vdef11 == null ? null : vdef11.trim());
                //
                String vdef12 = rs.getString(31);
                order.setVdef12(vdef12 == null ? null : vdef12.trim());
                //
                String vdef13 = rs.getString(32);
                order.setVdef13(vdef13 == null ? null : vdef13.trim());
                //
                String vdef14 = rs.getString(33);
                order.setVdef14(vdef14 == null ? null : vdef14.trim());
                //
                String vdef15 = rs.getString(34);
                order.setVdef15(vdef15 == null ? null : vdef15.trim());
                //
                String vdef16 = rs.getString(35);
                order.setVdef16(vdef16 == null ? null : vdef16.trim());
                //
                String vdef17 = rs.getString(36);
                order.setVdef17(vdef17 == null ? null : vdef17.trim());
                //
                String vdef18 = rs.getString(37);
                order.setVdef18(vdef18 == null ? null : vdef18.trim());
                //
                String vdef19 = rs.getString(38);
                order.setVdef19(vdef19 == null ? null : vdef19.trim());
                //
                String vdef20 = rs.getString(39);
                order.setVdef20(vdef20 == null ? null : vdef20.trim());
                //
                String pk_defdoc1 = rs.getString(40);
                order.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
                //
                String pk_defdoc2 = rs.getString(41);
                order.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
                //
                String pk_defdoc3 = rs.getString(42);
                order.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
                //
                String pk_defdoc4 = rs.getString(43);
                order.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
                //
                String pk_defdoc5 = rs.getString(44);
                order.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
                //
                String pk_defdoc6 = rs.getString(45);
                order.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
                //
                String pk_defdoc7 = rs.getString(46);
                order.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
                //
                String pk_defdoc8 = rs.getString(47);
                order.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
                //
                String pk_defdoc9 = rs.getString(48);
                order.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
                //
                String pk_defdoc10 = rs.getString(49);
                order.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
                //
                String pk_defdoc11 = rs.getString(50);
                order.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
                //
                String pk_defdoc12 = rs.getString(51);
                order.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
                //
                String pk_defdoc13 = rs.getString(52);
                order.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
                //
                String pk_defdoc14 = rs.getString(53);
                order.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
                //
                String pk_defdoc15 = rs.getString(54);
                order.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
                //
                String pk_defdoc16 = rs.getString(55);
                order.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
                //
                String pk_defdoc17 = rs.getString(56);
                order.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
                //
                String pk_defdoc18 = rs.getString(57);
                order.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
                //
                String pk_defdoc19 = rs.getString(58);
                order.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
                //
                String pk_defdoc20 = rs.getString(59);
                order.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());

                // cvendormangid :
                String cvendormangid = rs.getString(60);
                order.setCvendormangid(cvendormangid == null ? null : cvendormangid.trim());
                // cauditpsn :
                String cauditpsn = rs.getString(61);
                order.setCauditpsn(cauditpsn == null ? null : cauditpsn.trim());
                // dauditdate :
                String dauditdate = rs.getString(62);
                order.setDauditdate(dauditdate == null ? null : new UFDate(dauditdate.trim(), false));

                // modifid by czp 2002-04-13 11:07
                String ts = rs.getString(63);
                order.setTs(ts == null ? null : ts.trim());
                // iprintcount :
                Integer iprintcount = (Integer) rs.getObject(64);
                order.setIprintcount(iprintcount == null ? null : iprintcount);

                String tmaketime = rs.getString(65);
                order.setTmaketime(tmaketime == null ? null : tmaketime.trim());
                String taudittime = rs.getString(66);
                order.setTaudittime(taudittime == null ? null : taudittime.trim());
                String tlastmaketime = rs.getString(67);
                order.setTlastmaketime(tlastmaketime == null ? null : tlastmaketime.trim());

                v.addElement(order);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        orders = new OrderHeaderVO[v.size()];
        if (v.size() > 0) {
            v.copyInto(orders);
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "queryAllHead", new Object[] { auditCondition, condition });
        /*************************************************************/

        return orders;
    }

    public CircularlyAccessibleValueObject[] queryAllHeadData(String whereString) throws BusinessException {

        try {
			return queryAllHead("1", whereString, "");
		} catch (SQLException e) {
			// TODO 自动生成 catch 块
			SCMEnv.out(e);
		}
		return null ;

    }

    /**
     * 订单参照请购单
     * 功能描述:查询表体
     * 输入参数:单位编码
     * 返回值:表体VO集合
     * 异常处理:无
     */
    public NewPraybillItemVO[] queryAllPrayBody(String condition) throws SQLException {
        StringBuffer patch = new StringBuffer();
        //请购部门
        patch.append(" left join bd_deptdoc on po_praybill.cdeptid = bd_deptdoc.pk_deptdoc   ");
        //请购人
        patch.append(" left join bd_psndoc on po_praybill.cpraypsn = bd_psndoc.pk_psndoc  ");
        //业务类型
        patch.append(" left join bd_busitype on po_praybill_b.cbiztype = bd_busitype.pk_busitype    ");
        //库存组织
        patch.append(" left join bd_calbody on po_praybill_b.pk_reqstoorg = bd_calbody.pk_calbody    ");
        //制单人
        patch.append(" left join sm_user on po_praybill.coperator = sm_user.cuserid  ");
        patch.append("");

        StringBuffer sql = new StringBuffer();
        sql.append("    ");
        sql.append(" select cpraybill_bid, po_praybill_b.cpraybillid, po_praybill_b.pk_corp,   ");
        sql.append(" cpurorganization, cmangid, cbaseid, isnull(npraynum,0),   ");
        sql.append(" cassistunit, nassistnum, nsuggestprice, cvendormangid, cvendorbaseid,  ");
        sql.append(" ddemanddate, dsuggestdate, cwarehouseid, isnull(naccumulatenum,0) ,  ");

        sql.append(" po_praybill.cdeptid,po_praybill.vpraycode,po_praybill_b.pk_reqstoorg, ");
        sql.append(" po_praybill.vdef1, po_praybill.vdef2, po_praybill.vdef3, po_praybill.vdef4, po_praybill.vdef5,");
        sql.append(" po_praybill.vdef6, po_praybill.vdef7, po_praybill.vdef8, po_praybill.vdef9, po_praybill.vdef10,");
        sql.append(" po_praybill.vdef11, po_praybill.vdef12, po_praybill.vdef13, po_praybill.vdef14, po_praybill.vdef15,");
        sql.append(" po_praybill.vdef16, po_praybill.vdef17, po_praybill.vdef18, po_praybill.vdef19, po_praybill.vdef20,");
        sql.append(" po_praybill.vmemo,");

        sql.append(" po_praybill.ts, po_praybill_b.ts,");

        sql.append(" po_praybill_b.vdef1, po_praybill_b.vdef2, po_praybill_b.vdef3, po_praybill_b.vdef4, po_praybill_b.vdef5, po_praybill_b.vdef6, ");

        sql.append(" po_praybill_b.vdef7, po_praybill_b.vdef8, po_praybill_b.vdef9, po_praybill_b.vdef10, ");

        sql.append(" po_praybill_b.vdef11, po_praybill_b.vdef12, po_praybill_b.vdef13, po_praybill_b.vdef14, po_praybill_b.vdef15, po_praybill_b.vdef16, ");

        sql.append(" po_praybill_b.vdef17, po_praybill_b.vdef18, po_praybill_b.vdef19, po_praybill_b.vdef20, ");

        sql.append(" po_praybill_b.vmemo, ");
        //增加查询字段：请购单表体自由项/项目/项目阶段/批次号
        sql.append(" po_praybill_b.vfree1, po_praybill_b.vfree2, po_praybill_b.vfree3, po_praybill_b.vfree4, po_praybill_b.vfree5, ");
        sql.append(" po_praybill_b.cprojectid, po_praybill_b.cprojectphaseid, ");
        sql.append(" po_praybill_b.vproducenum, ");
        sql.append(" po_praybill_b.csourcebilltype,po_praybill_b.csourcebillid,po_praybill_b.csourcebillrowid,po_praybill_b.cupsourcebilltype,po_praybill_b.cupsourcebillid,po_praybill_b.cupsourcebillrowid ");

        sql.append(" from po_praybill   ");
        sql.append(" left join po_praybill_b   ");
        sql.append("      on po_praybill.pk_corp=po_praybill_b.pk_corp and po_praybill.cpraybillid = po_praybill_b.cpraybillid   ");
        sql.append(patch.toString());
        sql.append(" where po_praybill.dr=0 and po_praybill_b.dr=0 and po_praybill.ibillstatus=3   ");
        sql.append(" and isnull(npraynum,0)>isnull(naccumulatenum,0)   ");

        if (condition != null && !condition.trim().equals(""))
            sql.append(" and " + condition + "   ");

        NewPraybillItemVO praybillBs[] = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql.toString());
            rs = stmt.executeQuery();
            //
            while (rs.next()) {
                NewPraybillItemVO praybillB = new NewPraybillItemVO();
                // cpraybill_bid :
                String cpraybill_bid = rs.getString(1);
                praybillB.setCpraybill_bid(cpraybill_bid == null ? null : cpraybill_bid.trim());
                // cpraybillid :
                String cpraybillid = rs.getString(2);
                praybillB.setCpraybillid(cpraybillid == null ? null : cpraybillid.trim());
                // cunitid :
                String cunitid = rs.getString(3);
                praybillB.setPk_corp(cunitid == null ? null : cunitid.trim());
                // cpurorganization :
                String cpurorganization = rs.getString(4);
                praybillB.setCpurorganization(cpurorganization == null ? null : cpurorganization.trim());
                // cmangid :
                String cmangid = rs.getString(5);
                praybillB.setCmangid(cmangid == null ? null : cmangid.trim());
                // cbaseid :
                String cbaseid = rs.getString(6);
                praybillB.setCbaseid(cbaseid == null ? null : cbaseid.trim());
                // npraynum :
                BigDecimal npraynum = (BigDecimal) rs.getBigDecimal(7);
                praybillB.setNpraynum(npraynum == null ? null : new UFDouble(npraynum));
                // cassistunit :
                String cassistunit = rs.getString(8);
                praybillB.setCassistunit(cassistunit == null ? null : cassistunit.trim());
                // nassistnum :
                BigDecimal nassistnum = (BigDecimal) rs.getBigDecimal(9);
                praybillB.setNassistnum(nassistnum == null ? null : new UFDouble(nassistnum));
                // nsuggestprice :
                BigDecimal nsuggestprice = (BigDecimal) rs.getBigDecimal(10);
                praybillB.setNsuggestprice(nsuggestprice == null ? null : new UFDouble(nsuggestprice));
                // cvendormangid :
                String cvendormangid = rs.getString(11);
                praybillB.setCvendormangid(cvendormangid == null ? null : cvendormangid.trim());
                // cvendorbaseid :
                String cvendorbaseid = rs.getString(12);
                praybillB.setCvendorbaseid(cvendorbaseid == null ? null : cvendorbaseid.trim());
                // ddemanddate :
                String ddemanddate = rs.getString(13);
                praybillB.setDdemanddate(ddemanddate == null ? null : new UFDate(ddemanddate.trim(), false));
                // dsuggestdate :
                String dsuggestdate = rs.getString(14);
                praybillB.setDsuggestdate(dsuggestdate == null ? null : new UFDate(dsuggestdate.trim(), false));
                // cwarehouseid :
                String cwarehouseid = rs.getString(15);
                praybillB.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
                // naccumulatenum :
                BigDecimal naccumulatenum = (BigDecimal) rs.getBigDecimal(16);
                praybillB.setNaccumulatenum(naccumulatenum == null ? null : new UFDouble(naccumulatenum));
                // cdeptid :
                String cdeptid = rs.getString(17);
                praybillB.setCdeptid(cdeptid == null ? null : cdeptid.trim());
                // vpraycode :
                String vpraycode = rs.getString(18);
                praybillB.setVpraycode(vpraycode == null ? null : vpraycode.trim());
                //cstoreorganization
                String cstoreorganization = rs.getString(19);
                praybillB.setCstoreorganization(cstoreorganization == null ? null : cstoreorganization.trim());
                //表头自定义项
                String[] vdefs = new String[20];
                String vdef1 = rs.getString(20);
                vdefs[0] = (vdef1 == null ? null : vdef1.trim());
                String vdef2 = rs.getString(21);
                vdefs[1] = (vdef2 == null ? null : vdef2.trim());
                String vdef3 = rs.getString(22);
                vdefs[2] = (vdef3 == null ? null : vdef3.trim());
                String vdef4 = rs.getString(23);
                vdefs[3] = (vdef4 == null ? null : vdef4.trim());
                String vdef5 = rs.getString(24);
                vdefs[4] = (vdef5 == null ? null : vdef5.trim());
                String vdef6 = rs.getString(25);
                vdefs[5] = (vdef6 == null ? null : vdef6.trim());
                String vdef7 = rs.getString(26);
                vdefs[6] = (vdef7 == null ? null : vdef7.trim());
                String vdef8 = rs.getString(27);
                vdefs[7] = (vdef8 == null ? null : vdef8.trim());
                String vdef9 = rs.getString(28);
                vdefs[8] = (vdef9 == null ? null : vdef9.trim());
                String vdef10 = rs.getString(29);
                vdefs[9] = (vdef10 == null ? null : vdef10.trim());

                String vdef11 = rs.getString(30);
                vdefs[10] = (vdef11 == null ? null : vdef11.trim());
                String vdef12 = rs.getString(31);
                vdefs[11] = (vdef12 == null ? null : vdef12.trim());
                String vdef13 = rs.getString(32);
                vdefs[12] = (vdef13 == null ? null : vdef13.trim());
                String vdef14 = rs.getString(33);
                vdefs[13] = (vdef14 == null ? null : vdef14.trim());
                String vdef15 = rs.getString(34);
                vdefs[14] = (vdef15 == null ? null : vdef15.trim());
                String vdef16 = rs.getString(35);
                vdefs[15] = (vdef16 == null ? null : vdef16.trim());
                String vdef17 = rs.getString(36);
                vdefs[16] = (vdef17 == null ? null : vdef17.trim());
                String vdef18 = rs.getString(37);
                vdefs[17] = (vdef18 == null ? null : vdef18.trim());
                String vdef19 = rs.getString(38);
                vdefs[18] = (vdef19 == null ? null : vdef19.trim());
                String vdef20 = rs.getString(39);
                vdefs[19] = (vdef20 == null ? null : vdef20.trim());

                praybillB.setHvdefs(vdefs);

                //表头备注
                String memo = rs.getString(40);
                praybillB.setHmemo(memo == null ? null : memo.trim());
                //表头ts
                String hts = rs.getString(41);
                praybillB.setHts(hts == null ? null : hts.trim());
                //表体ts
                String bts = rs.getString(42);
                praybillB.setTs(bts == null ? null : bts.trim());

                //表体自定义项
                String def1 = rs.getString(43);
                praybillB.setAttributeValue("vdef1", def1 == null ? null : def1.trim());
                String def2 = rs.getString(44);
                praybillB.setAttributeValue("vdef2", def2 == null ? null : def2.trim());
                String def3 = rs.getString(45);
                praybillB.setAttributeValue("vdef3", def3 == null ? null : def3.trim());
                String def4 = rs.getString(46);
                praybillB.setAttributeValue("vdef4", def4 == null ? null : def4.trim());
                String def5 = rs.getString(47);
                praybillB.setAttributeValue("vdef5", def5 == null ? null : def5.trim());
                String def6 = rs.getString(48);
                praybillB.setAttributeValue("vdef6", def6 == null ? null : def6.trim());

                String def7 = rs.getString(49);
                praybillB.setAttributeValue("vdef7", def7 == null ? null : def7.trim());
                String def8 = rs.getString(50);
                praybillB.setAttributeValue("vdef8", def8 == null ? null : def8.trim());
                String def9 = rs.getString(51);
                praybillB.setAttributeValue("vdef9", def9 == null ? null : def9.trim());
                String def10 = rs.getString(52);
                praybillB.setAttributeValue("vdef10", def10 == null ? null : def10.trim());

                String def11 = rs.getString(53);
                praybillB.setAttributeValue("vdef11", def11 == null ? null : def11.trim());
                String def12 = rs.getString(54);
                praybillB.setAttributeValue("vdef12", def12 == null ? null : def12.trim());
                String def13 = rs.getString(55);
                praybillB.setAttributeValue("vdef13", def13 == null ? null : def13.trim());
                String def14 = rs.getString(56);
                praybillB.setAttributeValue("vdef14", def14 == null ? null : def14.trim());
                String def15 = rs.getString(57);
                praybillB.setAttributeValue("vdef15", def15 == null ? null : def15.trim());
                String def16 = rs.getString(58);
                praybillB.setAttributeValue("vdef16", def16 == null ? null : def16.trim());

                String def17 = rs.getString(59);
                praybillB.setAttributeValue("vdef17", def17 == null ? null : def17.trim());
                String def18 = rs.getString(60);
                praybillB.setAttributeValue("vdef18", def18 == null ? null : def18.trim());
                String def19 = rs.getString(61);
                praybillB.setAttributeValue("vdef19", def19 == null ? null : def19.trim());
                String def20 = rs.getString(62);
                praybillB.setAttributeValue("vdef20", def20 == null ? null : def20.trim());

                //表体备注
                String bmemo = rs.getString(63);
                praybillB.setVmemo(bmemo == null ? null : bmemo.trim());
                //表体自由项
                String vfree1 = rs.getString(64);
                praybillB.setVfree1(vfree1 == null ? null : vfree1.trim());
                String vfree2 = rs.getString(65);
                praybillB.setVfree2(vfree2 == null ? null : vfree2.trim());
                String vfree3 = rs.getString(66);
                praybillB.setVfree3(vfree3 == null ? null : vfree3.trim());
                String vfree4 = rs.getString(67);
                praybillB.setVfree4(vfree4 == null ? null : vfree4.trim());
                String vfree5 = rs.getString(68);
                praybillB.setVfree5(vfree5 == null ? null : vfree5.trim());
                //项目/项目阶段
                String cprojectid = rs.getString(69);
                praybillB.setCprojectid(cprojectid == null ? null : cprojectid.trim());
                String cprojectphaseid = rs.getString(70);
                praybillB.setCprojectphaseid(cprojectphaseid == null ? null : cprojectphaseid.trim());
                //批次号
                String vproducenum = rs.getString(71);
                praybillB.setVproducenum(vproducenum == null ? null : vproducenum.trim());

                //add by yye begin上游单据信息

                String csourcebilltype = rs.getString(72);
                praybillB.setCsourcebilltype(csourcebilltype == null ? null : csourcebilltype.trim());

                String csourcebillid = rs.getString(73);
                praybillB.setCsourcebillid(csourcebillid == null ? null : csourcebillid.trim());

                String csourcebillrowid = rs.getString(74);
                praybillB.setCsourcebillrowid(csourcebillrowid == null ? null : csourcebillrowid.trim());

                String cupsourcebilltype = rs.getString(75);
                praybillB.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());

                String cupsourcebillid = rs.getString(76);
                praybillB.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());

                String cupsourcebillrowid = rs.getString(77);
                praybillB.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());

                v.addElement(praybillB);

                //add by yye end
            }
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
            } catch (Exception e) {
            }
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        praybillBs = new NewPraybillItemVO[v.size()];
        if (v.size() > 0) {
            v.copyInto(praybillBs);
        }

        return praybillBs;
    }

    /**
     * 根据VO中所设定的条件返回所有符合条件的VO数组
     *
     * 创建日期：(2001-6-20)
     * @return nc.vo.po.mp005.OrderVO[]
     * @param nc.bs.sc.order.OrderDMO.OrderHeaderVO
     * @param isAnd boolean 以与条件查询还是以或条件查询
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderHeaderVO[] queryHeadByVO(OrderHeaderVO condOrderVO, Boolean isAnd) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "queryHeadByVO", new Object[] { condOrderVO, isAnd });
        /*************************************************************/

        String strSql = "select corderid, vordercode, pk_corp, cpurorganization, cwareid, dorderdate, cvendorid, caccountbankid, cdeptid, cemployeeid, cbiztype, creciever, cgiveinvoicevendor, ctransmodeid, ctermProtocolid, ibillstatus, vmemo, caccountyear, coperator, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10, pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20, iprintcount from sc_order";
        String strConditionNames = "";
        String strAndOr = "and ";
        if (!isAnd.booleanValue()) {
            strAndOr = "or  ";
        }
        if (condOrderVO.getVordercode() != null) {
            strConditionNames += strAndOr + "vordercode=? ";
        }
        if (condOrderVO.getPk_corp() != null) {
            strConditionNames += strAndOr + "pk_corp=? ";
        }
        if (condOrderVO.getCpurorganization() != null) {
            strConditionNames += strAndOr + "cpurorganization=? ";
        }
        if (condOrderVO.getCwareid() != null) {
            strConditionNames += strAndOr + "cwareid=? ";
        }
        if (condOrderVO.getDorderdate() != null) {
            strConditionNames += strAndOr + "dorderdate=? ";
        }
        if (condOrderVO.getCvendorid() != null) {
            strConditionNames += strAndOr + "cvendorid=? ";
        }
        if (condOrderVO.getCaccountbankid() != null) {
            strConditionNames += strAndOr + "caccountbankid=? ";
        }
        if (condOrderVO.getCdeptid() != null) {
            strConditionNames += strAndOr + "cdeptid=? ";
        }
        if (condOrderVO.getCemployeeid() != null) {
            strConditionNames += strAndOr + "cemployeeid=? ";
        }
        if (condOrderVO.getCbiztype() != null) {
            strConditionNames += strAndOr + "cbiztype=? ";
        }
        if (condOrderVO.getCreciever() != null) {
            strConditionNames += strAndOr + "creciever=? ";
        }
        if (condOrderVO.getCgiveinvoicevendor() != null) {
            strConditionNames += strAndOr + "cgiveinvoicevendor=? ";
        }
        if (condOrderVO.getCtransmodeid() != null) {
            strConditionNames += strAndOr + "ctransmodeid=? ";
        }
        if (condOrderVO.getCtermProtocolid() != null) {
            strConditionNames += strAndOr + "ctermProtocolid=? ";
        }
        if (condOrderVO.getIbillstatus() != null) {
            strConditionNames += strAndOr + "ibillstatus=? ";
        }
        if (condOrderVO.getVmemo() != null) {
            strConditionNames += strAndOr + "vmemo=? ";
        }
        if (condOrderVO.getCaccountyear() != null) {
            strConditionNames += strAndOr + "caccountyear=? ";
        }
        if (condOrderVO.getCoperator() != null) {
            strConditionNames += strAndOr + "coperator=? ";
        }
        if (condOrderVO.getVdef1() != null) {
            strConditionNames += strAndOr + "vdef1=? ";
        }
        if (condOrderVO.getVdef2() != null) {
            strConditionNames += strAndOr + "vdef2=? ";
        }
        if (condOrderVO.getVdef3() != null) {
            strConditionNames += strAndOr + "vdef3=? ";
        }
        if (condOrderVO.getVdef4() != null) {
            strConditionNames += strAndOr + "vdef4=? ";
        }
        if (condOrderVO.getVdef5() != null) {
            strConditionNames += strAndOr + "vdef5=? ";
        }
        if (condOrderVO.getVdef6() != null) {
            strConditionNames += strAndOr + "vdef6=? ";
        }
        if (condOrderVO.getVdef7() != null) {
            strConditionNames += strAndOr + "vdef7=? ";
        }
        if (condOrderVO.getVdef8() != null) {
            strConditionNames += strAndOr + "vdef8=? ";
        }
        if (condOrderVO.getVdef9() != null) {
            strConditionNames += strAndOr + "vdef9=? ";
        }
        if (condOrderVO.getVdef10() != null) {
            strConditionNames += strAndOr + "vdef10=? ";
        }
        if (strConditionNames.length() > 0) {
            strConditionNames = strConditionNames.substring(3, strConditionNames.length() - 1);
        } else {
            return queryAllHead(null);
        }
        //拼接后的SQL语句
        strSql = strSql + " where dr=0 ";
        strSql = strSql + " and " + strConditionNames;
        //
        int index = 0;
        OrderHeaderVO orders[] = null;
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(strSql);
            // set query condition fields:
            // set non PK fields:
            if (condOrderVO.getVordercode() != null) {
                stmt.setString(++index, condOrderVO.getVordercode());
            }
            if (condOrderVO.getPk_corp() != null) {
                stmt.setString(++index, condOrderVO.getPk_corp());
            }
            if (condOrderVO.getCpurorganization() != null) {
                stmt.setString(++index, condOrderVO.getCpurorganization());
            }
            if (condOrderVO.getCwareid() != null) {
                stmt.setString(++index, condOrderVO.getCwareid());
            }
            if (condOrderVO.getDorderdate() != null) {
                stmt.setString(++index, condOrderVO.getDorderdate().toString());
            }
            if (condOrderVO.getCvendorid() != null) {
                stmt.setString(++index, condOrderVO.getCvendorid());
            }
            if (condOrderVO.getCaccountbankid() != null) {
                stmt.setString(++index, condOrderVO.getCaccountbankid());
            }
            if (condOrderVO.getCdeptid() != null) {
                stmt.setString(++index, condOrderVO.getCdeptid());
            }
            if (condOrderVO.getCemployeeid() != null) {
                stmt.setString(++index, condOrderVO.getCemployeeid());
            }
            if (condOrderVO.getCbiztype() != null) {
                stmt.setString(++index, condOrderVO.getCbiztype());
            }
            if (condOrderVO.getCreciever() != null) {
                stmt.setString(++index, condOrderVO.getCreciever());
            }
            if (condOrderVO.getCgiveinvoicevendor() != null) {
                stmt.setString(++index, condOrderVO.getCgiveinvoicevendor());
            }
            if (condOrderVO.getCtransmodeid() != null) {
                stmt.setString(++index, condOrderVO.getCtransmodeid());
            }
            if (condOrderVO.getCtermProtocolid() != null) {
                stmt.setString(++index, condOrderVO.getCtermProtocolid());
            }
            if (condOrderVO.getIbillstatus() != null) {
                stmt.setInt(++index, condOrderVO.getIbillstatus().intValue());
            }
            if (condOrderVO.getVmemo() != null) {
                stmt.setString(++index, condOrderVO.getVmemo());
            }
            if (condOrderVO.getCaccountyear() != null) {
                stmt.setString(++index, condOrderVO.getCaccountyear());
            }
            if (condOrderVO.getCoperator() != null) {
                stmt.setString(++index, condOrderVO.getCoperator());
            }
            if (condOrderVO.getVdef1() != null) {
                stmt.setString(++index, condOrderVO.getVdef1());
            }
            if (condOrderVO.getVdef2() != null) {
                stmt.setString(++index, condOrderVO.getVdef2());
            }
            if (condOrderVO.getVdef3() != null) {
                stmt.setString(++index, condOrderVO.getVdef3());
            }
            if (condOrderVO.getVdef4() != null) {
                stmt.setString(++index, condOrderVO.getVdef4());
            }
            if (condOrderVO.getVdef5() != null) {
                stmt.setString(++index, condOrderVO.getVdef5());
            }
            if (condOrderVO.getVdef6() != null) {
                stmt.setString(++index, condOrderVO.getVdef6());
            }
            if (condOrderVO.getVdef7() != null) {
                stmt.setString(++index, condOrderVO.getVdef7());
            }
            if (condOrderVO.getVdef8() != null) {
                stmt.setString(++index, condOrderVO.getVdef8());
            }
            if (condOrderVO.getVdef9() != null) {
                stmt.setString(++index, condOrderVO.getVdef9());
            }
            if (condOrderVO.getVdef10() != null) {
                stmt.setString(++index, condOrderVO.getVdef10());
            }

            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                OrderHeaderVO order = new OrderHeaderVO();
                //
                String corderid = rs.getString(1);
                order.setCorderid(corderid == null ? null : corderid.trim());
                //
                String vordercode = rs.getString(2);
                order.setVordercode(vordercode == null ? null : vordercode.trim());
                //
                String pk_corp = rs.getString(3);
                order.setPk_corp(pk_corp == null ? null : pk_corp.trim());
                //
                String cpurorganization = rs.getString(4);
                order.setCpurorganization(cpurorganization == null ? null : cpurorganization.trim());
                //
                String cwareid = rs.getString(5);
                order.setCwareid(cwareid == null ? null : cwareid.trim());
                //
                String dorderdate = rs.getString(6);
                order.setDorderdate(dorderdate == null ? null : new UFDate(dorderdate.trim(), false));
                //
                String cvendorid = rs.getString(7);
                order.setCvendorid(cvendorid == null ? null : cvendorid.trim());
                //
                String caccountbankid = rs.getString(8);
                order.setCaccountbankid(caccountbankid == null ? null : caccountbankid.trim());
                //
                String cdeptid = rs.getString(9);
                order.setCdeptid(cdeptid == null ? null : cdeptid.trim());
                //
                String cemployeeid = rs.getString(10);
                order.setCemployeeid(cemployeeid == null ? null : cemployeeid.trim());
                //
                String cbiztypeid = rs.getString(11);
                order.setCbiztype(cbiztypeid == null ? null : cbiztypeid.trim());
                //
                String creciever = rs.getString(12);
                order.setCreciever(creciever == null ? null : creciever.trim());
                //
                String cgiveinvoicevendor = rs.getString(13);
                order.setCgiveinvoicevendor(cgiveinvoicevendor == null ? null : cgiveinvoicevendor.trim());
                //
                String ctransmodeid = rs.getString(14);
                order.setCtransmodeid(ctransmodeid == null ? null : ctransmodeid.trim());
                //
                String ctermProtocolid = rs.getString(15);
                order.setCtermProtocolid(ctermProtocolid == null ? null : ctermProtocolid.trim());
                //
                Integer ibillstatus = (Integer) rs.getObject(16);
                order.setIbillstatus(ibillstatus == null ? null : ibillstatus);
                //
                String vmemo = rs.getString(17);
                order.setVmemo(vmemo == null ? null : vmemo.trim());
                //
                String caccountyear = rs.getString(18);
                order.setCaccountyear(caccountyear == null ? null : caccountyear.trim());
                //
                String coperator = rs.getString(19);
                order.setCoperator(coperator == null ? null : coperator.trim());
                //
                String vdef1 = rs.getString(20);
                order.setVdef1(vdef1 == null ? null : vdef1.trim());
                //
                String vdef2 = rs.getString(21);
                order.setVdef2(vdef2 == null ? null : vdef2.trim());
                //
                String vdef3 = rs.getString(22);
                order.setVdef3(vdef3 == null ? null : vdef3.trim());
                //
                String vdef4 = rs.getString(23);
                order.setVdef4(vdef4 == null ? null : vdef4.trim());
                //
                String vdef5 = rs.getString(24);
                order.setVdef5(vdef5 == null ? null : vdef5.trim());
                //
                String vdef6 = rs.getString(25);
                order.setVdef6(vdef6 == null ? null : vdef6.trim());
                //
                String vdef7 = rs.getString(26);
                order.setVdef7(vdef7 == null ? null : vdef7.trim());
                //
                String vdef8 = rs.getString(27);
                order.setVdef8(vdef8 == null ? null : vdef8.trim());
                //
                String vdef9 = rs.getString(28);
                order.setVdef9(vdef9 == null ? null : vdef9.trim());
                //
                String vdef10 = rs.getString(29);
                order.setVdef10(vdef10 == null ? null : vdef10.trim());

                //
                String vdef11 = rs.getString(30);
                order.setVdef11(vdef11 == null ? null : vdef11.trim());
                //
                String vdef12 = rs.getString(31);
                order.setVdef12(vdef12 == null ? null : vdef12.trim());
                //
                String vdef13 = rs.getString(32);
                order.setVdef13(vdef13 == null ? null : vdef13.trim());
                //
                String vdef14 = rs.getString(33);
                order.setVdef14(vdef14 == null ? null : vdef14.trim());
                //
                String vdef15 = rs.getString(34);
                order.setVdef15(vdef15 == null ? null : vdef15.trim());
                //
                String vdef16 = rs.getString(35);
                order.setVdef16(vdef16 == null ? null : vdef16.trim());
                //
                String vdef17 = rs.getString(36);
                order.setVdef17(vdef17 == null ? null : vdef17.trim());
                //
                String vdef18 = rs.getString(37);
                order.setVdef18(vdef18 == null ? null : vdef18.trim());
                //
                String vdef19 = rs.getString(38);
                order.setVdef19(vdef19 == null ? null : vdef19.trim());
                //
                String vdef20 = rs.getString(39);
                order.setVdef20(vdef20 == null ? null : vdef20.trim());
                //
                String pk_defdoc1 = rs.getString(40);
                order.setPKDefDoc1(pk_defdoc1 == null ? null : pk_defdoc1.trim());
                //
                String pk_defdoc2 = rs.getString(41);
                order.setPKDefDoc2(pk_defdoc2 == null ? null : pk_defdoc2.trim());
                //
                String pk_defdoc3 = rs.getString(42);
                order.setPKDefDoc3(pk_defdoc3 == null ? null : pk_defdoc3.trim());
                //
                String pk_defdoc4 = rs.getString(43);
                order.setPKDefDoc4(pk_defdoc4 == null ? null : pk_defdoc4.trim());
                //
                String pk_defdoc5 = rs.getString(44);
                order.setPKDefDoc5(pk_defdoc5 == null ? null : pk_defdoc5.trim());
                //
                String pk_defdoc6 = rs.getString(45);
                order.setPKDefDoc6(pk_defdoc6 == null ? null : pk_defdoc6.trim());
                //
                String pk_defdoc7 = rs.getString(46);
                order.setPKDefDoc7(pk_defdoc7 == null ? null : pk_defdoc7.trim());
                //
                String pk_defdoc8 = rs.getString(47);
                order.setPKDefDoc8(pk_defdoc8 == null ? null : pk_defdoc8.trim());
                //
                String pk_defdoc9 = rs.getString(48);
                order.setPKDefDoc9(pk_defdoc9 == null ? null : pk_defdoc9.trim());
                //
                String pk_defdoc10 = rs.getString(49);
                order.setPKDefDoc10(pk_defdoc10 == null ? null : pk_defdoc10.trim());
                //
                String pk_defdoc11 = rs.getString(50);
                order.setPKDefDoc11(pk_defdoc11 == null ? null : pk_defdoc11.trim());
                //
                String pk_defdoc12 = rs.getString(51);
                order.setPKDefDoc12(pk_defdoc12 == null ? null : pk_defdoc12.trim());
                //
                String pk_defdoc13 = rs.getString(52);
                order.setPKDefDoc13(pk_defdoc13 == null ? null : pk_defdoc13.trim());
                //
                String pk_defdoc14 = rs.getString(53);
                order.setPKDefDoc14(pk_defdoc14 == null ? null : pk_defdoc14.trim());
                //
                String pk_defdoc15 = rs.getString(54);
                order.setPKDefDoc15(pk_defdoc15 == null ? null : pk_defdoc15.trim());
                //
                String pk_defdoc16 = rs.getString(55);
                order.setPKDefDoc16(pk_defdoc16 == null ? null : pk_defdoc16.trim());
                //
                String pk_defdoc17 = rs.getString(56);
                order.setPKDefDoc17(pk_defdoc17 == null ? null : pk_defdoc17.trim());
                //
                String pk_defdoc18 = rs.getString(57);
                order.setPKDefDoc18(pk_defdoc18 == null ? null : pk_defdoc18.trim());
                //
                String pk_defdoc19 = rs.getString(58);
                order.setPKDefDoc19(pk_defdoc19 == null ? null : pk_defdoc19.trim());
                //
                String pk_defdoc20 = rs.getString(59);
                order.setPKDefDoc20(pk_defdoc20 == null ? null : pk_defdoc20.trim());
                //
                Integer iprintcount = (Integer) rs.getObject(60);
                order.setIprintcount(iprintcount == null ? null : iprintcount);

                v.addElement(order);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }
        orders = new OrderHeaderVO[v.size()];
        if (v.size() > 0) {
            v.copyInto(orders);
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "queryHeadByVO", new Object[] { condOrderVO, isAnd });
        /*************************************************************/

        return orders;
    }

    /**
     * 订单参照请购单
     * 功能描述:查询表体
     * 输入参数:单位编码
     * 返回值:表体VO集合
     * 异常处理:无
     */
    public NewPraybillItemVO queryOnePrayBody(String bill_bid) throws SQLException {
        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.pr.pray.PraybillDMO", "queryAllBody", new Object[] { bill_bid });
        /*************************************************************/

        String sql = "select cpraybill_bid, cpraybillid, pk_corp, cpurorganization, cmangid, cbaseid, npraynum, cassistunit, nassistnum, nsuggestprice, cvendormangid, cvendorbaseid, ddemanddate, dsuggestdate, cwarehouseid, naccumulatenum, cprojectid, cprojectphaseid, csourcebilltype, csourcebillid, csourcebillrowid, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid, vmemo, vfree1, vfree2, vfree3, vfree4, vfree5, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6 from po_praybill_b where dr = 0 and cpraybill_bid = ? ";

        NewPraybillItemVO praybillB = new NewPraybillItemVO();
        Vector v = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            if (bill_bid != null) {
                stmt.setString(1, bill_bid);
            }
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {

                // cpraybill_bid :
                String cpraybill_bid = rs.getString(1);
                praybillB.setCpraybill_bid(cpraybill_bid == null ? null : cpraybill_bid.trim());
                // cpraybillid :
                String cpraybillid = rs.getString(2);
                praybillB.setCpraybillid(cpraybillid == null ? null : cpraybillid.trim());
                // cunitid :
                String cunitid = rs.getString(3);
                praybillB.setPk_corp(cunitid == null ? null : cunitid.trim());
                // cpurorganization :
                String cpurorganization = rs.getString(4);
                praybillB.setCpurorganization(cpurorganization == null ? null : cpurorganization.trim());
                // cmangid :
                String cmangid = rs.getString(5);
                praybillB.setCmangid(cmangid == null ? null : cmangid.trim());
                // cbaseid :
                String cbaseid = rs.getString(6);
                praybillB.setCbaseid(cbaseid == null ? null : cbaseid.trim());
                // npraynum :
                BigDecimal npraynum = rs.getBigDecimal(7);
                praybillB.setNpraynum(npraynum == null ? new UFDouble(0.0) : new UFDouble(npraynum));
                // cassistunit :
                String cassistunit = rs.getString(8);
                praybillB.setCassistunit(cassistunit == null ? null : cassistunit.trim());
                // nassistnum :
                BigDecimal nassistnum = rs.getBigDecimal(9);
                praybillB.setNassistnum(nassistnum == null ? new UFDouble(0.0) : new UFDouble(nassistnum));
                // nsuggestprice :
                BigDecimal nsuggestprice = rs.getBigDecimal(10);
                praybillB.setNsuggestprice(nsuggestprice == null ? new UFDouble(0.0) : new UFDouble(nsuggestprice));
                // cvendormangid :
                String cvendormangid = rs.getString(11);
                praybillB.setCvendormangid(cvendormangid == null ? null : cvendormangid.trim());
                // cvendorbaseid :
                String cvendorbaseid = rs.getString(12);
                praybillB.setCvendorbaseid(cvendorbaseid == null ? null : cvendorbaseid.trim());
                // ddemanddate :
                String ddemanddate = rs.getString(13);
                praybillB.setDdemanddate(ddemanddate == null ? null : new UFDate(ddemanddate.trim(), false));
                // dsuggestdate :
                String dsuggestdate = rs.getString(14);
                praybillB.setDsuggestdate(dsuggestdate == null ? null : new UFDate(dsuggestdate.trim(), false));
                // cwarehouseid :
                String cwarehouseid = rs.getString(15);
                praybillB.setCwarehouseid(cwarehouseid == null ? null : cwarehouseid.trim());
                // naccumulatenum :
                BigDecimal naccumulatenum = rs.getBigDecimal(16);
                praybillB.setNaccumulatenum(naccumulatenum == null ? new UFDouble(0.0) : new UFDouble(naccumulatenum));
                // cprojectid :
                String cprojectid = rs.getString(17);
                praybillB.setCprojectid(cprojectid == null ? null : cprojectid.trim());
                // cprojectphaseid :
                String cprojectphaseid = rs.getString(18);
                praybillB.setCprojectphaseid(cprojectphaseid == null ? null : cprojectphaseid.trim());
                // csourcebilltype :
                String csourcebilltype = rs.getString(19);
                praybillB.setCsourcebilltype(csourcebilltype == null ? null : csourcebilltype.trim());
                // csourcebillid :
                String csourcebillid = rs.getString(20);
                praybillB.setCsourcebillid(csourcebillid == null ? null : csourcebillid.trim());
                // csourcebillrowid :
                String csourcebillrowid = rs.getString(21);
                praybillB.setCsourcebillrowid(csourcebillrowid == null ? null : csourcebillrowid.trim());
                // cupsourcebilltype :
                String cupsourcebilltype = rs.getString(22);
                praybillB.setCupsourcebilltype(cupsourcebilltype == null ? null : cupsourcebilltype.trim());
                // cupsourcebillid :
                String cupsourcebillid = rs.getString(23);
                praybillB.setCupsourcebillid(cupsourcebillid == null ? null : cupsourcebillid.trim());
                // cupsourcebillrowid :
                String cupsourcebillrowid = rs.getString(24);
                praybillB.setCupsourcebillrowid(cupsourcebillrowid == null ? null : cupsourcebillrowid.trim());
                // vmemo :
                String vmemo = rs.getString(25);
                praybillB.setVmemo(vmemo == null ? null : vmemo.trim());
                // vfree1 :
                String vfree1 = rs.getString(26);
                praybillB.setVfree1(vfree1 == null ? null : vfree1.trim());
                // vfree2 :
                String vfree2 = rs.getString(27);
                praybillB.setVfree2(vfree2 == null ? null : vfree2.trim());
                // vfree3 :
                String vfree3 = rs.getString(28);
                praybillB.setVfree3(vfree3 == null ? null : vfree3.trim());
                // vfree4 :
                String vfree4 = rs.getString(29);
                praybillB.setVfree4(vfree4 == null ? null : vfree4.trim());
                // vfree5 :
                String vfree5 = rs.getString(30);
                praybillB.setVfree5(vfree5 == null ? null : vfree5.trim());
                // vdef1 :
                String vdef1 = rs.getString(31);
                praybillB.setVdef1(vdef1 == null ? null : vdef1.trim());
                // vdef2 :
                String vdef2 = rs.getString(32);
                praybillB.setVdef2(vdef2 == null ? null : vdef2.trim());
                // vdef3 :
                String vdef3 = rs.getString(33);
                praybillB.setVdef3(vdef3 == null ? null : vdef3.trim());
                // vdef4 :
                String vdef4 = rs.getString(34);
                praybillB.setVdef4(vdef4 == null ? null : vdef4.trim());
                // vdef5 :
                String vdef5 = rs.getString(35);
                praybillB.setVdef5(vdef5 == null ? null : vdef5.trim());
                // vdef6 :
                String vdef6 = rs.getString(36);
                praybillB.setVdef6(vdef6 == null ? null : vdef6.trim());

                v.addElement(praybillB);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.pr.pray.PraybillDMO", "queryAllBody", new Object[] { bill_bid });
        /*************************************************************/

        return praybillB;
    }

    /**
     * 将委外订单进行拆分，一个表体对应一个VO
     * 创建日期：(2002-5-8 14:46:02)
     * @return nc.vo.sc.order.OrderVO[]
     * @param vos nc.vo.sc.order.OrderVO[]
     */
    public ArrayList splitForA3(OrderVO[] vos) throws BusinessException {
        ArrayList array = new ArrayList();
        Vector orderVec = new Vector();
        try {
            for (int i = 0; i < vos.length; i++) {
                if (vos[i].getChildrenVO().length == 1)
                    orderVec.addElement(vos[i]);
                else {
                    for (int j = 0; j < vos[i].getChildrenVO().length; j++) {
                        OrderVO tempVO = new OrderVO();
                        tempVO.setParentVO((OrderHeaderVO) vos[i].getParentVO().clone());
                        OrderItemVO[] items = new OrderItemVO[1];
                        items[0] = (OrderItemVO) vos[i].getChildrenVO()[j];
                        tempVO.setChildrenVO(items);
                        orderVec.addElement(tempVO);
                    }
                }
            }
        } catch (Exception e) {
            SCMEnv.out(e);
            throw new BusinessException(e.getMessage());
        }
        for (int i = 0; i < orderVec.size(); i++) {
            array.add(orderVec.get(i));
        }
        return array;
    }

    /**
     * <p>订单弃审
     * <p>
     * 创建日期：(2001-6-23)
     * @param vo nc.vo.sc.order.OrderVO
     * @exception java.sql.SQLException 异常说明。
     */
    public void unAudit(OrderVO vo) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "unAudit", new Object[] { vo });
        /*************************************************************/
        OrderHeaderVO headVO = (OrderHeaderVO) vo.getParentVO();
        String billId = headVO.getCorderid();

        String sql = "update sc_order set  cauditpsn = null ,dauditdate = null , ibillstatus = 0, taudittime = null where corderid = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            // update
            if (billId == null) {
                stmt.setNull(1, Types.CHAR);
            } else {
                stmt.setString(1, billId);
            }
            //
            stmt.executeUpdate();
        }
        //catch (SQLException e) {

        //}
        finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "unAudit", new Object[] { vo });
        /*************************************************************/

    }

    /**
     * <p>使用VO的值更新母子表。
     * <p>
     * 创建日期：(2001-6-23)
     * @param vo nc.vo.sc.order.OrderVO
     * @exception java.sql.SQLException 异常说明。
     */
    public OrderVO update(OrderVO vo) throws SQLException, BusinessException, SystemException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "update", new Object[] { vo });
        /*************************************************************/
        String[] key_b = null;

        OrderItemVO[] items = (OrderItemVO[]) vo.getChildrenVO();

    

        //效率优化 begin yye
        Vector lvec_ItemsNew = new Vector();
        Vector lvec_ItemsUpdated = new Vector();
        Vector lvec_ItemsDeleted = new Vector();

        for (int i = 0; i < items.length; i++) {
          if (items[i].getCorder_bid() == null) {
            lvec_ItemsNew.addElement(items[i]);
            continue;
          }
            switch (items[i].getStatus()) {
            case VOStatus.NEW:
                lvec_ItemsNew.addElement(items[i]);
                break;
            case VOStatus.UPDATED:
                lvec_ItemsUpdated.addElement(items[i]);
                break;
            case VOStatus.DELETED:
                lvec_ItemsDeleted.addElement(items[i]);
            }
        }

        OrderItemVO[] l_ItemsNew = new OrderItemVO[lvec_ItemsNew.size()];
        OrderItemVO[] l_ItemsUpdated = new OrderItemVO[lvec_ItemsUpdated.size()];
        OrderItemVO[] l_ItemsDeleted = new OrderItemVO[lvec_ItemsDeleted.size()];

        lvec_ItemsNew.copyInto(l_ItemsNew);
        lvec_ItemsUpdated.copyInto(l_ItemsUpdated);
        lvec_ItemsDeleted.copyInto(l_ItemsDeleted);

        if (l_ItemsNew.length > 0) {
            key_b = insertItems(l_ItemsNew);
        }

        if (l_ItemsUpdated.length > 0) {
            updateItems(l_ItemsUpdated);
        }

        if (l_ItemsDeleted.length > 0) {
            deleteItems(l_ItemsDeleted);
        }

        //效率优化 end
        
        //gc
        OrderDdlbVO[] ddlbs = (OrderDdlbVO[]) vo.getDdlbvos();

        lvec_ItemsNew = new Vector();
        lvec_ItemsUpdated = new Vector();
        lvec_ItemsDeleted = new Vector();

        if(ddlbs != null){
	        for (int i = 0; i < ddlbs.length; i++) {
	          if (ddlbs[i].getCorder_lb_id() == null) {
	        	  if(vo.getParentVO()!= null)
	        		  ddlbs[i].setCorderid(vo.getParentVO().getPrimaryKey());
	            lvec_ItemsNew.addElement(ddlbs[i]);
	            continue;
	          }
	            switch (ddlbs[i].getStatus()) {
	            case VOStatus.NEW:
	                lvec_ItemsNew.addElement(ddlbs[i]);
	                break;
	            case VOStatus.UPDATED:
	                lvec_ItemsUpdated.addElement(ddlbs[i]);
	                break;
	            case VOStatus.DELETED:
	                lvec_ItemsDeleted.addElement(ddlbs[i]);
	            }
	        }
	
	        OrderDdlbVO[] lb_ItemsNew = new OrderDdlbVO[lvec_ItemsNew.size()];
	        OrderDdlbVO[] lb_ItemsUpdated = new OrderDdlbVO[lvec_ItemsUpdated.size()];
	        OrderDdlbVO[] lb_ItemsDeleted = new OrderDdlbVO[lvec_ItemsDeleted.size()];
	
	        lvec_ItemsNew.copyInto(lb_ItemsNew);
	        lvec_ItemsUpdated.copyInto(lb_ItemsUpdated);
	        lvec_ItemsDeleted.copyInto(lb_ItemsDeleted);
	
	        BaseDAO basedao = new BaseDAO();
	        if (lb_ItemsNew.length > 0) {
	            basedao.insertVOArray(lb_ItemsNew);
	        }
	
	        if (lb_ItemsUpdated.length > 0) {
	            basedao.updateVOArray(lb_ItemsUpdated);
	        }
	
	        if (lb_ItemsDeleted.length > 0) {
	        	basedao.deleteVOArray(lb_ItemsDeleted);
	        }
        }
        //gc-end

        updateHeader((OrderHeaderVO) vo.getParentVO());

        //刷新数据
        String key = ((OrderHeaderVO) vo.getParentVO()).getCorderid();
        if (key != null && key.trim().length() > 0) {
            OrderVO returnVO = findByPrimaryKey(key);
            return returnVO;
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "update", new Object[] { vo });
        /*************************************************************/

        return null;
    }

    /**
     * 用一个VO对象的属性更新数据库中的值。
     *
     * 创建日期：(2001-6-20)
     * @param orderBb nc.vo.sc.order.OrderBbVO
     * @exception java.sql.SQLException 异常说明。
     */
    public void updateMaterialItem(OrderBbVO orderBb) throws java.sql.SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderBbDMO", "updateMaterialItems", new Object[] { orderBb });
        /*************************************************************/

        String sql = "update sc_order_bb set corderid = ?, corder_bid = ?, pk_corp = ?, cmangid = ?, cbaseid = ?, nmaterialnum = ?, cassistunit = ?, nassistnum = ?, nprice = ?, nmoney = ?, ddeliverydate = ?, ntotalnum = ?, cdeliverywarehouse = ?, vdeliveryaddress = ?, vmemo = ?, vfree1 = ?, vfree2 = ?, vfree3 = ?, vfree4 = ?, vfree5 = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ? where corder_bbid = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            // update non PK fields:
            if (orderBb.getCorderid() == null) {
                stmt.setNull(1, Types.CHAR);
            } else {
                stmt.setString(1, orderBb.getCorderid());
            }
            if (orderBb.getCorder_bid() == null) {
                stmt.setNull(2, Types.CHAR);
            } else {
                stmt.setString(2, orderBb.getCorder_bid());
            }
            if (orderBb.getPk_corp() == null) {
                stmt.setNull(3, Types.CHAR);
            } else {
                stmt.setString(3, orderBb.getPk_corp());
            }
            if (orderBb.getCmangid() == null) {
                stmt.setNull(4, Types.CHAR);
            } else {
                stmt.setString(4, orderBb.getCmangid());
            }
            if (orderBb.getCbaseid() == null) {
                stmt.setNull(5, Types.CHAR);
            } else {
                stmt.setString(5, orderBb.getCbaseid());
            }
            if (orderBb.getNmaterialnum() == null) {
                stmt.setNull(6, Types.INTEGER);
            } else {
                stmt.setBigDecimal(6, orderBb.getNmaterialnum().toBigDecimal());
            }
            if (orderBb.getCassistunit() == null) {
                stmt.setNull(7, Types.CHAR);
            } else {
                stmt.setString(7, orderBb.getCassistunit());
            }
            if (orderBb.getNassistnum() == null) {
                stmt.setNull(8, Types.INTEGER);
            } else {
                stmt.setBigDecimal(8, orderBb.getNassistnum().toBigDecimal());
            }
            if (orderBb.getNprice() == null) {
                stmt.setNull(9, Types.INTEGER);
            } else {
                stmt.setBigDecimal(9, orderBb.getNprice().toBigDecimal());
            }
            if (orderBb.getNmoney() == null) {
                stmt.setNull(10, Types.INTEGER);
            } else {
                stmt.setBigDecimal(10, orderBb.getNmoney().toBigDecimal());
            }
            if (orderBb.getDdeliverydate() == null) {
                stmt.setNull(11, Types.CHAR);
            } else {
                stmt.setString(11, orderBb.getDdeliverydate().toString());
            }
            if (orderBb.getNtotalnum() == null) {
                stmt.setNull(12, Types.INTEGER);
            } else {
                stmt.setBigDecimal(12, orderBb.getNtotalnum().toBigDecimal());
            }
            if (orderBb.getCdeliverywarehouse() == null) {
                stmt.setNull(13, Types.CHAR);
            } else {
                stmt.setString(13, orderBb.getCdeliverywarehouse());
            }
            if (orderBb.getVdeliveryaddress() == null) {
                stmt.setNull(14, Types.CHAR);
            } else {
                stmt.setString(14, orderBb.getVdeliveryaddress());
            }
            if (orderBb.getVmemo() == null) {
                stmt.setNull(15, Types.CHAR);
            } else {
                stmt.setString(15, orderBb.getVmemo());
            }
            if (orderBb.getVfree1() == null) {
                stmt.setNull(16, Types.CHAR);
            } else {
                stmt.setString(16, orderBb.getVfree1());
            }
            if (orderBb.getVfree2() == null) {
                stmt.setNull(17, Types.CHAR);
            } else {
                stmt.setString(17, orderBb.getVfree2());
            }
            if (orderBb.getVfree3() == null) {
                stmt.setNull(18, Types.CHAR);
            } else {
                stmt.setString(18, orderBb.getVfree3());
            }
            if (orderBb.getVfree4() == null) {
                stmt.setNull(19, Types.CHAR);
            } else {
                stmt.setString(19, orderBb.getVfree4());
            }
            if (orderBb.getVfree5() == null) {
                stmt.setNull(20, Types.CHAR);
            } else {
                stmt.setString(20, orderBb.getVfree5());
            }
            if (orderBb.getVdef1() == null) {
                stmt.setNull(21, Types.CHAR);
            } else {
                stmt.setString(21, orderBb.getVdef1());
            }
            if (orderBb.getVdef2() == null) {
                stmt.setNull(22, Types.CHAR);
            } else {
                stmt.setString(22, orderBb.getVdef2());
            }
            if (orderBb.getVdef3() == null) {
                stmt.setNull(23, Types.CHAR);
            } else {
                stmt.setString(23, orderBb.getVdef3());
            }
            if (orderBb.getVdef4() == null) {
                stmt.setNull(24, Types.CHAR);
            } else {
                stmt.setString(24, orderBb.getVdef4());
            }
            if (orderBb.getVdef5() == null) {
                stmt.setNull(25, Types.CHAR);
            } else {
                stmt.setString(25, orderBb.getVdef5());
            }
            if (orderBb.getVdef6() == null) {
                stmt.setNull(26, Types.CHAR);
            } else {
                stmt.setString(26, orderBb.getVdef6());
            }
            // find record by PK fields:
            stmt.setString(27, orderBb.getPrimaryKey());
            //
            stmt.executeUpdate();
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderBbDMO", "updateMaterialItems", new Object[] { orderBb });
        /*************************************************************/
    }

    /**
     * 根据主键在数据库中删除一个VO对象。
     *
     * 创建日期：(2001-6-23)
     * @param key nc.vo.pub.oid.OID
     * @exception java.sql.SQLException 异常说明。
     */
    public void deleteItems(OrderItemVO[] vos) throws java.sql.SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "deleteItem", new Object[] { vos });
        /*************************************************************/

        //String sql = "delete from sc_order_b where corder_bid = ?";
        String sql = "update sc_order_b set dr=1 where corder_bid = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            for (int i = 0; i < vos.length; i++) {
                stmt.setString(1, vos[i].getPrimaryKey());
                stmt.executeUpdate();
            }
            executeBatch(stmt);

        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "deleteItem", new Object[] { vos });
        /*************************************************************/
    }

    /**
     * 单据函数（审批流使用）
     *
     * 创建日期：(2001-6-23)
     * @return nc.vo.sc.order.OrderHeaderVO
     * @param key String
     * @exception java.sql.SQLException 异常说明。
     */
    public UFDouble getScOrderSumMny(OrderVO order) throws SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "getScOrderSumMny", new Object[] { order });
        /*************************************************************/
        String corderid = ((OrderHeaderVO) order.getParentVO()).getCorderid();
        if (corderid == null || corderid.trim().equals(""))
            return null;

        String sql = "select nsummny from sc_order_b where corderid = ?  ";

        Vector vec = new Vector();
        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            stmt.setString(1, corderid);

            ResultSet rs = stmt.executeQuery();
            //
            if (rs.next()) {
                // nsummny :
                BigDecimal mainmeasrate = rs.getBigDecimal(1);
                vec.addElement(mainmeasrate);
            }
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        if (vec == null || vec.size() == 0)
            return null;
        UFDouble returnSummny = new UFDouble();
        for (int i = 0; i < vec.size(); i++) {
            UFDouble curMny = vec.elementAt(i) == null ? new UFDouble(0) : new UFDouble(vec.elementAt(i).toString());
            returnSummny = returnSummny.add(curMny);
        }
        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "getScOrderSumMny", new Object[] { order });
        /*************************************************************/

        return new UFDouble(returnSummny.toDouble());
    }

    /**
     * 向数据库插入一个VO对象。
     *
     * 创建日期：(2001-6-23)
     * @param node nc.vo.sc.order.OrderItemVO
     * @exception java.sql.SQLException 异常说明。
     */
    public String[] insertItems(OrderItemVO[] orderItems) throws java.sql.SQLException, nc.bs.pub.SystemException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "insertItems", new Object[] { orderItems });
        /*************************************************************/

        String sql = "insert into sc_order_b(corder_bid, corderid, pk_corp, cmangid, cbaseid, nordernum, cassistunit, nassistnum, ndiscountrate, idiscounttaxtype, ntaxrate, ccurrencytypeid, noriginalnetprice, noriginalcurprice, noriginalcurmny, noriginaltaxmny, noriginalsummny, nexchangeotobrate, ntaxmny, nmoney, nsummny, naccumarrvnum, naccumstorenum, naccuminvoicenum, naccumwastnum, dplanarrvdate, cwarehouseid, creceiveaddress, cprojectid, cprojectphaseid, coperator, forderrowstatus, bisactive, cordersource, csourcebillid, csourcebillrow, cupsourcebilltype, cupsourcebillid, cupsourcebillrowid, vmemo, vfree1, vfree2, vfree3, vfree4, vfree5, vdef1, vdef2, vdef3, vdef4, vdef5, vdef6, vdef7, vdef8, vdef9, vdef10, vdef11, vdef12, vdef13, vdef14, vdef15, vdef16, vdef17, vdef18, vdef19, vdef20, pk_defdoc1, pk_defdoc2, pk_defdoc3, pk_defdoc4, pk_defdoc5, pk_defdoc6, pk_defdoc7, pk_defdoc8, pk_defdoc9, pk_defdoc10, pk_defdoc11, pk_defdoc12, pk_defdoc13, pk_defdoc14, pk_defdoc15, pk_defdoc16, pk_defdoc17, pk_defdoc18, pk_defdoc19, pk_defdoc20, crowno, norgtaxprice, norgnettaxprice, vproducenum,ccontractid,ccontractrowid,ccontractrcode,vpriceauditcode,cpriceauditid,cpriceaudit_bid,cpriceaudit_bb1id,csourcebillcode,csourcebillrowno ) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? , ?, ?, ? , ?, ?, ?, ? , ?, ?, ?, ? )";

        String[] key = this.getOIDs(orderItems[0].getPk_corp(), orderItems.length);
        Connection con = null;
        PreparedStatement stmt = null;
        //String pk_corp = orderItem.getPk_corp();
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            for (int i = 0; i < orderItems.length; i++) {
                // set PK fields:
                //czp:V5可用量统一调整
                orderItems[i].setPrimaryKey(key[i]);
                //
                stmt.setString(1, key[i]);
                // set non PK fields:
                if (orderItems[i].getCorderid() == null) {
                    stmt.setNull(2, Types.CHAR);
                } else {
                    stmt.setString(2, orderItems[i].getCorderid());
                }
                if (orderItems[i].getPk_corp() == null) {
                    stmt.setNull(3, Types.CHAR);
                } else {
                    stmt.setString(3, orderItems[i].getPk_corp());
                }
                if (orderItems[i].getCmangid() == null) {
                    stmt.setNull(4, Types.CHAR);
                } else {
                    stmt.setString(4, orderItems[i].getCmangid());
                }
                if (orderItems[i].getCbaseid() == null) {
                    stmt.setNull(5, Types.CHAR);
                } else {
                    stmt.setString(5, orderItems[i].getCbaseid());
                }
                if (orderItems[i].getNordernum() == null) {
                    //stmt.setNull(6, Types.INTEGER);
                    stmt.setBigDecimal(6, new UFDouble(0).toBigDecimal());
                } else {
                    stmt.setBigDecimal(6, orderItems[i].getNordernum().toBigDecimal());
                }
                if (orderItems[i].getCassistunit() == null) {
                    stmt.setNull(7, Types.CHAR);
                } else {
                    stmt.setString(7, orderItems[i].getCassistunit());
                }
                if (orderItems[i].getNassistnum() == null) {
                    stmt.setNull(8, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(8, orderItems[i].getNassistnum().toBigDecimal());
                }
                if (orderItems[i].getNdiscountrate() == null) {
                    stmt.setNull(9, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(9, orderItems[i].getNdiscountrate().toBigDecimal());
                }
                if (orderItems[i].getIdiscounttaxtype() == null) {
                    stmt.setNull(10, Types.INTEGER);
                } else {
                    stmt.setInt(10, orderItems[i].getIdiscounttaxtype().intValue());
                }
                if (orderItems[i].getNtaxrate() == null) {
                    stmt.setNull(11, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(11, orderItems[i].getNtaxrate().toBigDecimal());
                }
                if (orderItems[i].getCcurrencytypeid() == null) {
                    stmt.setNull(12, Types.CHAR);
                } else {
                    stmt.setString(12, orderItems[i].getCcurrencytypeid());
                }
                if (orderItems[i].getNoriginalnetprice() == null) {
                    stmt.setNull(13, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(13, orderItems[i].getNoriginalnetprice().toBigDecimal());
                }
                if (orderItems[i].getNoriginalcurprice() == null) {
                    stmt.setNull(14, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(14, orderItems[i].getNoriginalcurprice().toBigDecimal());
                }
                if (orderItems[i].getNoriginalcurmny() == null) {
                    stmt.setNull(15, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(15, orderItems[i].getNoriginalcurmny().toBigDecimal());
                }
                if (orderItems[i].getNoriginaltaxmny() == null) {
                    stmt.setNull(16, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(16, orderItems[i].getNoriginaltaxmny().toBigDecimal());
                }
                if (orderItems[i].getNoriginalsummny() == null) {
                    stmt.setNull(17, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(17, orderItems[i].getNoriginalsummny().toBigDecimal());
                }
                if (orderItems[i].getNexchangeotobrate() == null) {
                    stmt.setNull(18, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(18, orderItems[i].getNexchangeotobrate().toBigDecimal());
                }
                if (orderItems[i].getNtaxmny() == null) {
                    stmt.setNull(19, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(19, orderItems[i].getNtaxmny().toBigDecimal());
                }
                if (orderItems[i].getNmoney() == null) {
                    //stmt.setNull(20, Types.INTEGER);
                    stmt.setBigDecimal(20, new UFDouble(0).toBigDecimal());
                } else {
                    stmt.setBigDecimal(20, orderItems[i].getNmoney().toBigDecimal());
                }
                if (orderItems[i].getNsummny() == null) {
                    stmt.setNull(21, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(21, orderItems[i].getNsummny().toBigDecimal());
                }
                if (orderItems[i].getNaccumarrvnum() == null) {
                    stmt.setNull(22, Types.INTEGER);
//                    stmt.setBigDecimal(26, new UFDouble(0).toBigDecimal());
                } else {
                    stmt.setBigDecimal(22, orderItems[i].getNaccumarrvnum().toBigDecimal());
                }
                if (orderItems[i].getNaccumstorenum() == null) {
//                    stmt.setNull(27, Types.INTEGER);
                    stmt.setBigDecimal(23, new UFDouble(0).toBigDecimal());
                } else {
                    stmt.setBigDecimal(23, orderItems[i].getNaccumstorenum().toBigDecimal());
                }
                if (orderItems[i].getNaccuminvoicenum() == null) {
                    stmt.setNull(24, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(24, orderItems[i].getNaccuminvoicenum().toBigDecimal());
                }
                if (orderItems[i].getNaccumwastnum() == null) {
                    stmt.setNull(25, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(25, orderItems[i].getNaccumwastnum().toBigDecimal());
                }
                if (orderItems[i].getDplanarrvdate() == null) {
                    stmt.setNull(26, Types.CHAR);
                } else {
                    stmt.setString(26, orderItems[i].getDplanarrvdate().toString());
                }
                if (orderItems[i].getCwarehouseid() == null) {
                    stmt.setNull(27, Types.CHAR);
                } else {
                    stmt.setString(27, orderItems[i].getCwarehouseid());
                }
                if (orderItems[i].getCreceiveaddress() == null) {
                    stmt.setNull(28, Types.CHAR);
                } else {
                    stmt.setString(28, orderItems[i].getCreceiveaddress());
                }
                if (orderItems[i].getCprojectid() == null) {
                    stmt.setNull(29, Types.CHAR);
                } else {
                    stmt.setString(29, orderItems[i].getCprojectid());
                }
                if (orderItems[i].getCprojectphaseid() == null) {
                    stmt.setNull(30, Types.CHAR);
                } else {
                    stmt.setString(30, orderItems[i].getCprojectphaseid());
                }
                if (orderItems[i].getCoperator() == null) {
                    stmt.setNull(31, Types.CHAR);
                } else {
                    stmt.setString(31, orderItems[i].getCoperator());
                }
                if (orderItems[i].getForderrowstatus() == null) {
                    //stmt.setNull(36, Types.INTEGER);
                    stmt.setInt(32, 0);
                } else {
                    stmt.setInt(32, orderItems[i].getForderrowstatus().intValue());
                }
                if (orderItems[i].getBisactive() == null) {
                    stmt.setString(33, "0");
                } else {
                    stmt.setString(33, orderItems[i].getBisactive().booleanValue() ? "0" : "1");
                }
                //保证委外加工入库单、发票、到货单的最上层单据来源为委外订单，需要委外订单的来源单据类型为委外订单
                //stmt.setString(38, "61");
                //stmt.setString(39, orderItem.getCorderid());
                //stmt.setString(40, key);
                if (orderItems[i].getCordersource() == null) {
                    stmt.setNull(34, Types.CHAR);

                } else {
                    stmt.setString(34, orderItems[i].getCordersource());
                }
                if (orderItems[i].getCsourcebillid() == null) {
                    stmt.setNull(35, Types.CHAR);
                } else {
                    stmt.setString(35, orderItems[i].getCsourcebillid());
                }
                if (orderItems[i].getCsourcebillrow() == null) {
                    stmt.setNull(36, Types.CHAR);
                } else {
                    stmt.setString(36, orderItems[i].getCsourcebillrow());
                }
                //上层单据来源
                if (orderItems[i].getCupsourcebilltype() == null) {
                    stmt.setNull(37, Types.CHAR);
                } else {
                    stmt.setString(37, orderItems[i].getCupsourcebilltype());
                }
                if (orderItems[i].getCupsourcebillid() == null) {
                    stmt.setNull(38, Types.CHAR);
                } else {
                    stmt.setString(38, orderItems[i].getCupsourcebillid());
                }
                if (orderItems[i].getCupsourcebillrowid() == null) {
                    stmt.setNull(39, Types.CHAR);
                } else {
                    stmt.setString(39, orderItems[i].getCupsourcebillrowid());
                }
                //
                if (orderItems[i].getVmemo() == null) {
                    stmt.setNull(40, Types.CHAR);
                } else {
                    stmt.setString(40, orderItems[i].getVmemo());
                }
                if (orderItems[i].getVfree1() == null) {
                    stmt.setNull(41, Types.CHAR);
                } else {
                    stmt.setString(41, orderItems[i].getVfree1());
                }
                if (orderItems[i].getVfree2() == null) {
                    stmt.setNull(42, Types.CHAR);
                } else {
                    stmt.setString(42, orderItems[i].getVfree2());
                }
                if (orderItems[i].getVfree3() == null) {
                    stmt.setNull(43, Types.CHAR);
                } else {
                    stmt.setString(43, orderItems[i].getVfree3());
                }
                if (orderItems[i].getVfree4() == null) {
                    stmt.setNull(44, Types.CHAR);
                } else {
                    stmt.setString(44, orderItems[i].getVfree4());
                }
                if (orderItems[i].getVfree5() == null) {
                    stmt.setNull(45, Types.CHAR);
                } else {
                    stmt.setString(45, orderItems[i].getVfree5());
                }
                if (orderItems[i].getVdef1() == null) {
                    stmt.setNull(46, Types.CHAR);
                } else {
                    stmt.setString(46, orderItems[i].getVdef1());
                }
                if (orderItems[i].getVdef2() == null) {
                    stmt.setNull(47, Types.CHAR);
                } else {
                    stmt.setString(47, orderItems[i].getVdef2());
                }
                if (orderItems[i].getVdef3() == null) {
                    stmt.setNull(48, Types.CHAR);
                } else {
                    stmt.setString(48, orderItems[i].getVdef3());
                }
                if (orderItems[i].getVdef4() == null) {
                    stmt.setNull(49, Types.CHAR);
                } else {
                    stmt.setString(49, orderItems[i].getVdef4());
                }
                if (orderItems[i].getVdef5() == null) {
                    stmt.setNull(50, Types.CHAR);
                } else {
                    stmt.setString(50, orderItems[i].getVdef5());
                }
                if (orderItems[i].getVdef6() == null) {
                    stmt.setNull(51, Types.CHAR);
                } else {
                    stmt.setString(51, orderItems[i].getVdef6());
                }
                if (orderItems[i].getVdef7() == null) {
                    stmt.setNull(52, Types.CHAR);
                } else {
                    stmt.setString(52, orderItems[i].getVdef7());
                }
                if (orderItems[i].getVdef8() == null) {
                    stmt.setNull(53, Types.CHAR);
                } else {
                    stmt.setString(53, orderItems[i].getVdef8());
                }
                if (orderItems[i].getVdef9() == null) {
                    stmt.setNull(54, Types.CHAR);
                } else {
                    stmt.setString(54, orderItems[i].getVdef9());
                }
                if (orderItems[i].getVdef10() == null) {
                    stmt.setNull(55, Types.CHAR);
                } else {
                    stmt.setString(55, orderItems[i].getVdef10());
                }

                if (orderItems[i].getVdef11() == null) {
                    stmt.setNull(56, Types.CHAR);
                } else {
                    stmt.setString(56, orderItems[i].getVdef11());
                }
                if (orderItems[i].getVdef12() == null) {
                    stmt.setNull(57, Types.CHAR);
                } else {
                    stmt.setString(57, orderItems[i].getVdef12());
                }
                if (orderItems[i].getVdef13() == null) {
                    stmt.setNull(58, Types.CHAR);
                } else {
                    stmt.setString(58, orderItems[i].getVdef13());
                }
                if (orderItems[i].getVdef14() == null) {
                    stmt.setNull(59, Types.CHAR);
                } else {
                    stmt.setString(59, orderItems[i].getVdef14());
                }
                if (orderItems[i].getVdef15() == null) {
                    stmt.setNull(60, Types.CHAR);
                } else {
                    stmt.setString(60, orderItems[i].getVdef15());
                }
                if (orderItems[i].getVdef16() == null) {
                    stmt.setNull(61, Types.CHAR);
                } else {
                    stmt.setString(61, orderItems[i].getVdef16());
                }
                if (orderItems[i].getVdef17() == null) {
                    stmt.setNull(62, Types.CHAR);
                } else {
                    stmt.setString(62, orderItems[i].getVdef17());
                }
                if (orderItems[i].getVdef18() == null) {
                    stmt.setNull(63, Types.CHAR);
                } else {
                    stmt.setString(63, orderItems[i].getVdef18());
                }
                if (orderItems[i].getVdef19() == null) {
                    stmt.setNull(64, Types.CHAR);
                } else {
                    stmt.setString(64, orderItems[i].getVdef19());
                }
                if (orderItems[i].getVdef20() == null) {
                    stmt.setNull(65, Types.CHAR);
                } else {
                    stmt.setString(65, orderItems[i].getVdef20());
                }
                if (orderItems[i].getPKDefDoc1() == null) {
                    stmt.setNull(66, Types.CHAR);
                } else {
                    stmt.setString(66, orderItems[i].getPKDefDoc1());
                }
                if (orderItems[i].getPKDefDoc2() == null) {
                    stmt.setNull(67, Types.CHAR);
                } else {
                    stmt.setString(67, orderItems[i].getPKDefDoc2());
                }
                if (orderItems[i].getPKDefDoc3() == null) {
                    stmt.setNull(68, Types.CHAR);
                } else {
                    stmt.setString(68, orderItems[i].getPKDefDoc3());
                }
                if (orderItems[i].getPKDefDoc4() == null) {
                    stmt.setNull(69, Types.CHAR);
                } else {
                    stmt.setString(69, orderItems[i].getPKDefDoc4());
                }
                if (orderItems[i].getPKDefDoc5() == null) {
                    stmt.setNull(70, Types.CHAR);
                } else {
                    stmt.setString(70, orderItems[i].getPKDefDoc5());
                }
                if (orderItems[i].getPKDefDoc6() == null) {
                    stmt.setNull(71, Types.CHAR);
                } else {
                    stmt.setString(71, orderItems[i].getPKDefDoc6());
                }
                if (orderItems[i].getPKDefDoc7() == null) {
                    stmt.setNull(72, Types.CHAR);
                } else {
                    stmt.setString(72, orderItems[i].getPKDefDoc7());
                }
                if (orderItems[i].getPKDefDoc8() == null) {
                    stmt.setNull(73, Types.CHAR);
                } else {
                    stmt.setString(73, orderItems[i].getPKDefDoc8());
                }
                if (orderItems[i].getPKDefDoc9() == null) {
                    stmt.setNull(74, Types.CHAR);
                } else {
                    stmt.setString(74, orderItems[i].getPKDefDoc9());
                }
                if (orderItems[i].getPKDefDoc10() == null) {
                    stmt.setNull(75, Types.CHAR);
                } else {
                    stmt.setString(75, orderItems[i].getPKDefDoc10());
                }
                if (orderItems[i].getPKDefDoc11() == null) {
                    stmt.setNull(76, Types.CHAR);
                } else {
                    stmt.setString(76, orderItems[i].getPKDefDoc11());
                }
                if (orderItems[i].getPKDefDoc12() == null) {
                    stmt.setNull(77, Types.CHAR);
                } else {
                    stmt.setString(77, orderItems[i].getPKDefDoc12());
                }
                if (orderItems[i].getPKDefDoc13() == null) {
                    stmt.setNull(78, Types.CHAR);
                } else {
                    stmt.setString(78, orderItems[i].getPKDefDoc13());
                }
                if (orderItems[i].getPKDefDoc14() == null) {
                    stmt.setNull(79, Types.CHAR);
                } else {
                    stmt.setString(79, orderItems[i].getPKDefDoc14());
                }
                if (orderItems[i].getPKDefDoc15() == null) {
                    stmt.setNull(80, Types.CHAR);
                } else {
                    stmt.setString(80, orderItems[i].getPKDefDoc15());
                }
                if (orderItems[i].getPKDefDoc16() == null) {
                    stmt.setNull(81, Types.CHAR);
                } else {
                    stmt.setString(81, orderItems[i].getPKDefDoc16());
                }
                if (orderItems[i].getPKDefDoc17() == null) {
                    stmt.setNull(82, Types.CHAR);
                } else {
                    stmt.setString(82, orderItems[i].getPKDefDoc17());
                }
                if (orderItems[i].getPKDefDoc18() == null) {
                    stmt.setNull(83, Types.CHAR);
                } else {
                    stmt.setString(83, orderItems[i].getPKDefDoc18());
                }
                if (orderItems[i].getPKDefDoc19() == null) {
                    stmt.setNull(84, Types.CHAR);
                } else {
                    stmt.setString(84, orderItems[i].getPKDefDoc19());
                }
                if (orderItems[i].getPKDefDoc20() == null) {
                    stmt.setNull(85, Types.CHAR);
                } else {
                    stmt.setString(85, orderItems[i].getPKDefDoc20());
                }
                if (orderItems[i].getCrowno() == null) {
                    stmt.setNull(86, Types.CHAR);
                } else {
                    stmt.setString(86, orderItems[i].getCrowno());
                }
                if (orderItems[i].getNorgtaxprice() == null) {
                    stmt.setNull(87, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(87, orderItems[i].getNorgtaxprice().toBigDecimal());
                }
                if (orderItems[i].getNorgnettaxprice() == null) {
                    stmt.setNull(88, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(88, orderItems[i].getNorgnettaxprice().toBigDecimal());
                }
                //
                if (orderItems[i].getVproducenum() == null) {
                    stmt.setNull(89, Types.CHAR);
                } else {
                    stmt.setString(89, orderItems[i].getVproducenum());
                }
                //
                //
                if (orderItems[i].getCcontractid() == null) {
                    stmt.setNull(90, Types.CHAR);
                } else {
                    stmt.setString(90, orderItems[i].getCcontractid());
                }

                if (orderItems[i].getCcontractrowid() == null) {
                    stmt.setNull(91, Types.CHAR);
                } else {
                    stmt.setString(91, orderItems[i].getCcontractrowid());
                }

                if (orderItems[i].getCcontractrcode() == null) {
                    stmt.setNull(92, Types.CHAR);
                } else {
                    stmt.setString(92, orderItems[i].getCcontractrcode());
                }
                
                if (orderItems[i].getVpriceauditcode() == null) {
                    stmt.setNull(93, Types.CHAR);
                } else {
                    stmt.setString(93, orderItems[i].getVpriceauditcode());
                }
                
                if (orderItems[i].getCpriceauditid() == null) {
                    stmt.setNull(94, Types.CHAR);
                } else {
                    stmt.setString(94, orderItems[i].getCpriceauditid());
                }
                
                if (orderItems[i].getCpriceaudit_bid() == null) {
                    stmt.setNull(95, Types.CHAR);
                } else {
                    stmt.setString(95, orderItems[i].getCpriceaudit_bid());
                }
                
                if (orderItems[i].getCpriceaudit_bb1id() == null) {
                    stmt.setNull(96, Types.CHAR);
                } else {
                    stmt.setString(96, orderItems[i].getCpriceaudit_bb1id());
                }
                
                if (orderItems[i].getCsourcebillcode() == null) {
                  stmt.setNull(97, Types.CHAR);
                }
                else {
                  stmt.setString(97, orderItems[i].getCsourcebillcode());
                }
                
                if (orderItems[i].getCsourcebillrowno() == null) {
                  stmt.setNull(98, Types.CHAR);
                }
                else {
                  stmt.setString(98, orderItems[i].getCsourcebillrowno());
                }
                //

                stmt.executeUpdate();
            }
            executeBatch(stmt);
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "insertItem", new Object[] { orderItems });
        /*************************************************************/

        return key;
    }
    public ArrayList splitForA3AuditFlow(nc.vo.pub.AggregatedValueObject[] vos) throws SQLException {
      if (vos[0] instanceof OrderVO) {
        OrderVO[] a = new OrderVO[vos.length];
        for (int i = 0; i < vos.length; i++) {
          a[i] = (OrderVO) vos[i];
        }
        return splitForA3AuditFlow(a);
      }else{
        return null;
      }
    }

    /**
     * 将委外订单进行拆分，一个表体对应一个VO
     * 创建日期：(2002-5-8 14:46:02)
     * @return nc.vo.sc.order.OrderVO[]
     * @param vos nc.vo.sc.order.OrderVO[]
     */
    public ArrayList splitForA3AuditFlow(OrderVO[] vos) throws SQLException {
        ArrayList<OrderVO> orderVec = new ArrayList<OrderVO>();
        Connection con = null;
        PreparedStatement stmt = null;

        try {
            //得到当前的单据状态（刷新）
            if (vos == null || vos.length == 0) {
                return orderVec;
            }
            
            ICreateCorpQueryService srv = (ICreateCorpQueryService) NCLocator
                    .getInstance().lookup(ICreateCorpQueryService.class.getName());
            if (!srv.isEnabled(vos[0].getPk_corp(), "MM"))
              return orderVec;

            ArrayList<String> vTemp = new ArrayList<String>();
            for (int i = 0; i < vos.length; i++) {
                String ls_tempid = ((OrderHeaderVO) vos[i].getParentVO()).getCorderid();
                vTemp.add(ls_tempid);
            }

            //modify by yye begin 解决“IN (‘ID1’，‘ID2’，......)”的用法 ， 在ID*数据量超过1000时在ORACLE上必出现SQL异常!

            String[] sTemp = new String[vTemp.size()];
            sTemp = vTemp.toArray(sTemp);
            //临时表
            nc.bs.scm.pub.TempTableDMO dmoTempTbl = new nc.bs.scm.pub.TempTableDMO();
            String strSetId = dmoTempTbl.insertTempTable(sTemp, nc.vo.scm.pub.TempTableVO.TEMPTABLE_SC_00, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_SC);

            //modify by yye end
            java.util.Map<String, Integer> lh_status = new HashMap<String, Integer>();
            String sql = "select corderid, ibillstatus  from sc_order where corderid  in ";
            sql = sql + strSetId;

            con = getConnection();
            stmt = con.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            //
            while (rs.next()) {
                //corderid :
                String corderid = rs.getString("corderid");
                corderid = (corderid == null ? null : corderid.trim());
                // ibillstatus :
                Integer ibillstatus = (Integer) rs.getObject("ibillstatus");
                ibillstatus = (ibillstatus == null ? null : ibillstatus);

                //
                lh_status.put(corderid, ibillstatus);
            }

            //
            for (int i = 0; i < vos.length; i++) {

                Object lobj_temp = lh_status.get(((OrderHeaderVO) vos[i].getParentVO()).getCorderid());

                if (((Integer) lobj_temp).intValue() == 3) {//只有审批通过的单据才能生成备料计划
                  OrderItemVO[] bodies = (OrderItemVO[])vos[i].getChildrenVO();
                  
                  // 查询出劳务类存货
                  ArrayList<String> cbaseids = new ArrayList<String>();
                  for (OrderItemVO body : bodies)
                    cbaseids.add(body.getCbaseid());
                  
                  rs.close();
                  stmt.close();
                  sql = "select pk_invbasdoc from bd_invbasdoc where laborflag = 'Y' " + SQLUtil.formInSQL("pk_invbasdoc", cbaseids);
                  stmt = con.prepareStatement(sql);
                  rs = stmt.executeQuery();
                  java.util.Set<String> labors = new java.util.HashSet<String>();
                  while (rs.next())
                    labors.add(rs.getString(1));
                  
                    if (bodies.length == 1) {
                      // 过滤掉劳务类存货
                      if (!labors.contains(bodies[0].getCbaseid()))
                        orderVec.add(vos[i]);
                    }
                    else {
                      for (int j = 0; j < bodies.length; j++) {
                        // 过滤掉劳务类存货
                        if (labors.contains(bodies[j].getCbaseid()))
                          continue;
                        OrderVO tempVO = new OrderVO();
                        tempVO.setParentVO((OrderHeaderVO) vos[i].getParentVO().clone());
                        OrderItemVO[] items = new OrderItemVO[1];
                        items[0] = bodies[j];
                        tempVO.setChildrenVO(items);
                        orderVec.add(tempVO);
                      }
                    }
                }
            }
        } catch (Exception e) {
            SCMEnv.out(e);
            throw new SQLException(e.getMessage());
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        return orderVec;
    }

    /**
     * 用一个VO对象的属性更新数据库中的值。
     *
     * 创建日期：(2001-6-23)
     * @param orderItem nc.vo.sc.order.OrderItemVO
     * @exception java.sql.SQLException 异常说明。
     */
    public void updateItems(OrderItemVO[] orderItems) throws java.sql.SQLException {

        /*************************************************************/
        // 保留的系统管理接口：
        beforeCallMethod("nc.bs.sc.order.OrderDMO", "updateItems", new Object[] { orderItems });
        /*************************************************************/

        String sql = "update sc_order_b set corderid = ?, pk_corp = ?, cmangid = ?, cbaseid = ?, nordernum = ?, cassistunit = ?, nassistnum = ?, ndiscountrate = ?, idiscounttaxtype = ?, ntaxrate = ?, ccurrencytypeid = ?, noriginalnetprice = ?, noriginalcurprice = ?, noriginalcurmny = ?, noriginaltaxmny = ?, noriginalsummny = ?, nexchangeotobrate = ?, ntaxmny = ?, nmoney = ?, nsummny = ?, naccumarrvnum = ?, naccumstorenum = ?, naccuminvoicenum = ?, naccumwastnum = ?, dplanarrvdate = ?, cwarehouseid = ?, creceiveaddress = ?, cprojectid = ?, cprojectphaseid = ?, coperator = ?, forderrowstatus = ?, bisactive = ?, cordersource = ?, csourcebillid = ?, csourcebillrow = ?, cupsourcebilltype = ?, cupsourcebillid = ?, cupsourcebillrowid = ?, vmemo = ?, vfree1 = ?, vfree2 = ?, vfree3 = ?, vfree4 = ?, vfree5 = ?, vdef1 = ?, vdef2 = ?, vdef3 = ?, vdef4 = ?, vdef5 = ?, vdef6 = ?, vdef7 = ?, vdef8 = ?, vdef9 = ?, vdef10 = ?, vdef11 = ?, vdef12 = ?, vdef13 = ?, vdef14 = ?, vdef15 = ?, vdef16 = ?, vdef17 = ?, vdef18 = ?, vdef19 = ?, vdef20 = ?, pk_defdoc1 = ?, pk_defdoc2 = ?, pk_defdoc3 = ?, pk_defdoc4 = ?, pk_defdoc5 = ?, pk_defdoc6 = ?, pk_defdoc7 = ?, pk_defdoc8 = ?, pk_defdoc9 = ?, pk_defdoc10 = ?, pk_defdoc11 = ?, pk_defdoc12 = ?, pk_defdoc13 = ?, pk_defdoc14 = ?, pk_defdoc15 = ?, pk_defdoc16 = ?, pk_defdoc17 = ?, pk_defdoc18 = ?, pk_defdoc19 = ?, pk_defdoc20 = ?, crowno = ?, norgtaxprice = ?, norgnettaxprice = ?, vproducenum = ?, ccontractid = ?, ccontractrowid = ?, ccontractrcode = ?, vpriceauditcode = ?, cpriceauditid = ?, cpriceaudit_bid = ?, cpriceaudit_bb1id = ? where corder_bid = ?";

        Connection con = null;
        PreparedStatement stmt = null;
        try {
            con = getConnection();
            stmt = con.prepareStatement(sql);
            for (int i = 0; i < orderItems.length; i++) {
                // update non PK fields:
                if (orderItems[i].getCorderid() == null) {
                    stmt.setNull(1, Types.CHAR);
                } else {
                    stmt.setString(1, orderItems[i].getCorderid());
                }
                if (orderItems[i].getPk_corp() == null) {
                    stmt.setNull(2, Types.CHAR);
                } else {
                    stmt.setString(2, orderItems[i].getPk_corp());
                }
                if (orderItems[i].getCmangid() == null) {
                    stmt.setNull(3, Types.CHAR);
                } else {
                    stmt.setString(3, orderItems[i].getCmangid());
                }
                if (orderItems[i].getCbaseid() == null) {
                    stmt.setNull(4, Types.CHAR);
                } else {
                    stmt.setString(4, orderItems[i].getCbaseid());
                }
                if (orderItems[i].getNordernum() == null) {
                    stmt.setNull(5, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(5, orderItems[i].getNordernum().toBigDecimal());
                }
                if (orderItems[i].getCassistunit() == null) {
                    stmt.setNull(6, Types.CHAR);
                } else {
                    stmt.setString(6, orderItems[i].getCassistunit());
                }
                if (orderItems[i].getNassistnum() == null) {
                    stmt.setNull(7, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(7, orderItems[i].getNassistnum().toBigDecimal());
                }
                if (orderItems[i].getNdiscountrate() == null) {
                    stmt.setNull(8, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(8, orderItems[i].getNdiscountrate().toBigDecimal());
                }
                if (orderItems[i].getIdiscounttaxtype() == null) {
                    stmt.setNull(9, Types.INTEGER);
                } else {
                    stmt.setInt(9, orderItems[i].getIdiscounttaxtype().intValue());
                }
                if (orderItems[i].getNtaxrate() == null) {
                    stmt.setNull(10, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(10, orderItems[i].getNtaxrate().toBigDecimal());
                }
                if (orderItems[i].getCcurrencytypeid() == null) {
                    stmt.setNull(11, Types.CHAR);
                } else {
                    stmt.setString(11, orderItems[i].getCcurrencytypeid());
                }
                if (orderItems[i].getNoriginalnetprice() == null) {
                    stmt.setNull(12, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(12, orderItems[i].getNoriginalnetprice().toBigDecimal());
                }
                if (orderItems[i].getNoriginalcurprice() == null) {
                    stmt.setNull(13, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(13, orderItems[i].getNoriginalcurprice().toBigDecimal());
                }
                if (orderItems[i].getNoriginalcurmny() == null) {
                    stmt.setNull(14, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(14, orderItems[i].getNoriginalcurmny().toBigDecimal());
                }
                if (orderItems[i].getNoriginaltaxmny() == null) {
                    stmt.setNull(15, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(15, orderItems[i].getNoriginaltaxmny().toBigDecimal());
                }
                if (orderItems[i].getNoriginalsummny() == null) {
                    stmt.setNull(16, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(16, orderItems[i].getNoriginalsummny().toBigDecimal());
                }
                if (orderItems[i].getNexchangeotobrate() == null) {
                    stmt.setNull(17, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(17, orderItems[i].getNexchangeotobrate().toBigDecimal());
                }
                if (orderItems[i].getNtaxmny() == null) {
                    stmt.setNull(18, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(18, orderItems[i].getNtaxmny().toBigDecimal());
                }
                if (orderItems[i].getNmoney() == null) {
                    stmt.setNull(19, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(19, orderItems[i].getNmoney().toBigDecimal());
                }
                if (orderItems[i].getNsummny() == null) {
                    stmt.setNull(20, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(20, orderItems[i].getNsummny().toBigDecimal());
                }
                if (orderItems[i].getNaccumarrvnum() == null) {
                    stmt.setNull(21, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(21, orderItems[i].getNaccumarrvnum().toBigDecimal());
                }
                if (orderItems[i].getNaccumstorenum() == null) {
                    stmt.setNull(22, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(22, orderItems[i].getNaccumstorenum().toBigDecimal());
                }
                if (orderItems[i].getNaccuminvoicenum() == null) {
                    stmt.setNull(23, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(23, orderItems[i].getNaccuminvoicenum().toBigDecimal());
                }
                if (orderItems[i].getNaccumwastnum() == null) {
                    stmt.setNull(24, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(24, orderItems[i].getNaccumwastnum().toBigDecimal());
                }
                if (orderItems[i].getDplanarrvdate() == null) {
                    stmt.setNull(25, Types.CHAR);
                } else {
                    stmt.setString(25, orderItems[i].getDplanarrvdate().toString());
                }
                if (orderItems[i].getCwarehouseid() == null) {
                    stmt.setNull(26, Types.CHAR);
                } else {
                    stmt.setString(26, orderItems[i].getCwarehouseid());
                }
                if (orderItems[i].getCreceiveaddress() == null) {
                    stmt.setNull(27, Types.CHAR);
                } else {
                    stmt.setString(27, orderItems[i].getCreceiveaddress());
                }
                if (orderItems[i].getCprojectid() == null) {
                    stmt.setNull(28, Types.CHAR);
                } else {
                    stmt.setString(28, orderItems[i].getCprojectid());
                }
                if (orderItems[i].getCprojectphaseid() == null) {
                    stmt.setNull(29, Types.CHAR);
                } else {
                    stmt.setString(29, orderItems[i].getCprojectphaseid());
                }
                if (orderItems[i].getCoperator() == null) {
                    stmt.setNull(30, Types.CHAR);
                } else {
                    stmt.setString(30, orderItems[i].getCoperator());
                }
                if (orderItems[i].getForderrowstatus() == null) {
                    stmt.setNull(31, Types.INTEGER);
                } else {
                    stmt.setInt(31, orderItems[i].getForderrowstatus().intValue());
                }
                if (orderItems[i].getBisactive() == null) {
                    stmt.setNull(32, Types.CHAR);
                } else {
                    stmt.setString(32, orderItems[i].getBisactive().booleanValue() ? "0" : "1");
                }
                if (orderItems[i].getCordersource() == null) {
                    stmt.setNull(33, Types.CHAR);
                } else {
                    stmt.setString(33, orderItems[i].getCordersource());
                }
                if (orderItems[i].getCsourcebillid() == null) {
                    stmt.setNull(34, Types.CHAR);
                } else {
                    stmt.setString(34, orderItems[i].getCsourcebillid());
                }
                if (orderItems[i].getCsourcebillrow() == null) {
                    stmt.setNull(35, Types.CHAR);
                } else {
                    stmt.setString(35, orderItems[i].getCsourcebillrow());
                }
                if (orderItems[i].getCupsourcebilltype() == null) {
                    stmt.setNull(36, Types.CHAR);
                } else {
                    stmt.setString(36, orderItems[i].getCupsourcebilltype());
                }
                if (orderItems[i].getCupsourcebillid() == null) {
                    stmt.setNull(37, Types.CHAR);
                } else {
                    stmt.setString(37, orderItems[i].getCupsourcebillid());
                }
                if (orderItems[i].getCupsourcebillrowid() == null) {
                    stmt.setNull(38, Types.CHAR);
                } else {
                    stmt.setString(38, orderItems[i].getCupsourcebillrowid());
                }
                if (orderItems[i].getVmemo() == null) {
                    stmt.setNull(39, Types.CHAR);
                } else {
                    stmt.setString(39, orderItems[i].getVmemo());
                }
                if (orderItems[i].getVfree1() == null) {
                    stmt.setNull(40, Types.CHAR);
                } else {
                    stmt.setString(40, orderItems[i].getVfree1());
                }
                if (orderItems[i].getVfree2() == null) {
                    stmt.setNull(41, Types.CHAR);
                } else {
                    stmt.setString(41, orderItems[i].getVfree2());
                }
                if (orderItems[i].getVfree3() == null) {
                    stmt.setNull(42, Types.CHAR);
                } else {
                    stmt.setString(42, orderItems[i].getVfree3());
                }
                if (orderItems[i].getVfree4() == null) {
                    stmt.setNull(43, Types.CHAR);
                } else {
                    stmt.setString(43, orderItems[i].getVfree4());
                }
                if (orderItems[i].getVfree5() == null) {
                    stmt.setNull(44, Types.CHAR);
                } else {
                    stmt.setString(44, orderItems[i].getVfree5());
                }
                if (orderItems[i].getVdef1() == null) {
                    stmt.setNull(45, Types.CHAR);
                } else {
                    stmt.setString(45, orderItems[i].getVdef1());
                }
                if (orderItems[i].getVdef2() == null) {
                    stmt.setNull(46, Types.CHAR);
                } else {
                    stmt.setString(46, orderItems[i].getVdef2());
                }
                if (orderItems[i].getVdef3() == null) {
                    stmt.setNull(47, Types.CHAR);
                } else {
                    stmt.setString(47, orderItems[i].getVdef3());
                }
                if (orderItems[i].getVdef4() == null) {
                    stmt.setNull(48, Types.CHAR);
                } else {
                    stmt.setString(48, orderItems[i].getVdef4());
                }
                if (orderItems[i].getVdef5() == null) {
                    stmt.setNull(49, Types.CHAR);
                } else {
                    stmt.setString(49, orderItems[i].getVdef5());
                }
                if (orderItems[i].getVdef6() == null) {
                    stmt.setNull(50, Types.CHAR);
                } else {
                    stmt.setString(50, orderItems[i].getVdef6());
                }
                if (orderItems[i].getVdef7() == null) {
                    stmt.setNull(51, Types.CHAR);
                } else {

                    stmt.setString(51, orderItems[i].getVdef7());
                }
                if (orderItems[i].getVdef8() == null) {
                    stmt.setNull(52, Types.CHAR);
                } else {

                    stmt.setString(52, orderItems[i].getVdef8());
                }
                if (orderItems[i].getVdef9() == null) {
                    stmt.setNull(53, Types.CHAR);
                } else {

                    stmt.setString(53, orderItems[i].getVdef9());
                }
                if (orderItems[i].getVdef10() == null) {
                    stmt.setNull(54, Types.CHAR);
                } else {

                    stmt.setString(54, orderItems[i].getVdef10());
                }
                if (orderItems[i].getVdef11() == null) {
                    stmt.setNull(55, Types.CHAR);
                } else {
                    stmt.setString(55, orderItems[i].getVdef11());
                }
                if (orderItems[i].getVdef12() == null) {
                    stmt.setNull(56, Types.CHAR);
                } else {
                    stmt.setString(56, orderItems[i].getVdef12());
                }
                if (orderItems[i].getVdef13() == null) {
                    stmt.setNull(57, Types.CHAR);
                } else {
                    stmt.setString(57, orderItems[i].getVdef13());
                }
                if (orderItems[i].getVdef14() == null) {
                    stmt.setNull(58, Types.CHAR);
                } else {
                    stmt.setString(58, orderItems[i].getVdef14());
                }
                if (orderItems[i].getVdef15() == null) {
                    stmt.setNull(59, Types.CHAR);
                } else {
                    stmt.setString(59, orderItems[i].getVdef15());
                }
                if (orderItems[i].getVdef16() == null) {
                    stmt.setNull(60, Types.CHAR);
                } else {
                    stmt.setString(60, orderItems[i].getVdef16());
                }
                if (orderItems[i].getVdef17() == null) {
                    stmt.setNull(61, Types.CHAR);
                } else {
                    stmt.setString(61, orderItems[i].getVdef17());
                }
                if (orderItems[i].getVdef18() == null) {
                    stmt.setNull(62, Types.CHAR);
                } else {
                    stmt.setString(62, orderItems[i].getVdef18());
                }
                if (orderItems[i].getVdef19() == null) {
                    stmt.setNull(63, Types.CHAR);
                } else {
                    stmt.setString(63, orderItems[i].getVdef19());
                }
                if (orderItems[i].getVdef20() == null) {
                    stmt.setNull(64, Types.CHAR);
                } else {
                    stmt.setString(64, orderItems[i].getVdef20());
                }
                if (orderItems[i].getPKDefDoc1() == null) {
                    stmt.setNull(65, Types.CHAR);
                } else {
                    stmt.setString(65, orderItems[i].getPKDefDoc1());
                }
                if (orderItems[i].getPKDefDoc2() == null) {
                    stmt.setNull(66, Types.CHAR);
                } else {
                    stmt.setString(66, orderItems[i].getPKDefDoc2());
                }
                if (orderItems[i].getPKDefDoc3() == null) {
                    stmt.setNull(67, Types.CHAR);
                } else {
                    stmt.setString(67, orderItems[i].getPKDefDoc3());
                }
                if (orderItems[i].getPKDefDoc4() == null) {
                    stmt.setNull(68, Types.CHAR);
                } else {
                    stmt.setString(68, orderItems[i].getPKDefDoc4());
                }
                if (orderItems[i].getPKDefDoc5() == null) {
                    stmt.setNull(69, Types.CHAR);
                } else {
                    stmt.setString(69, orderItems[i].getPKDefDoc5());
                }
                if (orderItems[i].getPKDefDoc6() == null) {
                    stmt.setNull(70, Types.CHAR);
                } else {
                    stmt.setString(70, orderItems[i].getPKDefDoc6());
                }
                if (orderItems[i].getPKDefDoc7() == null) {
                    stmt.setNull(71, Types.CHAR);
                } else {
                    stmt.setString(71, orderItems[i].getPKDefDoc7());
                }
                if (orderItems[i].getPKDefDoc8() == null) {
                    stmt.setNull(72, Types.CHAR);
                } else {
                    stmt.setString(72, orderItems[i].getPKDefDoc8());
                }
                if (orderItems[i].getPKDefDoc9() == null) {
                    stmt.setNull(73, Types.CHAR);
                } else {
                    stmt.setString(73, orderItems[i].getPKDefDoc9());
                }
                if (orderItems[i].getPKDefDoc10() == null) {
                    stmt.setNull(74, Types.CHAR);
                } else {
                    stmt.setString(74, orderItems[i].getPKDefDoc10());
                }
                if (orderItems[i].getPKDefDoc11() == null) {
                    stmt.setNull(75, Types.CHAR);
                } else {
                    stmt.setString(75, orderItems[i].getPKDefDoc11());
                }
                if (orderItems[i].getPKDefDoc12() == null) {
                    stmt.setNull(76, Types.CHAR);
                } else {
                    stmt.setString(76, orderItems[i].getPKDefDoc12());
                }
                if (orderItems[i].getPKDefDoc13() == null) {
                    stmt.setNull(77, Types.CHAR);
                } else {
                    stmt.setString(77, orderItems[i].getPKDefDoc13());
                }
                if (orderItems[i].getPKDefDoc14() == null) {
                    stmt.setNull(78, Types.CHAR);
                } else {
                    stmt.setString(78, orderItems[i].getPKDefDoc14());
                }
                if (orderItems[i].getPKDefDoc15() == null) {
                    stmt.setNull(79, Types.CHAR);
                } else {
                    stmt.setString(79, orderItems[i].getPKDefDoc15());
                }
                if (orderItems[i].getPKDefDoc16() == null) {
                    stmt.setNull(80, Types.CHAR);
                } else {
                    stmt.setString(80, orderItems[i].getPKDefDoc16());
                }
                if (orderItems[i].getPKDefDoc17() == null) {
                    stmt.setNull(81, Types.CHAR);
                } else {
                    stmt.setString(81, orderItems[i].getPKDefDoc17());
                }
                if (orderItems[i].getPKDefDoc18() == null) {
                    stmt.setNull(82, Types.CHAR);
                } else {
                    stmt.setString(82, orderItems[i].getPKDefDoc18());
                }
                if (orderItems[i].getPKDefDoc19() == null) {
                    stmt.setNull(83, Types.CHAR);
                } else {
                    stmt.setString(83, orderItems[i].getPKDefDoc19());
                }
                if (orderItems[i].getPKDefDoc20() == null) {
                    stmt.setNull(84, Types.CHAR);
                } else {
                    stmt.setString(84, orderItems[i].getPKDefDoc20());
                }

                if (orderItems[i].getCrowno() == null) {
                    stmt.setNull(85, Types.CHAR);
                } else {
                    stmt.setString(85, orderItems[i].getCrowno());
                }
                if (orderItems[i].getNorgtaxprice() == null) {
                    stmt.setNull(86, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(86, orderItems[i].getNorgtaxprice().toBigDecimal());
                }
                if (orderItems[i].getNorgnettaxprice() == null) {
                    stmt.setNull(87, Types.INTEGER);
                } else {
                    stmt.setBigDecimal(87, orderItems[i].getNorgnettaxprice().toBigDecimal());
                }

                //
                //
                if (orderItems[i].getVproducenum() == null) {
                    stmt.setNull(88, Types.CHAR);
                } else {
                    stmt.setString(88, orderItems[i].getVproducenum());
                }

                //
                if (orderItems[i].getCcontractid() == null) {
                    stmt.setNull(89, Types.CHAR);
                } else {
                    stmt.setString(89, orderItems[i].getCcontractid());
                }

                if (orderItems[i].getCcontractrowid() == null) {
                    stmt.setNull(90, Types.CHAR);
                } else {
                    stmt.setString(90, orderItems[i].getCcontractrowid());
                }

                if (orderItems[i].getCcontractrcode() == null) {
                    stmt.setNull(91, Types.CHAR);
                } else {
                    stmt.setString(91, orderItems[i].getCcontractrcode());
                }
                //
                if (orderItems[i].getVpriceauditcode() == null) {
                    stmt.setNull(92, Types.CHAR);
                } else {
                    stmt.setString(92, orderItems[i].getVpriceauditcode());
                }
                
                if (orderItems[i].getCpriceauditid() == null) {
                    stmt.setNull(93, Types.CHAR);
                } else {
                    stmt.setString(93, orderItems[i].getCpriceauditid());
                }
                
                if (orderItems[i].getCpriceaudit_bid() == null) {
                    stmt.setNull(94, Types.CHAR);
                } else {
                    stmt.setString(94, orderItems[i].getCpriceaudit_bid());
                }
                
                if (orderItems[i].getCpriceaudit_bb1id() == null) {
                    stmt.setNull(95, Types.CHAR);
                } else {
                    stmt.setString(95, orderItems[i].getCpriceaudit_bb1id());
                }

                // find record by PK fields:
                stmt.setString(96, orderItems[i].getPrimaryKey());
                //
                stmt.executeUpdate();
            }
            executeBatch(stmt);
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (Exception e) {
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (Exception e) {
            }
        }

        /*************************************************************/
        // 保留的系统管理接口：
        afterCallMethod("nc.bs.sc.order.OrderDMO", "updateItems", new Object[] { orderItems });
        /*************************************************************/
    }

    /**
     * 功能：解耦构造方法
     * 创建：晁志平
     * 时间：2005-01-25
     * */
    public AggregatedValueObject[] findVOsBack(CircularlyAccessibleValueObject[] headers, String strSQL) throws BusinessException {

        try {
			return (OrderVO[]) findVOsBack((OrderHeaderVO[]) headers, strSQL);
		} catch (SQLException e) {
			// TODO 自动生成 catch 块
			SCMEnv.out(e);
		}
		return null;
    }

    /**
     * 采购合同TS(订单参照合同Z2时判断)
     * @param id
     * @return
     * @throws SQLException
     * <p>
     * @author lixiaodong
     * @time 2007-4-20 下午03:33:59
     */
    public String getCTState(String id) throws SQLException {

        if (id == null)
            return null;

        String sql = "";

        sql = "select ts from ct_manage where dr=0 and activeflag=0 and ctflag=2 and bsc='Y' and pk_ct_manage = ?";//根据合同主键查询合同状态:ctflag=2:生效 activeflag=0:激活 

        
        Connection con = null;
        PreparedStatement stmt = null;
        String ts = null;
        
        try {
          con = getConnection();
          stmt = con.prepareStatement(sql);
          if (id != null) {
            stmt.setString(1, id);
                
          }
          ResultSet rs = stmt.executeQuery();
          //
          while (rs.next()) {
            ts = rs.getString(1);
          }
        } finally {
          try {
            if (stmt != null) {
              stmt.close();
            }
          } catch (Exception e) {
          }
          try {
            if (con != null) {
              con.close();
            }
          } catch (Exception e) {
          }
        }
            return ts;
    }

    /**
     * 方法功能描述：根据公司及订单号得到相对应的订单头ID,如果订单号中有不符合条件的，抛异常。
     * <p>
     * <b>examples:</b>
     * <p>
     * 使用示例
     * <p>
     * <b>参数说明</b>
     * @param sPk_corp  公司PK 若为空，则检查范围包括全集团的委外订单号(v502 付款单单据号检查)
     * @param saOrderCode 订单号数组
     * @return String[] 与saOrderCode一一对应的订单ID数组
     * @throws BusinessException
     * <p>
     * @author lixiaodong
     * @time 2007-8-21 下午01:54:33
     */
    public String[] getIdForCode(String sPk_corp, String[] saOrderCode) throws BusinessException {

      String  sMethodName  = "nc.bs.sc.order.OrderImpl.getIdForCode(String, String [])" ;

      //参数正确性检查
      if (saOrderCode==null) {
        SCMEnv.out(sMethodName+"传入参数不正确！") ;
        return null ;
      }
      String[]  saDistinctCode = PuPubVO.getDistinctArray(saOrderCode) ;
      if (saDistinctCode==null || saDistinctCode.length == 0) {
        return  null ;
      }

      StringBuffer  sbufTable = new   StringBuffer() ;
      sbufTable.append( "sc_order JOIN sc_order_b ON sc_order_b.corderid=sc_order.corderid" );
      //查询得到订单ID数组
      StringBuffer  sbufWhere = new StringBuffer() ;
      //审批
      //满足未关闭条件
      //sbufWhere.append( PuPubVO.getORWhereByValues("vordercode",saDistinctCode) ) ;
      //使用临时表
      String sCodeSubSql = null ;
      try {
        sCodeSubSql = new TempTableDMO().insertTempTable(saDistinctCode, nc.vo.scm.pub.TempTableVO.TEMPTABLE_SC_00, nc.vo.scm.pub.TempTableVO.TEMPPKFIELD_SC);
      } catch (Exception  e) {
        
        PublicDMO.throwBusinessException(e) ;
      }
      sbufWhere.append( " sc_order.vordercode IN " + sCodeSubSql );
      sbufWhere.append( " AND sc_order.dr=0 AND sc_order.ibillstatus IN ("+BillStatus.AUDITED+")" );

      if ( PuPubVO.getString_TrimZeroLenAsNull(sPk_corp)!=null) {
        sbufWhere.append( " AND sc_order.pk_corp='"+sPk_corp+"' ");//v502 付款单单据号检查，检查范围包括全集团的委外订单号
      }

      sbufWhere.append( " AND "+"sc_order_b.dr=0" );

      Hashtable htRet = null ;
      PublicDMO    dmoPub = null ;
      try {
        //重新查询订单
        dmoPub = new  PublicDMO() ;
        htRet = dmoPub.queryHtResultFromAnyTable(sbufTable.toString(),"vordercode",new String[]{"sc_order.corderid"},sbufWhere.toString()) ;
      } catch (Exception  e) {
        PublicDMO.throwBusinessException(sMethodName,e) ;
      }

      if (htRet==null || htRet.size()!=saDistinctCode.length) {
        PublicDMO.throwBusinessException(sMethodName,new BusinessException("存在不符合条件的委外订单号，请检查！"/*@res "存在不符合条件的委外订单号，请检查！"*/)) ;
      }
      int iLen = saOrderCode.length;
      String[] saId = new String[iLen];
      Vector vecData = null;
      for (int i = 0; i < iLen; i++){
        vecData = (Vector)htRet.get(saOrderCode[i]) ;
        if (vecData==null) {
          PublicDMO.throwBusinessException(sMethodName,new BusinessException("订单"+saOrderCode[i]+"不存在或发生变化，请检查！"/*@res "订单"+saOrderCode[i]+"不存在或发生变化，请检查！"*/)) ;
        }
        saId[i] = (String)((Object[])vecData.elementAt(0))[0] ;
      }
      return  saId ;
    }

    /**
     * 父类方法重写
     * 
     * @see nc.itf.sc.inter.IScToPu_OrderDMO#queryOrderVO(java.lang.String)
     * 
     * 根据查询条件返回聚合VO
     * 
     */
    public OrderVO[] queryOrderVO(String whereString) throws BusinessException {
    if (PuPubVO.getString_TrimZeroLenAsNull(whereString) == null) {
      return null;
    }
    OrderVO[] orderVO = null;
    OrderHeaderVO[] orderHeaderVO = (OrderHeaderVO[]) queryAllHeadData(whereString);
    if (orderHeaderVO == null || orderHeaderVO.length < 1) {
      return null;
    }
    try {
      orderVO = findVOsBack(orderHeaderVO, null);
    }
    catch (SQLException e) {
      nc.bs.scm.pub.ScmPubDMO.throwBusinessException(e);
    }
    return orderVO;
  }
    
    /**
     * 送审之后，设置状态为审批中状态。
     * <p>
     * <b>examples:</b>
     * <p>
     * 使用示例
     * <p>
     * <b>参数说明</b>
     * @param vo
     * @throws java.sql.SQLException
     * @throws BusinessException
     * <p>
     * @author lixiaodong
     * @time 2008-12-12 下午02:44:45
     */
    public void setCheckGoing(OrderVO vo) throws java.sql.SQLException, BusinessException {
      if (vo == null || ((OrderHeaderVO) vo.getParentVO()).getPrimaryKey() == null) {
        return;
      }
      OrderHeaderVO header = ((OrderHeaderVO) vo.getParentVO());
      String strSql = "update sc_order set  ibillstatus = 2 where dr = 0  and corderid = '" + header.getPrimaryKey() + "' ";
      String getTs = "select ts from sc_order where dr = 0 and corderid = '" + header.getPrimaryKey() + "'";
      Connection con = null;
      PreparedStatement stmt = null;
      Statement state = null;
      try {
        con = getConnection();
        stmt = prepareStatement(con, strSql);
        executeUpdate(stmt);
        executeBatch(stmt);
        state = con.createStatement();
        ResultSet rs = state.executeQuery(getTs);
        if (rs.next())
          header.setTs(rs.getString("ts"));
        header.setIbillstatus(2);
      }
      finally {
        try {
          if (stmt != null) {
            stmt.close();
          }
        }
        catch (Exception e) {//
        }
        try {
          if (state != null) {
            state.close();
          }
        }
        catch (Exception e) {//
        }
        try {
          if (con != null) {
            con.close();
          }
        }
        catch (Exception e) {//
        }
      }
    }
    
    /**
     * 
     * 此方法为了解决删除缓存物料生产档案而写。
     * 使用此方法的前提为：where部分可以唯一确定所选择表的一条记录，否则返回值为where条件过滤的第一条记录。
     * <p>
     * <b>examples:</b>
     * <p>
     * 使用示例
     * <p>
     * <b>参数说明</b>
     * @param sTable 所选择的表名
     * @param sFields  需要选择的字段
     * @param sWhere  条件数组
     * @return
     * @throws BusinessException
     * <p>
     * @author donggq
     * @time 2008-8-22 上午09:55:08
     */
    public Object[][] queryResultsFromTableByWhere(
        String sTable,
        String[] sFields,
        String[] sWhere) throws BusinessException{
      Object[][] retObj = new Object[sFields.length][sWhere.length];
      try{
        ScmPubDMO dmo = new ScmPubDMO();
        for (int i = 0; i < sWhere.length; i++) {
          Object[][] tempObj = dmo.queryResultsFromAnyTable(sTable, sFields, sWhere[i]);
          if(tempObj != null && tempObj[0] != null){
            retObj[0] = tempObj[0];
          }
        }
        return retObj;
      }catch (Exception e){
        SCMEnv.out(e);
        PublicDMO.throwBusinessException(e);
      }
      return null;
    }

    /**
     * 方法功能描述：委外订单审批过虑表体行检查，移至后台 V55。
     * <p>
     * <b>examples:</b>
     * <p>
     * 使用示例
     * <p>
     * <b>参数说明</b>
     * @param bodyVO
     * @return
     * @throws BusinessException
     * @throws SQLException
     * <p>
     * @author lixiaodong
     * @time 2008-12-17 下午02:12:31
     */
    private OrderItemVO[] filterItemVOByOuttype(OrderItemVO bodyVO[]) throws BusinessException, SQLException{
      if(bodyVO==null || bodyVO.length<1){
        return bodyVO;
      }
      
      ArrayList<String> alWhere = new ArrayList<String>();
      // 从物料生产档案获取委外类型
      
      OrderHeaderVO[] headvo = queryAllHead("1", "sc_order.corderid='"+bodyVO[0].getCorderid()+"'", "");
      
      for (int i = 0; i < bodyVO.length; i++) {
        alWhere.add("pk_calbody='" + headvo[0].getCwareid() + "' and pk_invbasdoc='" + bodyVO[i].getCbaseid() + "'");
      }
      String sOuttype[] = new String[bodyVO.length];
      /** ***************修改物料生产档案的查询方式（此档案缓存被取消，需要从后台查询）***************** */
      Object[][] retObj = null;
      try {
        retObj = queryResultsFromTableByWhere("bd_produce", new String[] { "outtype" }, alWhere.toArray(new String[alWhere.size()]));
      }
      catch (BusinessException be) {
        PublicDMO.throwBusinessException(be);
      }
      Vector vTemp = new Vector();

      int count = 0;
      for (int i = 0; i < bodyVO.length; i++) {
        if (retObj != null && retObj.length > 0 && retObj.length > count && retObj[count] != null && retObj[count].length > 0 && retObj[count][0] != null) {
          sOuttype[i] = PuPubVO.getString_TrimZeroLenAsNull(retObj[count][0].toString());
          count++;
          if ("OB".equalsIgnoreCase(sOuttype[i])){
            vTemp.addElement(bodyVO[i]);
          }
        }
      }
      
      OrderItemVO[] bodyVO2 = new OrderItemVO[vTemp.size()];
      vTemp.copyInto(bodyVO2);
      return bodyVO2;
      /** ************************************************ */
    }
    
    /**
     * 检查委外订单VO是否可以送审。
     * 若不能送审，抛出异常
     * @param orderVO
     * @throws BusinessException
     */
    public void checkNeedSendToAudit(OrderVO orderVO) throws BusinessException {
  		try {
  			if (!getIPFWorkFlowQry().isCheckman(
  					(((OrderHeaderVO) orderVO.getParentVO())).getPrimaryKey(),
  					nc.vo.scm.pu.BillTypeConst.SC_ORDER,
  					InvocationInfoProxy.getInstance().getUserCode())) {
  				// 当前用户没有送审权限，请检查审批流配置  				
  				throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
  	  					.getStrByID("401201", "UPP401201-000075"));
  			}
  		} catch (BusinessException e1) {
  			// 日志异常
  			nc.vo.scm.pub.SCMEnv.out(e1);
  		}
  		
  		Integer iBillStatus = ((OrderHeaderVO) orderVO.getParentVO()).getIbillstatus();
  		if ( iBillStatus.equals(BillStatus.AUDITING) ) {
			// 当前单据已经送审，请检查审批流状态  			
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
  					.getStrByID("401201", "UPP401201-000076"));
		}
  		else if ( iBillStatus.equals(BillStatus.AUDITED) ) {
			// 当前单据已经审批完成，不能送审，请检查审批流状态
			throw new BusinessException(nc.bs.ml.NCLangResOnserver.getInstance()
  					.getStrByID("401201", "UPP401201-000077"));
		}

  		String sPk_corp = InvocationInfoProxy.getInstance().getCorpCode();
  		String sBizType = ((OrderHeaderVO) orderVO.getParentVO()).getCbiztype();
  		String sBillId = ((OrderHeaderVO) orderVO.getParentVO()).getCorderid();
  		String sBillOperator = InvocationInfoProxy.getInstance().getUserCode();
  		boolean bNeedSendToAudit = SCMPfPubUtil.isNeedSendToAudit(
  				ScmConst.SC_Order, sPk_corp, sBizType, sBillId, sBillOperator);
  		if (!bNeedSendToAudit) {
  			// 目前不能进行送审操作，请检查审批流是否正确
  			throw new BusinessException(
  					nc.bs.ml.NCLangResOnserver.getInstance()
  					.getStrByID("401201", "UPP401201-000052"));
  		}
  	}
    
    /**
     * 获取审批流查询工具类
     * @return
     */  
    private IPFWorkflowQry getIPFWorkFlowQry() {
  	return (IPFWorkflowQry) NCLocator.getInstance().lookup(
  		IPFWorkflowQry.class.getName());
    }
}